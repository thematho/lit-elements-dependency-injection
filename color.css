.mdc-typography {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-font-family, Roboto, sans-serif);
}

.mdc-typography--headline1 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 6rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline1-font-size, 6rem);
  line-height: 6rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline1-line-height, 6rem);
  font-weight: 300;
  /* @alternate */
  font-weight: var(--mdc-typography-headline1-font-weight, 300);
  letter-spacing: -0.015625em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline1-letter-spacing, -0.015625em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline1-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline1-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline1-text-transform, inherit);
}

.mdc-typography--headline2 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 3.75rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline2-font-size, 3.75rem);
  line-height: 3.75rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline2-line-height, 3.75rem);
  font-weight: 300;
  /* @alternate */
  font-weight: var(--mdc-typography-headline2-font-weight, 300);
  letter-spacing: -0.0083333333em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline2-letter-spacing, -0.0083333333em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline2-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline2-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline2-text-transform, inherit);
}

.mdc-typography--headline3 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline3-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 3rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline3-font-size, 3rem);
  line-height: 3.125rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline3-line-height, 3.125rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-headline3-font-weight, 400);
  letter-spacing: normal;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline3-letter-spacing, normal);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline3-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline3-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline3-text-transform, inherit);
}

.mdc-typography--headline4 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline4-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 2.125rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline4-font-size, 2.125rem);
  line-height: 2.5rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline4-line-height, 2.5rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-headline4-font-weight, 400);
  letter-spacing: 0.0073529412em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline4-letter-spacing, 0.0073529412em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline4-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline4-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline4-text-transform, inherit);
}

.mdc-typography--headline5 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline5-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 1.5rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline5-font-size, 1.5rem);
  line-height: 2rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline5-line-height, 2rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-headline5-font-weight, 400);
  letter-spacing: normal;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline5-letter-spacing, normal);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline5-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline5-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline5-text-transform, inherit);
}

.mdc-typography--headline6 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 1.25rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline6-font-size, 1.25rem);
  line-height: 2rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline6-line-height, 2rem);
  font-weight: 500;
  /* @alternate */
  font-weight: var(--mdc-typography-headline6-font-weight, 500);
  letter-spacing: 0.0125em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline6-letter-spacing, 0.0125em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline6-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline6-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline6-text-transform, inherit);
}

.mdc-typography--subtitle1 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 1rem;
  /* @alternate */
  font-size: var(--mdc-typography-subtitle1-font-size, 1rem);
  line-height: 1.75rem;
  /* @alternate */
  line-height: var(--mdc-typography-subtitle1-line-height, 1.75rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-subtitle1-font-weight, 400);
  letter-spacing: 0.009375em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-subtitle1-text-decoration, inherit);
          text-decoration: var(--mdc-typography-subtitle1-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-subtitle1-text-transform, inherit);
}

.mdc-typography--subtitle2 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-subtitle2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 0.875rem;
  /* @alternate */
  font-size: var(--mdc-typography-subtitle2-font-size, 0.875rem);
  line-height: 1.375rem;
  /* @alternate */
  line-height: var(--mdc-typography-subtitle2-line-height, 1.375rem);
  font-weight: 500;
  /* @alternate */
  font-weight: var(--mdc-typography-subtitle2-font-weight, 500);
  letter-spacing: 0.0071428571em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-subtitle2-letter-spacing, 0.0071428571em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-subtitle2-text-decoration, inherit);
          text-decoration: var(--mdc-typography-subtitle2-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-subtitle2-text-transform, inherit);
}

.mdc-typography--body1 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-body1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 1rem;
  /* @alternate */
  font-size: var(--mdc-typography-body1-font-size, 1rem);
  line-height: 1.5rem;
  /* @alternate */
  line-height: var(--mdc-typography-body1-line-height, 1.5rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-body1-font-weight, 400);
  letter-spacing: 0.03125em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-body1-letter-spacing, 0.03125em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-body1-text-decoration, inherit);
          text-decoration: var(--mdc-typography-body1-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-body1-text-transform, inherit);
}

.mdc-typography--body2 {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 0.875rem;
  /* @alternate */
  font-size: var(--mdc-typography-body2-font-size, 0.875rem);
  line-height: 1.25rem;
  /* @alternate */
  line-height: var(--mdc-typography-body2-line-height, 1.25rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-body2-font-weight, 400);
  letter-spacing: 0.0178571429em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-body2-letter-spacing, 0.0178571429em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-body2-text-decoration, inherit);
          text-decoration: var(--mdc-typography-body2-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-body2-text-transform, inherit);
}

.mdc-typography--caption {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 0.75rem;
  /* @alternate */
  font-size: var(--mdc-typography-caption-font-size, 0.75rem);
  line-height: 1.25rem;
  /* @alternate */
  line-height: var(--mdc-typography-caption-line-height, 1.25rem);
  font-weight: 400;
  /* @alternate */
  font-weight: var(--mdc-typography-caption-font-weight, 400);
  letter-spacing: 0.0333333333em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-caption-letter-spacing, 0.0333333333em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-caption-text-decoration, inherit);
          text-decoration: var(--mdc-typography-caption-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-caption-text-transform, inherit);
}

.mdc-typography--button {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 0.875rem;
  /* @alternate */
  font-size: var(--mdc-typography-button-font-size, 0.875rem);
  line-height: 2.25rem;
  /* @alternate */
  line-height: var(--mdc-typography-button-line-height, 2.25rem);
  font-weight: 500;
  /* @alternate */
  font-weight: var(--mdc-typography-button-font-weight, 500);
  letter-spacing: 0.0892857143em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-button-letter-spacing, 0.0892857143em);
  text-decoration: none;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-button-text-decoration, none);
          text-decoration: var(--mdc-typography-button-text-decoration, none);
  text-transform: uppercase;
  /* @alternate */
  text-transform: var(--mdc-typography-button-text-transform, uppercase);
}

.mdc-typography--overline {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-overline-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 0.75rem;
  /* @alternate */
  font-size: var(--mdc-typography-overline-font-size, 0.75rem);
  line-height: 2rem;
  /* @alternate */
  line-height: var(--mdc-typography-overline-line-height, 2rem);
  font-weight: 500;
  /* @alternate */
  font-weight: var(--mdc-typography-overline-font-weight, 500);
  letter-spacing: 0.1666666667em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-overline-letter-spacing, 0.1666666667em);
  text-decoration: none;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-overline-text-decoration, none);
          text-decoration: var(--mdc-typography-overline-text-decoration, none);
  text-transform: uppercase;
  /* @alternate */
  text-transform: var(--mdc-typography-overline-text-transform, uppercase);
}

.mdc-elevation--z0 {
  /* @alternate */
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z1 {
  /* @alternate */
  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z2 {
  /* @alternate */
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z3 {
  /* @alternate */
  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z4 {
  /* @alternate */
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z5 {
  /* @alternate */
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z6 {
  /* @alternate */
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z7 {
  /* @alternate */
  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z8 {
  /* @alternate */
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z9 {
  /* @alternate */
  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z10 {
  /* @alternate */
  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z11 {
  /* @alternate */
  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z12 {
  /* @alternate */
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z13 {
  /* @alternate */
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z14 {
  /* @alternate */
  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z15 {
  /* @alternate */
  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z16 {
  /* @alternate */
  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z17 {
  /* @alternate */
  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z18 {
  /* @alternate */
  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z19 {
  /* @alternate */
  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z20 {
  /* @alternate */
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z21 {
  /* @alternate */
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z22 {
  /* @alternate */
  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z23 {
  /* @alternate */
  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12);
}

.mdc-elevation--z24 {
  /* @alternate */
  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);
}

.mdc-elevation-transition {
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow;
}

.mdc-top-app-bar {
  background-color: #6200ee;
  /* @alternate */
  background-color: var(--mdc-theme-primary, #6200ee);
  color: white;
  display: flex;
  position: fixed;
  flex-direction: column;
  justify-content: space-between;
  box-sizing: border-box;
  width: 100%;
  z-index: 4;
}
.mdc-top-app-bar .mdc-top-app-bar__action-item,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon {
  color: #fff;
  /* @alternate */
  color: var(--mdc-theme-on-primary, #fff);
}
.mdc-top-app-bar .mdc-top-app-bar__action-item::before, .mdc-top-app-bar .mdc-top-app-bar__action-item::after,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon::before,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon::after {
  background-color: #fff;
  /* @alternate */
  background-color: var(--mdc-ripple-color, var(--mdc-theme-on-primary, #fff));
}
.mdc-top-app-bar .mdc-top-app-bar__action-item:hover::before, .mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-surface--hover::before,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:hover::before,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-surface--hover::before {
  opacity: 0.08;
  /* @alternate */
  opacity: var(--mdc-ripple-hover-opacity, 0.08);
}
.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded--background-focused::before, .mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):focus::before,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded--background-focused::before,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):focus::before {
  transition-duration: 75ms;
  opacity: 0.24;
  /* @alternate */
  opacity: var(--mdc-ripple-focus-opacity, 0.24);
}
.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded)::after,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded)::after {
  transition: opacity 150ms linear;
}
.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):active::after,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.24;
  /* @alternate */
  opacity: var(--mdc-ripple-press-opacity, 0.24);
}
.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded,
.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: var(--mdc-ripple-press-opacity, 0.24);
}
.mdc-top-app-bar__row {
  display: flex;
  position: relative;
  box-sizing: border-box;
  width: 100%;
  height: 64px;
}
.mdc-top-app-bar__section {
  display: inline-flex;
  flex: 1 1 auto;
  align-items: center;
  min-width: 0;
  padding: 8px 12px;
  z-index: 1;
}
.mdc-top-app-bar__section--align-start {
  justify-content: flex-start;
  order: -1;
}
.mdc-top-app-bar__section--align-end {
  justify-content: flex-end;
  order: 1;
}
.mdc-top-app-bar__title {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-family: Roboto, sans-serif;
  /* @alternate */
  font-family: var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));
  font-size: 1.25rem;
  /* @alternate */
  font-size: var(--mdc-typography-headline6-font-size, 1.25rem);
  line-height: 2rem;
  /* @alternate */
  line-height: var(--mdc-typography-headline6-line-height, 2rem);
  font-weight: 500;
  /* @alternate */
  font-weight: var(--mdc-typography-headline6-font-weight, 500);
  letter-spacing: 0.0125em;
  /* @alternate */
  letter-spacing: var(--mdc-typography-headline6-letter-spacing, 0.0125em);
  text-decoration: inherit;
  /* @alternate */
  -webkit-text-decoration: var(--mdc-typography-headline6-text-decoration, inherit);
          text-decoration: var(--mdc-typography-headline6-text-decoration, inherit);
  text-transform: inherit;
  /* @alternate */
  text-transform: var(--mdc-typography-headline6-text-transform, inherit);
  /* @noflip */ /*rtl:ignore*/
  padding-left: 20px;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 0;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  z-index: 1;
}
[dir=rtl] .mdc-top-app-bar__title, .mdc-top-app-bar__title[dir=rtl] {
  /*rtl:begin:ignore*/
  /* @noflip */ /*rtl:ignore*/
  padding-left: 0;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 20px;
  /*rtl:end:ignore*/
}

.mdc-top-app-bar--short-collapsed {
  /* @noflip */ /*rtl:ignore*/
  border-top-left-radius: 0;
  /* @noflip */ /*rtl:ignore*/
  border-top-right-radius: 0;
  /* @noflip */ /*rtl:ignore*/
  border-bottom-right-radius: 24px;
  /* @noflip */ /*rtl:ignore*/
  border-bottom-left-radius: 0;
}
[dir=rtl] .mdc-top-app-bar--short-collapsed, .mdc-top-app-bar--short-collapsed[dir=rtl] {
  /*rtl:begin:ignore*/
  /* @noflip */ /*rtl:ignore*/
  border-top-left-radius: 0;
  /* @noflip */ /*rtl:ignore*/
  border-top-right-radius: 0;
  /* @noflip */ /*rtl:ignore*/
  border-bottom-right-radius: 0;
  /* @noflip */ /*rtl:ignore*/
  border-bottom-left-radius: 24px;
  /*rtl:end:ignore*/
}

.mdc-top-app-bar--short {
  top: 0;
  /* @noflip */ /*rtl:ignore*/
  right: auto;
  /* @noflip */ /*rtl:ignore*/
  left: 0;
  width: 100%;
  transition: width 250ms cubic-bezier(0.4, 0, 0.2, 1);
}
[dir=rtl] .mdc-top-app-bar--short, .mdc-top-app-bar--short[dir=rtl] {
  /*rtl:begin:ignore*/
  /* @noflip */ /*rtl:ignore*/
  right: 0;
  /* @noflip */ /*rtl:ignore*/
  left: auto;
  /*rtl:end:ignore*/
}

.mdc-top-app-bar--short .mdc-top-app-bar__row {
  height: 56px;
}
.mdc-top-app-bar--short .mdc-top-app-bar__section {
  padding: 4px;
}
.mdc-top-app-bar--short .mdc-top-app-bar__title {
  transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 1;
}

.mdc-top-app-bar--short-collapsed {
  /* @alternate */
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
  width: 56px;
  transition: width 300ms cubic-bezier(0.4, 0, 0.2, 1);
}
.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__title {
  display: none;
}
.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__action-item {
  transition: padding 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item {
  width: 112px;
}
.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end {
  /* @noflip */ /*rtl:ignore*/
  padding-left: 0;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 12px;
}
[dir=rtl] .mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end, .mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end[dir=rtl] {
  /*rtl:begin:ignore*/
  /* @noflip */ /*rtl:ignore*/
  padding-left: 12px;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 0;
  /*rtl:end:ignore*/
}

.mdc-top-app-bar--dense .mdc-top-app-bar__row {
  height: 48px;
}
.mdc-top-app-bar--dense .mdc-top-app-bar__section {
  padding: 0 4px;
}
.mdc-top-app-bar--dense .mdc-top-app-bar__title {
  /* @noflip */ /*rtl:ignore*/
  padding-left: 12px;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 0;
}
[dir=rtl] .mdc-top-app-bar--dense .mdc-top-app-bar__title, .mdc-top-app-bar--dense .mdc-top-app-bar__title[dir=rtl] {
  /*rtl:begin:ignore*/
  /* @noflip */ /*rtl:ignore*/
  padding-left: 0;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 12px;
  /*rtl:end:ignore*/
}

.mdc-top-app-bar--prominent .mdc-top-app-bar__row {
  height: 128px;
}
.mdc-top-app-bar--prominent .mdc-top-app-bar__title {
  align-self: flex-end;
  padding-bottom: 2px;
}
.mdc-top-app-bar--prominent .mdc-top-app-bar__action-item,
.mdc-top-app-bar--prominent .mdc-top-app-bar__navigation-icon {
  align-self: flex-start;
}

.mdc-top-app-bar--fixed {
  transition: box-shadow 200ms linear;
}

.mdc-top-app-bar--fixed-scrolled {
  /* @alternate */
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 200ms linear;
}

.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__row {
  height: 96px;
}
.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__section {
  padding: 0 12px;
}
.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title {
  /* @noflip */ /*rtl:ignore*/
  padding-left: 20px;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 0;
  padding-bottom: 9px;
}
[dir=rtl] .mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title, .mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title[dir=rtl] {
  /*rtl:begin:ignore*/
  /* @noflip */ /*rtl:ignore*/
  padding-left: 0;
  /* @noflip */ /*rtl:ignore*/
  padding-right: 20px;
  /*rtl:end:ignore*/
}

.mdc-top-app-bar--fixed-adjust {
  padding-top: 64px;
}

.mdc-top-app-bar--dense-fixed-adjust {
  padding-top: 48px;
}

.mdc-top-app-bar--short-fixed-adjust {
  padding-top: 56px;
}

.mdc-top-app-bar--prominent-fixed-adjust {
  padding-top: 128px;
}

.mdc-top-app-bar--dense-prominent-fixed-adjust {
  padding-top: 96px;
}

@media (max-width: 599px) {
  .mdc-top-app-bar__row {
    height: 56px;
  }
  .mdc-top-app-bar__section {
    padding: 4px;
  }
  .mdc-top-app-bar--short {
    transition: width 200ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  .mdc-top-app-bar--short-collapsed {
    transition: width 250ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  .mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end {
    /* @noflip */ /*rtl:ignore*/
    padding-left: 0;
    /* @noflip */ /*rtl:ignore*/
    padding-right: 12px;
  }
  [dir=rtl] .mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end, .mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end[dir=rtl] {
    /*rtl:begin:ignore*/
    /* @noflip */ /*rtl:ignore*/
    padding-left: 12px;
    /* @noflip */ /*rtl:ignore*/
    padding-right: 0;
    /*rtl:end:ignore*/
  }
  .mdc-top-app-bar--prominent .mdc-top-app-bar__title {
    padding-bottom: 6px;
  }
  .mdc-top-app-bar--fixed-adjust {
    padding-top: 56px;
  }
}
.mdc-icon-button {
  font-size: 24px;
  width: 48px;
  height: 48px;
  padding: 12px;
}

.mdc-icon-button .mdc-icon-button__focus-ring {
  display: none;
}

.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring, .mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring {
  display: block;
  max-height: 48px;
  max-width: 48px;
}

@media screen and (forced-colors: active) {
  .mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring, .mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring {
    pointer-events: none;
    border: 2px solid transparent;
    border-radius: 6px;
    box-sizing: content-box;
    position: absolute;
    top: 50%;
    /* @noflip */ /*rtl:ignore*/
    left: 50%;
    /* @noflip */ /*rtl:ignore*/
    transform: translate(-50%, -50%);
    height: 100%;
    width: 100%;
  }
}
@media screen and (forced-colors: active) and (forced-colors: active) {
  .mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring, .mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring {
    border-color: CanvasText;
  }
}
@media screen and (forced-colors: active) {
  .mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring::after, .mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring::after {
    content: "";
    border: 2px solid transparent;
    border-radius: 8px;
    display: block;
    position: absolute;
    top: 50%;
    /* @noflip */ /*rtl:ignore*/
    left: 50%;
    /* @noflip */ /*rtl:ignore*/
    transform: translate(-50%, -50%);
    height: calc(100% + 4px);
    width: calc(100% + 4px);
  }
}
@media screen and (forced-colors: active) and (forced-colors: active) {
  .mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring::after, .mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring::after {
    border-color: CanvasText;
  }
}
.mdc-icon-button.mdc-icon-button--reduced-size .mdc-icon-button__ripple {
  width: 40px;
  height: 40px;
  margin-top: 4px;
  margin-bottom: 4px;
  margin-right: 4px;
  margin-left: 4px;
}

.mdc-icon-button.mdc-icon-button--reduced-size.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring, .mdc-icon-button.mdc-icon-button--reduced-size:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring {
  max-height: 40px;
  max-width: 40px;
}

.mdc-icon-button .mdc-icon-button__touch {
  position: absolute;
  top: 50%;
  height: 48px;
  /* @noflip */ /*rtl:ignore*/
  left: 50%;
  width: 48px;
  transform: translate(-50%, -50%);
}

.mdc-icon-button:disabled {
  color: rgba(0, 0, 0, 0.38);
  /* @alternate */
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
}

.mdc-icon-button svg,
.mdc-icon-button img {
  width: 24px;
  height: 24px;
}

.mdc-icon-button {
  display: inline-block;
  position: relative;
  box-sizing: border-box;
  border: none;
  outline: none;
  background-color: transparent;
  fill: currentColor;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  z-index: 0;
  overflow: visible;
}

.mdc-icon-button .mdc-icon-button__touch {
  position: absolute;
  top: 50%;
  height: 48px;
  /* @noflip */ /*rtl:ignore*/
  left: 50%;
  width: 48px;
  transform: translate(-50%, -50%);
}

.mdc-icon-button:disabled {
  cursor: default;
  pointer-events: none;
}

.mdc-icon-button--display-flex {
  align-items: center;
  display: inline-flex;
  justify-content: center;
}

.mdc-icon-button__icon {
  display: inline-block;
}

.mdc-icon-button__icon.mdc-icon-button__icon--on {
  display: none;
}

.mdc-icon-button--on .mdc-icon-button__icon {
  display: none;
}

.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on {
  display: inline-block;
}

.mdc-icon-button__link {
  height: 100%;
  left: 0;
  outline: none;
  position: absolute;
  top: 0;
  width: 100%;
}

@keyframes mdc-ripple-fg-radius-in {
  from {
    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
  }
  to {
    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  }
}
@keyframes mdc-ripple-fg-opacity-in {
  from {
    animation-timing-function: linear;
    opacity: 0;
  }
  to {
    opacity: var(--mdc-ripple-fg-opacity, 0);
  }
}
@keyframes mdc-ripple-fg-opacity-out {
  from {
    animation-timing-function: linear;
    opacity: var(--mdc-ripple-fg-opacity, 0);
  }
  to {
    opacity: 0;
  }
}
.mdc-icon-button {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
}

.mdc-icon-button .mdc-icon-button__ripple::before,
.mdc-icon-button .mdc-icon-button__ripple::after {
  position: absolute;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
}

.mdc-icon-button .mdc-icon-button__ripple::before {
  transition: opacity 15ms linear, background-color 15ms linear;
  z-index: 1;
  /* @alternate */
  z-index: var(--mdc-ripple-z-index, 1);
}

.mdc-icon-button .mdc-icon-button__ripple::after {
  z-index: 0;
  /* @alternate */
  z-index: var(--mdc-ripple-z-index, 0);
}

.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::before {
  transform: scale(var(--mdc-ripple-fg-scale, 1));
}

.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::after {
  top: 0;
  /* @noflip */ /*rtl:ignore*/
  left: 0;
  transform: scale(0);
  transform-origin: center center;
}

.mdc-icon-button.mdc-ripple-upgraded--unbounded .mdc-icon-button__ripple::after {
  top: var(--mdc-ripple-top, 0);
  /* @noflip */ /*rtl:ignore*/
  left: var(--mdc-ripple-left, 0);
}

.mdc-icon-button.mdc-ripple-upgraded--foreground-activation .mdc-icon-button__ripple::after {
  animation: mdc-ripple-fg-radius-in 225ms forwards, mdc-ripple-fg-opacity-in 75ms forwards;
}

.mdc-icon-button.mdc-ripple-upgraded--foreground-deactivation .mdc-icon-button__ripple::after {
  animation: mdc-ripple-fg-opacity-out 150ms;
  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
}

.mdc-icon-button .mdc-icon-button__ripple::before,
.mdc-icon-button .mdc-icon-button__ripple::after {
  top: calc(50% - 50%);
  /* @noflip */ /*rtl:ignore*/
  left: calc(50% - 50%);
  width: 100%;
  height: 100%;
}

.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::before,
.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::after {
  top: var(--mdc-ripple-top, calc(50% - 50%));
  /* @noflip */ /*rtl:ignore*/
  left: var(--mdc-ripple-left, calc(50% - 50%));
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}

.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::after {
  width: var(--mdc-ripple-fg-size, 100%);
  height: var(--mdc-ripple-fg-size, 100%);
}

.mdc-icon-button .mdc-icon-button__ripple::before, .mdc-icon-button .mdc-icon-button__ripple::after {
  background-color: #000;
  /* @alternate */
  background-color: var(--mdc-ripple-color, #000);
}

.mdc-icon-button:hover .mdc-icon-button__ripple::before, .mdc-icon-button.mdc-ripple-surface--hover .mdc-icon-button__ripple::before {
  opacity: 0.04;
  /* @alternate */
  opacity: var(--mdc-ripple-hover-opacity, 0.04);
}

.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__ripple::before, .mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__ripple::before {
  transition-duration: 75ms;
  opacity: 0.12;
  /* @alternate */
  opacity: var(--mdc-ripple-focus-opacity, 0.12);
}

.mdc-icon-button:not(.mdc-ripple-upgraded) .mdc-icon-button__ripple::after {
  transition: opacity 150ms linear;
}

.mdc-icon-button:not(.mdc-ripple-upgraded):active .mdc-icon-button__ripple::after {
  transition-duration: 75ms;
  opacity: 0.12;
  /* @alternate */
  opacity: var(--mdc-ripple-press-opacity, 0.12);
}

.mdc-icon-button.mdc-ripple-upgraded {
  --mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12);
}

.mdc-icon-button .mdc-icon-button__ripple {
  height: 100%;
  left: 0px;
  pointer-events: none;
  position: absolute;
  top: 0px;
  width: 100%;
  z-index: -1;
}

body {
  background-color: #f2f2f2;
}

body {
  display: grid;
  grid-template: 1fr 1fr 200px/2fr 2fr;
  gap: 2rem;
  justify-items: center;
  margin: 0;
}

header {
  grid-column: 1/-1;
}

orange-container,
pink-container {
  width: 500px;
  height: 500px;
  border-radius: 4px;
  margin-top: calc(64px + 2rem);
}

mwc-button {
  grid-column: 1/-1;
  margin: 0 auto;
}
/*# sourceURL=webpack://./node_modules/@material/typography/_typography.scss */
/*# sourceURL=webpack://./node_modules/@material/theme/_css.scss */
/*# sourceURL=webpack://./node_modules/@material/theme/_gss.scss */
/*# sourceURL=webpack://./src/color/color.scss */
/*# sourceURL=webpack://./node_modules/@material/elevation/_elevation.scss */
/*# sourceURL=webpack://./node_modules/@material/elevation/_elevation-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/top-app-bar/mdc-top-app-bar.scss */
/*# sourceURL=webpack://./node_modules/@material/top-app-bar/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/ripple/_ripple-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/top-app-bar/_variables.scss */
/*# sourceURL=webpack://./node_modules/@material/rtl/_rtl.scss */
/*# sourceURL=webpack://./node_modules/@material/icon-button/_icon-button.scss */
/*# sourceURL=webpack://./node_modules/@material/icon-button/_icon-button-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/dom/_dom.scss */
/*# sourceURL=webpack://./node_modules/@material/focus-ring/_focus-ring.scss */
/*# sourceURL=webpack://./node_modules/@material/touch-target/_touch-target.scss */
/*# sourceURL=webpack://./node_modules/@material/ripple/_ripple.scss */
/*# sourceURL=webpack://./node_modules/@material/animation/_animation.scss */
/*# sourceURL=webpack://./src/common.scss */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdHlwb2dyYXBoeS9fdHlwb2dyYXBoeS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90aGVtZS9fY3NzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RoZW1lL19nc3Muc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy9jb2xvci9jb2xvci5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9lbGV2YXRpb24vX2VsZXZhdGlvbi5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9lbGV2YXRpb24vX2VsZXZhdGlvbi10aGVtZS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90b3AtYXBwLWJhci9tZGMtdG9wLWFwcC1iYXIuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdG9wLWFwcC1iYXIvX21peGlucy5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvX3JpcHBsZS10aGVtZS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90b3AtYXBwLWJhci9fdmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3J0bC9fcnRsLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2ljb24tYnV0dG9uL19pY29uLWJ1dHRvbi5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9pY29uLWJ1dHRvbi9faWNvbi1idXR0b24tdGhlbWUuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZG9tL19kb20uc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZm9jdXMtcmluZy9fZm9jdXMtcmluZy5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90b3VjaC10YXJnZXQvX3RvdWNoLXRhcmdldC5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvX3JpcHBsZS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9hbmltYXRpb24vX2FuaW1hdGlvbi5zY3NzIiwid2VicGFjazovLy4vc3JjL2NvbW1vbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdRRTtFQWdFRSxrQ0FBQTtFQUNBLG1DQUFBO0VDdlFFLCtCQUFBO0VDWkYsZUFBQTtFRHdCQSxrRUFBQTtBRXhFSjs7QUh1UUk7RUEyREEsa0NBQUE7RUFDQSxtQ0FBQTtFQ3ZRRSwrQkFBQTtFQ1pGLGVBQUE7RUR3QkEsK0dBQUE7RUFaRSxlQUFBO0VDWkYsZUFBQTtFRHdCQSwwREFBQTtFQVpFLGlCQUFBO0VDWkYsZUFBQTtFRHdCQSw4REFBQTtFQVpFLGdCQUFBO0VDWkYsZUFBQTtFRHdCQSw2REFBQTtFQVpFLDJCQUFBO0VDWkYsZUFBQTtFRHdCQSwyRUFBQTtFQVpFLHdCQUFBO0VDWkYsZUFBQTtFRHdCQSxpRkFBQTtVQUFBLHlFQUFBO0VBWkUsdUJBQUE7RUNaRixlQUFBO0VEd0JBLHVFQUFBO0FFOUNKOztBSDZPSTtFQTJEQSxrQ0FBQTtFQUNBLG1DQUFBO0VDdlFFLCtCQUFBO0VDWkYsZUFBQTtFRHdCQSwrR0FBQTtFQVpFLGtCQUFBO0VDWkYsZUFBQTtFRHdCQSw2REFBQTtFQVpFLG9CQUFBO0VDWkYsZUFBQTtFRHdCQSxpRUFBQTtFQVpFLGdCQUFBO0VDWkYsZUFBQTtFRHdCQSw2REFBQTtFQVpFLCtCQUFBO0VDWkYsZUFBQTtFRHdCQSwrRUFBQTtFQVpFLHdCQUFBO0VDWkYsZUFBQTtFRHdCQSxpRkFBQTtVQUFBLHlFQUFBO0VBWkUsdUJBQUE7RUNaRixlQUFBO0VEd0JBLHVFQUFBO0FFcEJKOztB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RSxhRzNIbUI7QU51cEJ2QjtBR3poQkU7RUFDRSxvQkFBQTtFQUNBLG1CRy9INkI7QU4wcEJqQztBR3hoQkU7O0VBRUUsc0JBQUE7QUgwaEJKOztBR3RoQkE7RUFDRSxtQ0FBQTtBSHloQkY7O0FHdGhCQTtFRGtITSxlQUFBO0VBQ0EsMEhBcUdTO0VDck5iLG1DQUFBO0FIeWhCRjs7QUdwaEJFO0VBQ0UsWUFBQTtBSHVoQko7QUdwaEJFO0VBQ0UsZUFBQTtBSHNoQko7QUduaEJFO0VKMUlFLFlBQUEsRUFBQSxhQUFBO0VEbUJBLGtCQUFBO0VDbkJBLFlBQUEsRUFBQSxhQUFBO0VEbUJBLGdCQUFBO0VLMEhBLG1CR3BKbUM7QU4ycUJ2QztBTy9vQk07RUFDRSxtQkFBQTtFUnRCSixZQUFBLEVBQUEsYUFBQTtFRG1CQSxlQUFBO0VDbkJBLFlBQUEsRUFBQSxhQUFBO0VEbUJBLG1CQUFBO0VTS0ksaUJBQUE7QVBvcEJSOztBRzNoQkE7RUFDRSxpQkd0TFc7QU5vdEJiOztBRzNoQkE7RUFDRSxpQkdsS2lCO0FOZ3NCbkI7O0FHM2hCQTtFQUNFLGlCR3RMa0I7QU5vdEJwQjs7QUczaEJBO0VBQ0Usa0JHakxxQjtBTitzQnZCOztBRzNoQkE7RUFDRSxpQkFBQTtBSDhoQkY7O0FJbnFCRTtFQUNFO0lBQ0UsWUUzRGM7RU5pdUJsQjtFSW5xQkU7SUFDRSxZRTlEbUI7RU5tdUJ2QjtFSWxxQkU7SUFDRSxvREFBQTtFSm9xQko7RUlocUJFO0lBQ0Usb0RBQUE7RUprcUJKO0VJL3BCSTtJTC9DRixZQUFBLEVBQUEsYUFBQTtJRG1CQSxlQUFBO0lDbkJBLFlBQUEsRUFBQSxhQUFBO0lEbUJBLG1CQUFBO0VFaXNCRjtFTy9yQkk7SUFDRSxtQkFBQTtJUnRCSixZQUFBLEVBQUEsYUFBQTtJRG1CQSxrQkFBQTtJQ25CQSxZQUFBLEVBQUEsYUFBQTtJRG1CQSxnQkFBQTtJU0tJLGlCQUFBO0VQb3NCTjtFSW5xQkk7SUFDRSxtQkV6RWdDO0VOOHVCdEM7RUlqcUJFO0lBQ0UsaUJFM0ZjO0VOOHZCbEI7QUFDRjtBUXBxQkU7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OztBZTdrQ0E7RUFDSSx5QkFBQTtBZmdsQ0o7O0FBdGxDQTtFQUNJLGFBQUE7RUFDQSxvQ0FBQTtFQUNBLFNBQUE7RUFDQSxxQkFBQTtFQUNBLFNBQUE7QUF5bENKOztBQXRsQ0E7RUFDSSxpQkFBQTtBQXlsQ0o7O0FBdGxDQTs7RUFFSSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGtCQUFBO0VBQ0EsNkJBQUE7QUF5bENKOztBQXRsQ0E7RUFDSSxpQkFBQTtFQUNBLGNBQUE7QUF5bENKIiwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnc2FzczpsaXN0JztcbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6c3RyaW5nJztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL2tleXMnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcblxuLy8vIEBkZXByZWNhdGVkIEF2b2lkIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBkaXJlY3RseS4gSW5zdGVhZCwgY29uZmlndXJlIHRoZVxuLy8vIGAkc3R5bGVzLTxzdHlsZT5gIHZhcmlhYmxlIE1hcHMuXG5AZnVuY3Rpb24gc2V0LXN0eWxlc18oJGJhc2Utc3R5bGVzLCAkc2NhbGUtc3R5bGVzLCAkb3ZlcnJpZGUtc3R5bGVzKSB7XG4gICRvcHRpb25zOiAoXG4gICAgY3VzdG9tLXByb3BlcnR5LXByZWZpeDogdHlwb2dyYXBoeSxcbiAgKTtcblxuICAkYmFzZS1zdHlsZXM6IGtleXMuc2V0LXZhbHVlcygkYmFzZS1zdHlsZXMsICRvcHRpb25zOiAkb3B0aW9ucyk7XG5cbiAgQGVhY2ggJHN0eWxlLCAkc3R5bGUtcHJvcHMgaW4gJHNjYWxlLXN0eWxlcyB7XG4gICAgQGVhY2ggJGJhc2Uta2V5IGluIG1hcC5rZXlzKCRiYXNlLXN0eWxlcykge1xuICAgICAgLy8gSWdub3JlIHRoZSByZXR1cm4gcmVzdWx0LCBpdCdzIG5vdCBuZWVkZWRcbiAgICAgICR1bnVzZWQ6IGtleXMuYWRkLWxpbmsoa2V5cy5jb21iaW5lKCRzdHlsZSwgJGJhc2Uta2V5KSwgJGJhc2Uta2V5KTtcbiAgICB9XG5cbiAgICAvLyBNZXJnZSBiYXNlIHByb3BlcnRpZXMgZm9yIGFsbCBzdHlsZXMuXG4gICAgJHN0eWxlLXByb3BzOiBtYXAubWVyZ2UoJGJhc2Utc3R5bGVzLCAkc3R5bGUtcHJvcHMpO1xuXG4gICAgLy8gTWVyZ2Ugb3ZlcnJpZGVzIG9udG8gZWFjaCBzdHlsZS5cbiAgICAkc3R5bGUtcHJvcHM6IG1hcC5tZXJnZSgkc3R5bGUtcHJvcHMsIG1hcC5nZXQoJG92ZXJyaWRlLXN0eWxlcywgJHN0eWxlKSk7XG5cbiAgICAvLyBSZWdpc3RlciBrZXlzIGZvciB0aGlzIHN0eWxlXG4gICAgQGVhY2ggJHByb3BlcnR5LCAkdmFsdWUgaW4gJHN0eWxlLXByb3BzIHtcbiAgICAgICR1bnVzZWQ6IGtleXMuc2V0LXZhbHVlKFxuICAgICAgICBrZXlzLmNvbWJpbmUoJHN0eWxlLCAkcHJvcGVydHkpLFxuICAgICAgICAkdmFsdWUsXG4gICAgICAgICRvcHRpb25zOiAkb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBvcmlnaW5hbCBzdHlsZXMgd2l0aCBuZXcgc3R5bGVzLlxuICAgICRzY2FsZS1zdHlsZXM6IG1hcC5tZXJnZSgkc2NhbGUtc3R5bGVzLCAoI3skc3R5bGV9OiAkc3R5bGUtcHJvcHMpKTtcbiAgfVxuXG4gIEByZXR1cm4gJHNjYWxlLXN0eWxlcztcbn1cblxuQGZ1bmN0aW9uIGdldC1sZXR0ZXItc3BhY2luZ18oJHRyYWNraW5nLCAkZm9udC1zaXplKSB7XG4gIEByZXR1cm4gbWF0aC5kaXYoJHRyYWNraW5nLCAkZm9udC1zaXplICogMTYpICogMWVtO1xufVxuXG5AZnVuY3Rpb24gcHgtdG8tcmVtKCRweCkge1xuICBAaWYgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJHB4KSB7XG4gICAgQHJldHVybiBjdXN0b20tcHJvcGVydGllcy5zZXQtZmFsbGJhY2soXG4gICAgICAkcHgsXG4gICAgICBfcHgtdG8tcmVtKGN1c3RvbS1wcm9wZXJ0aWVzLmdldC1mYWxsYmFjaygkcHgpKVxuICAgICk7XG4gIH1cbiAgQHJldHVybiBfcHgtdG8tcmVtKCRweCk7XG59XG5cbkBmdW5jdGlvbiBfcHgtdG8tcmVtKCRweCkge1xuICBAaWYgJHB4ID09IG51bGwge1xuICAgIEByZXR1cm4gbnVsbDtcbiAgfVxuICBAcmV0dXJuIG1hdGguZGl2KCRweCwgMTZweCkgKiAxcmVtO1xufVxuXG4kZm9udC1mYW1pbHk6IHN0cmluZy51bnF1b3RlKCdSb2JvdG8sIHNhbnMtc2VyaWYnKSAhZGVmYXVsdDtcblxuLy8gT3ZlcnJpZGUgc3R5bGVzXG4kc3R5bGVzLWhlYWRsaW5lMTogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWhlYWRsaW5lMjogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWhlYWRsaW5lMzogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWhlYWRsaW5lNDogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWhlYWRsaW5lNTogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWhlYWRsaW5lNjogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLXN1YnRpdGxlMTogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLXN1YnRpdGxlMjogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWJvZHkxOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtYm9keTI6ICgpICFkZWZhdWx0O1xuJHN0eWxlcy1jYXB0aW9uOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtYnV0dG9uOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtb3ZlcmxpbmU6ICgpICFkZWZhdWx0O1xuXG4vLy8gQGRlcHJlY2F0ZWQgRG8gbm90IG92ZXJyaWRlIHRoaXMgdmFyaWFibGUuIFVzZSB0aGUgJHN0eWxlcy08c3R5bGU+IG92ZXJyaWRlXG4vLy8gTWFwIHZhcmlhYmxlcyBpbnN0ZWFkLCBvciAkZm9udC1mYW1pbHkgdG8gc2V0IHRoZSBiYXNlIGZvbnQgZmFtaWx5LlxuJGJhc2U6IChcbiAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseSxcbikgIWRlZmF1bHQ7XG5cbiRmb250LXdlaWdodC12YWx1ZXM6IChcbiAgdGhpbjogMTAwLFxuICBsaWdodDogMzAwLFxuICByZWd1bGFyOiA0MDAsXG4gIG1lZGl1bTogNTAwLFxuICBib2xkOiA3MDAsXG4gIGJsYWNrOiA5MDAsXG4pICFkZWZhdWx0O1xuXG4vLy8gQGRlcHJlY2F0ZWQgRG8gbm90IG92ZXJyaWRlIHRoaXMgdmFyaWFibGUuIFVzZSB0aGUgJHN0eWxlcy08c3R5bGU+IG92ZXJyaWRlXG4vLy8gTWFwIHZhcmlhYmxlcyBpbnN0ZWFkLlxuJHN0eWxlczogc2V0LXN0eWxlc18oXG4gICRiYXNlLFxuICAoXG4gICAgaGVhZGxpbmUxOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSg5NnB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oOTZweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCBsaWdodCksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygtMS41LCA2KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgaGVhZGxpbmUyOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSg2MHB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oNjBweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCBsaWdodCksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygtMC41LCAzLjc1KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgaGVhZGxpbmUzOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSg0OHB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oNTBweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWwsXG4gICAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdCxcbiAgICApLFxuICAgIGhlYWRsaW5lNDogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMzRweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDQwcHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygwLjI1LCAyLjEyNSksXG4gICAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdCxcbiAgICApLFxuICAgIGhlYWRsaW5lNTogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMjRweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDMycHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgICBsZXR0ZXItc3BhY2luZzogbm9ybWFsLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBoZWFkbGluZTY6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDIwcHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSgzMnB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIG1lZGl1bSksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygwLjI1LCAxLjI1KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgc3VidGl0bGUxOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSgxNnB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oMjhweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDAuMTUsIDEpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBzdWJ0aXRsZTI6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDE0cHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSgyMnB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIG1lZGl1bSksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygwLjEsIDAuODc1KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgYm9keTE6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDE2cHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSgyNHB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IGdldC1sZXR0ZXItc3BhY2luZ18oMC41LCAxKSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgYm9keTI6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDE0cHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSgyMHB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IGdldC1sZXR0ZXItc3BhY2luZ18oMC4yNSwgMC44NzUpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBjYXB0aW9uOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSgxMnB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oMjBweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDAuNCwgMC43NSksXG4gICAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdCxcbiAgICApLFxuICAgIGJ1dHRvbjogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMTRweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDM2cHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDEuMjUsIDAuODc1KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZSxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2UsXG4gICAgKSxcbiAgICBvdmVybGluZTogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMTJweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDMycHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDIsIDAuNzUpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lLFxuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSxcbiAgICApLFxuICApLFxuICAoXG4gICAgaGVhZGxpbmUxOiAkc3R5bGVzLWhlYWRsaW5lMSxcbiAgICBoZWFkbGluZTI6ICRzdHlsZXMtaGVhZGxpbmUyLFxuICAgIGhlYWRsaW5lMzogJHN0eWxlcy1oZWFkbGluZTMsXG4gICAgaGVhZGxpbmU0OiAkc3R5bGVzLWhlYWRsaW5lNCxcbiAgICBoZWFkbGluZTU6ICRzdHlsZXMtaGVhZGxpbmU1LFxuICAgIGhlYWRsaW5lNjogJHN0eWxlcy1oZWFkbGluZTYsXG4gICAgc3VidGl0bGUxOiAkc3R5bGVzLXN1YnRpdGxlMSxcbiAgICBzdWJ0aXRsZTI6ICRzdHlsZXMtc3VidGl0bGUyLFxuICAgIGJvZHkxOiAkc3R5bGVzLWJvZHkxLFxuICAgIGJvZHkyOiAkc3R5bGVzLWJvZHkyLFxuICAgIGNhcHRpb246ICRzdHlsZXMtY2FwdGlvbixcbiAgICBidXR0b246ICRzdHlsZXMtYnV0dG9uLFxuICAgIG92ZXJsaW5lOiAkc3R5bGVzLW92ZXJsaW5lLFxuICApXG4pICFkZWZhdWx0O1xuXG4vLyBBIGNvcHkgb2YgdGhlIHN0eWxlcyBNYXAgdGhhdCBpcyB1c2VkIHRvIGRldGVjdCBjb21waWxlLXRpbWUgY2hhbmdlcyBmb3Jcbi8vIEFuZ3VsYXIgc3VwcG9ydC5cbiRfc3R5bGVzLWNvcHk6ICRzdHlsZXM7XG5cbkBmdW5jdGlvbiBpcy10eXBvZ3JhcGh5LXN0eWxlKCRzdHlsZSkge1xuICBAcmV0dXJuIG1hcC5oYXMta2V5KCRzdHlsZXMsICRzdHlsZSk7XG59XG5cbkBmdW5jdGlvbiBnZXQtdHlwb2dyYXBoeS1zdHlsZXMoKSB7XG4gIEByZXR1cm4gbWFwLmtleXMoJHN0eWxlcyk7XG59XG5cbkBtaXhpbiBjb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC5tZGMtdHlwb2dyYXBoeSB7XG4gICAgQGluY2x1ZGUgYmFzZSgkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICBAZWFjaCAkc3R5bGUgaW4gZ2V0LXR5cG9ncmFwaHktc3R5bGVzKCkge1xuICAgIC5tZGMtdHlwb2dyYXBoeS0tI3skc3R5bGV9IHtcbiAgICAgIEBpbmNsdWRlIHR5cG9ncmFwaHkoJHN0eWxlLCAkcXVlcnk6ICRxdWVyeSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBiYXNlKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtdHlwb2dyYXBoeTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHR5cG9ncmFwaHkpO1xuXG4gIEBpbmNsdWRlIHNtb290aC1mb250KCRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC10eXBvZ3JhcGh5KSB7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoZm9udC1mYW1pbHksIGZvbnQtZmFtaWx5KTtcbiAgfVxufVxuXG5AbWl4aW4gdHlwb2dyYXBoeSgkc3R5bGUsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksICRleGNsdWRlLXByb3BzOiAoKSkge1xuICAkZmVhdC10eXBvZ3JhcGh5OiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgdHlwb2dyYXBoeSk7XG5cbiAgQGlmIG5vdCBpcy10eXBvZ3JhcGh5LXN0eWxlKCRzdHlsZSkge1xuICAgIEBlcnJvciBcIkludmFsaWQgc3R5bGUgc3BlY2lmaWVkISAjeyRzdHlsZX0gZG9lc24ndCBleGlzdC4gQ2hvb3NlIG9uZSBvZiAje2dldC10eXBvZ3JhcGh5LXN0eWxlcygpfVwiO1xuICB9XG5cbiAgQGluY2x1ZGUgc21vb3RoLWZvbnQoJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXR5cG9ncmFwaHkpIHtcbiAgICBAZWFjaCAka2V5IGluIGtleXMuZ2V0LWtleXMoJHN0eWxlKSB7XG4gICAgICAvLyA8c3R5bGU+LTxwcm9wZXJ0eT46IGhlYWRsaW5lMS1mb250LXNpemVcbiAgICAgIC8vIFNsaWNlIHRoZSBzdHJpbmcgcGFzdCB0aGUgZmlyc3Qga2V5IHNlcGFyYXRvciB0byByZXRyaWV2ZSB0aGVcbiAgICAgIC8vIHByb3BlcnR5IG5hbWVcbiAgICAgICRwcm9wZXJ0eTogc3RyaW5nLnNsaWNlKCRrZXksIHN0cmluZy5pbmRleCgka2V5LCAnLScpICsgMSk7XG4gICAgICBAaWYgbGlzdC5pbmRleCgkZXhjbHVkZS1wcm9wcywgJHByb3BlcnR5KSA9PSBudWxsIHtcbiAgICAgICAgJGN1cnJlbnQtZ2xvYmFsLXZhbHVlOiBtYXAuZ2V0KCRzdHlsZXMsICRzdHlsZSwgJHByb3BlcnR5KTtcbiAgICAgICAgJGNvbmZpZ3VyZWQtZ2xvYmFsLXZhbHVlOiBtYXAuZ2V0KCRfc3R5bGVzLWNvcHksICRzdHlsZSwgJHByb3BlcnR5KTtcbiAgICAgICAgQGlmICRjdXJyZW50LWdsb2JhbC12YWx1ZSAhPSAkY29uZmlndXJlZC1nbG9iYWwtdmFsdWUge1xuICAgICAgICAgIC8vIEEgY29tcGlsZSB0aW1lIGNoYW5nZSB3YXMgbWFkZSB0byAkbWRjLXR5cG9ncmFwaHktc3R5bGVzLiBUb1xuICAgICAgICAgIC8vIHN1cHBvcnQgQW5ndWxhciwgdXNlIHRoaXMgdmFsdWUgaW5zdGVhZCBvZiB0aGUga2V5J3MgdmFsdWUuXG4gICAgICAgICAgQGlmICRjdXJyZW50LWdsb2JhbC12YWx1ZSB7XG4gICAgICAgICAgICAvLyBPbmx5IGVtaXQgaWYgdGhlIG92ZXJyaWRkZW4gdmFsdWUgZXhpc3RzXG4gICAgICAgICAgICAkY3VzdG9tLXByb3A6IGtleXMuY3JlYXRlLWN1c3RvbS1wcm9wZXJ0eSgka2V5KTtcbiAgICAgICAgICAgICRjdXN0b20tcHJvcDogY3VzdG9tLXByb3BlcnRpZXMuc2V0LWZhbGxiYWNrKFxuICAgICAgICAgICAgICAkY3VzdG9tLXByb3AsXG4gICAgICAgICAgICAgICRjdXJyZW50LWdsb2JhbC12YWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KCRwcm9wZXJ0eSwgJGN1c3RvbS1wcm9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSwgdXNlIHRoZSBrZXksIHdoaWNoIG1heSBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAvLyBjb25maWd1cmVkIGdsb2JhbCB2YWx1ZS5cbiAgICAgICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eSgkcHJvcGVydHksICRrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vLyBBcHBsaWVzIGFudGlhbGlhc2luZyB2aWEgZm9udC1zbW9vdGhpbmcgdG8gdGV4dC5cbkBtaXhpbiBzbW9vdGgtZm9udCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXR5cG9ncmFwaHk6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCB0eXBvZ3JhcGh5KTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXR5cG9ncmFwaHkpIHtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG59XG5cbi8vIEVsZW1lbnQgbXVzdCBiZSBgZGlzcGxheTogYmxvY2tgIG9yIGBkaXNwbGF5OiBpbmxpbmUtYmxvY2tgIGZvciB0aGlzIHRvIHdvcmsuXG5AbWl4aW4gb3ZlcmZsb3ctZWxsaXBzaXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG59XG5cbi8vLyBTZXRzIGEgY29udGFpbmVyJ3MgYmFzZWxpbmUgdGhhdCB0ZXh0IGNvbnRlbnQgd2lsbCBhbGlnbiB0by5cbi8vL1xuLy8vIElmIHRoZSBgJGRpc3BsYXlgIGlzIHNldCB0byBhIGZsZXhib3ggZGlzcGxheSwgb25seSBgJHRvcGAgYmFzZWxpbmUgbWF5IGJlXG4vLy8gc2V0LiBBIHNlcGFyYXRlIGVsZW1lbnQgbXVzdCBiZSBhZGRlZCBhcyBhIGNoaWxkIG9mIHRoZSBjb250YWluZXIgd2l0aCBhXG4vLy8gYCRib3R0b21gIGJhc2VsaW5lLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR0b3AgLSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIG9mIHRoZSBjb250YWluZXIgdG8gdGhlXG4vLy8gICAgIHRleHQncyBiYXNlbGluZS5cbi8vLyBAcGFyYW0ge051bWJlcn0gJGJvdHRvbSAtIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0ZXh0J3MgYmFzZWxpbmUgdG8gdGhlXG4vLy8gICAgIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLlxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZGlzcGxheSAtIHRoZSBkaXNwbGF5IHR5cGUgb2YgdGhlIGNvbnRhaW5lci4gTWF5IGJlIGBmbGV4YCxcbi8vLyAgICAgYGlubGluZS1mbGV4YCwgYGJsb2NrYCwgb3IgYGlubGluZS1ibG9ja2AuXG5AbWl4aW4gYmFzZWxpbmUoXG4gICR0b3A6IDAsXG4gICRib3R0b206IDAsXG4gICRkaXNwbGF5OiBibG9jayxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICR2YWxpZERpc3BsYXlUeXBlczogKGZsZXgsIGlubGluZS1mbGV4LCBibG9jaywgaW5saW5lLWJsb2NrKTtcblxuICBAaWYgbGlzdC5pbmRleCgkdmFsaWREaXNwbGF5VHlwZXMsICRkaXNwbGF5KSA9PSBudWxsIHtcbiAgICBAZXJyb3IgXCJtZGMtdHlwb2dyYXBoeTogaW52YWxpZCBkaXNwbGF5IHNwZWNpZmllZCEgI3skZGlzcGxheX0gbXVzdCBiZSBvbmUgb2YgI3skdmFsaWREaXNwbGF5VHlwZXN9XCI7XG4gIH1cblxuICAkaXNGbGV4Ym94OiAkZGlzcGxheSA9PSAnZmxleCcgb3IgJGRpc3BsYXkgPT0gJ2lubGluZS1mbGV4JztcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGRpc3BsYXk6ICRkaXNwbGF5O1xuXG4gICAgQGlmICRpc0ZsZXhib3gge1xuICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgIH1cbiAgfVxuXG4gIEBpZiAkdG9wID4gMCB7XG4gICAgQGluY2x1ZGUgYmFzZWxpbmUtdG9wKCR0b3AsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIEBpZiAkYm90dG9tID4gMCB7XG4gICAgQGlmICRpc0ZsZXhib3gge1xuICAgICAgQGVycm9yIFwibWRjLXR5cG9ncmFwaHk6IGludmFsaWQgYmFzZWxpbmUgd2l0aCBkaXNwbGF5IHR5cGUuICN7JGRpc3BsYXl9IGNhbm5vdCBzcGVjaWZpeSAkYm90dG9tLiBBZGQgYSBzZXBhcmF0ZSBjaGlsZCBlbGVtZW50IHdpdGggaXRzIG93biAkYm90dG9tLlwiO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGJhc2VsaW5lLWJvdHRvbSgkYm90dG9tLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vIFNldHMgdGhlIGJhc2VsaW5lIG9mIGZsb3cgdGV4dCBjb250ZW50LlxuLy8vXG4vLy8gU2VwYXJhdGUgYCR0b3BgIGFuZCBgJGJvdHRvbWAgYmFzZWxpbmVzIG1heSBiZSBzcGVjaWZpZWQuIFlvdSBzaG91bGQgZW5zdXJlXG4vLy8gdGhhdCB0aGUgYCR0b3BgIGJhc2VsaW5lIG1hdGNoZXMgdGhlIHByZXZpb3VzIHRleHQgY29udGVudCdzICRib3R0b21cbi8vLyBiYXNlbGluZSB0byBlbnN1cmUgdGV4dCBpcyBwb3NpdGlvbmVkIGFwcHJvcHJpYXRlbHkuXG4vLy9cbi8vLyBTZWUgZ28vY3NzLWJhc2VsaW5lIGZvciByZWZlcmVuY2Ugb24gaG93IHRoaXMgbWl4aW4gd29ya3MuXG4vLy9cbi8vLyBUaGlzIGlzIGludGVuZGVkIGZvciB0ZXh0IGZsb3cgY29udGVudCBvbmx5IChlLmcuIGA8aDE+YCwgYDxwPmAsIGA8c3Bhbj5gLFxuLy8vIG9yIGA8ZGl2PmAgd2l0aCBvbmx5IHRleHQgY29udGVudCkuIFVzZSBgYmFzZWxpbmUoKWAgdG8gc2V0IHRoZSBiYXNlbGluZSBvZlxuLy8vIGNvbnRhaW5lcnMgdGhhdCBhcmUgZmxleGJveCBvciBoYXZlIG5vbi1mbG93IGNvbnRlbnQgY2hpbGRyZW4uXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHRvcCAtIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lciB0byB0aGVcbi8vLyAgICAgdGV4dCdzIGJhc2VsaW5lLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYm90dG9tIC0gdGhlIGRpc3RhbmNlIGZyb20gdGhlIHRleHQncyBiYXNlbGluZSB0byB0aGVcbi8vLyAgICAgYm90dG9tIG9mIHRoZSBjb250YWluZXIuXG4vLy8gQHBhcmFtIHtCb29sZWFufSAkbGluZUhlaWdodCAtIHRoZSBsaW5lLWhlaWdodCB0byB1c2UgZm9yIHRoZSB0ZXh0LiBUaGlzXG4vLy8gICAgIGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIGJhc2VsaW5lcyBvZiBtdWx0aXBsZSBsaW5lcyBvZiB0ZXh0LlxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZGlzcGxheSAtIHRoZSBkaXNwbGF5IHR5cGUgb2YgdGhlIGNvbnRhaW5lci4gTWF5IGJlIGBibG9ja2Bcbi8vLyAgICAgb3IgYGlubGluZS1ibG9ja2AuXG5AbWl4aW4gdGV4dC1iYXNlbGluZShcbiAgJHRvcDogMCxcbiAgJGJvdHRvbTogMCxcbiAgJGRpc3BsYXk6IGJsb2NrLFxuICAkbGluZUhlaWdodDogbm9ybWFsLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJHZhbGlkRGlzcGxheVR5cGVzOiAoYmxvY2ssIGlubGluZS1ibG9jayk7XG5cbiAgQGlmIGxpc3QuaW5kZXgoJHZhbGlkRGlzcGxheVR5cGVzLCAkZGlzcGxheSkgPT0gbnVsbCB7XG4gICAgQGVycm9yIFwibWRjLXR5cG9ncmFwaHk6IGludmFsaWQgZGlzcGxheSBzcGVjaWZpZWQhICN7JGRpc3BsYXl9IG11c3QgYmUgb25lIG9mICN7JHZhbGlkRGlzcGxheVR5cGVzfVwiO1xuICB9XG5cbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBiYXNlbGluZShcbiAgICAkZGlzcGxheTogJGRpc3BsYXksXG4gICAgJHRvcDogJHRvcCxcbiAgICAkYm90dG9tOiAkYm90dG9tLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgQGlmICR0b3AgPiAwIHtcbiAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgICBsaW5lLWhlaWdodDogI3skbGluZUhlaWdodH07XG4gICAgfVxuXG4gICAgQGlmICRib3R0b20gPiAwIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IC0xICogJGJvdHRvbTtcbiAgICB9XG4gIH1cbn1cblxuLy8vIENyZWF0ZXMgYSBiYXNlbGluZSBzdHJ1dCBmcm9tIHRoZSB0b3Agb2YgYSBjb250YWluZXIuIFRoaXMgbWl4aW4gaXMgZm9yXG4vLy8gYWR2YW5jZWQgdXNlcnMsIHByZWZlciBgYmFzZWxpbmUoKWAuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJGRpc3RhbmNlIC0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIHRvcCBvZiB0aGUgY29udGFpbmVyIHRvXG4vLy8gICAgIHRoZSB0ZXh0J3MgYmFzZWxpbmUuXG5AbWl4aW4gYmFzZWxpbmUtdG9wKCRkaXN0YW5jZSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICY6OmJlZm9yZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIGJhc2VsaW5lLXN0cnV0XygkZGlzdGFuY2UpO1xuXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogMDtcbiAgICB9XG4gIH1cbn1cblxuLy8vIENyZWF0ZXMgYSBiYXNlbGluZSBzdHJ1dCBmcm9tIHRoZSBiYXNlbGluZSB0byB0aGUgYm90dG9tIG9mIGEgY29udGFpbmVyLlxuLy8vIFRoaXMgbWl4aW4gaXMgZm9yIGFkdmFuY2VkIHVzZXJzLCBwcmVmZXIgYGJhc2VsaW5lKClgLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0ZXh0J3MgYmFzZWxpbmUgdG8gdGhlXG4vLy8gICAgIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLlxuQG1peGluIGJhc2VsaW5lLWJvdHRvbSgkZGlzdGFuY2UsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAmOjphZnRlciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIGJhc2VsaW5lLXN0cnV0XygkZGlzdGFuY2UpO1xuXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogLTEgKiAkZGlzdGFuY2U7XG4gICAgfVxuICB9XG59XG5cbi8vLyBBZGRzIGFuIGludmlzaWJsZSwgemVyby13aWR0aCBwcmVmaXggdG8gYSBjb250YWluZXIncyB0ZXh0LlxuLy8vIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBiYXNlbGluZSBpcyBhbHdheXMgd2hlcmUgdGhlIHRleHQgd291bGQgYmUsIGluc3RlYWRcbi8vLyBvZiBkZWZhdWx0aW5nIHRvIHRoZSBjb250YWluZXIgYm90dG9tIHdoZW4gdGV4dCBpcyBlbXB0eS4gRG8gbm90IHVzZSB0aGlzXG4vLy8gbWl4aW4gaWYgdGhlIGBiYXNlbGluZWAgbWl4aW4gaXMgYWxyZWFkeSBhcHBsaWVkLlxuQG1peGluIHplcm8td2lkdGgtcHJlZml4KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAmOjpiZWZvcmUge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBjb250ZW50OiAnXFwyMDBiJztcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGJhc2VsaW5lLXN0cnV0XygkZGlzdGFuY2UpIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMDtcbiAgaGVpZ2h0OiAkZGlzdGFuY2U7XG4gIGNvbnRlbnQ6ICcnO1xufVxuXG5AZnVuY3Rpb24gZ2V0LWZvbnQoJHR5cG9ncmFwaHkpIHtcbiAgQHJldHVybiBtYXAuZ2V0KCRzdHlsZXMsICR0eXBvZ3JhcGh5LCBmb250LWZhbWlseSk7XG59XG5cbkBmdW5jdGlvbiBnZXQtbGluZS1oZWlnaHQoJHR5cG9ncmFwaHkpIHtcbiAgQHJldHVybiBtYXAuZ2V0KCRzdHlsZXMsICR0eXBvZ3JhcGh5LCBsaW5lLWhlaWdodCk7XG59XG5cbkBmdW5jdGlvbiBnZXQtc2l6ZSgkdHlwb2dyYXBoeSkge1xuICBAcmV0dXJuIG1hcC5nZXQoJHN0eWxlcywgJHR5cG9ncmFwaHksIGZvbnQtc2l6ZSk7XG59XG5cbkBmdW5jdGlvbiBnZXQtd2VpZ2h0KCR0eXBvZ3JhcGh5KSB7XG4gIEByZXR1cm4gbWFwLmdldCgkc3R5bGVzLCAkdHlwb2dyYXBoeSwgZm9udC13ZWlnaHQpO1xufVxuXG5AZnVuY3Rpb24gZ2V0LXRyYWNraW5nKCR0eXBvZ3JhcGh5KSB7XG4gIEByZXR1cm4gbWFwLmdldCgkc3R5bGVzLCAkdHlwb2dyYXBoeSwgbGV0dGVyLXNwYWNpbmcpO1xufVxuXG4kX3R5cG9ncmFwaHktdGhlbWU6IChcbiAgZm9udDogbnVsbCxcbiAgbGluZS1oZWlnaHQ6IG51bGwsXG4gIHNpemU6IG51bGwsXG4gIHdlaWdodDogbnVsbCxcbiAgdHJhY2tpbmc6IG51bGwsXG4pO1xuXG5AbWl4aW4gdGhlbWUtc3R5bGVzKCR0aGVtZSkge1xuICBAaW5jbHVkZSB0aGVtZS52YWxpZGF0ZS10aGVtZS1rZXlzKCRfdHlwb2dyYXBoeS10aGVtZSwgJHRoZW1lKTtcblxuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShmb250LWZhbWlseSwgbWFwLmdldCgkdGhlbWUsIGZvbnQpKTtcbiAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkobGluZS1oZWlnaHQsIG1hcC5nZXQoJHRoZW1lLCBsaW5lLWhlaWdodCkpO1xuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShmb250LXNpemUsIG1hcC5nZXQoJHRoZW1lLCBzaXplKSk7XG4gIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGZvbnQtd2VpZ2h0LCBtYXAuZ2V0KCR0aGVtZSwgd2VpZ2h0KSk7XG4gIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGxldHRlci1zcGFjaW5nLCBtYXAuZ2V0KCR0aGVtZSwgdHJhY2tpbmcpKTtcbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG5AdXNlICdzYXNzOmxpc3QnO1xuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnc2FzczptZXRhJztcbkB1c2UgJy4vZ3NzJztcblxuLy8vIFdoZW4gdHJ1ZSwgYWRkIGFuIGFkZGl0aW9uYWwgcHJvcGVydHkvdmFsdWUgZGVjbGFyYXRpb24gYmVmb3JlIGRlY2xhcmF0aW9uc1xuLy8vIHRoYXQgdXNlIGFkdmFuY2VkIGZlYXR1cmVzIHN1Y2ggYXMgY3VzdG9tIHByb3BlcnRpZXMgb3IgQ1NTIGZ1bmN0aW9ucy4gVGhpc1xuLy8vIGFkZHMgZmFsbGJhY2sgc3VwcG9ydCBmb3Igb2xkZXIgYnJvd3NlcnMgc3VjaCBhcyBJRTExIHRoYXQgZG8gbm90IHN1cHBvcnRcbi8vLyB0aGVzZSBmZWF0dXJlcyBhdCB0aGUgY29zdCBvZiBhZGRpdGlvbmFsIENTUy4gU2V0IHRoaXMgdmFyaWFibGUgdG8gZmFsc2UgdG9cbi8vLyBkaXNhYmxlIGdlbmVyYXRpbmcgZmFsbGJhY2sgZGVjbGFyYXRpb25zLlxuJGVuYWJsZS1mYWxsYmFjay1kZWNsYXJhdGlvbnM6IHRydWUgIWRlZmF1bHQ7XG5cbi8vLyBXcml0ZXMgYSBDU1MgcHJvcGVydHkvdmFsdWUgZGVjbGFyYXRpb24uIFRoaXMgbWl4aW4gaXMgdXNlZCB0aHJvdWdob3V0IHRoZVxuLy8vIHRoZW1lIHBhY2thZ2UgZm9yIGNvbnNpc3RlbmN5IGZvciBkeW5hbWljYWxseSBzZXR0aW5nIENTUyBwcm9wZXJ0eSB2YWx1ZXMuXG4vLy9cbi8vLyBUaGlzIG1peGluIG1heSBvcHRpb25hbGx5IHRha2UgYSBmYWxsYmFjayB2YWx1ZS4gRm9yIGFkdmFuY2VkIGZlYXR1cmVzIHN1Y2hcbi8vLyBhcyBjdXN0b20gcHJvcGVydGllcyBvciBDU1MgZnVuY3Rpb25zIGxpa2UgbWluIGFuZCBtYXgsIGEgZmFsbGJhY2sgdmFsdWUgaXNcbi8vLyByZWNvbW1lbmRlZCB0byBzdXBwb3J0IG9sZGVyIGJyb3dzZXJzLlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRwcm9wZXJ0eSAtIFRoZSBDU1MgcHJvcGVydHkgb2YgdGhlIGRlY2xhcmF0aW9uLlxuLy8vIEBwYXJhbSB7Kn0gJHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBDU1MgZGVjbGFyYXRpb24uIFRoZSB2YWx1ZSBzaG91bGQgYmVcbi8vLyAgICAgcmVzb2x2ZWQgYnkgb3RoZXIgdGhlbWUgZnVuY3Rpb25zIGZpcnN0IChpLmUuIGN1c3RvbSBwcm9wZXJ0eSBNYXBzIGFuZFxuLy8vICAgICBNYXRlcmlhbCB0aGVtZSBrZXlzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgbWl4aW4pLiBJZiB0aGUgdmFsdWUgaXNcbi8vLyAgICAgbnVsbCwgbm8gZGVjbGFyYXRpb25zIHdpbGwgYmUgZW1pdHRlZC5cbi8vLyBAcGFyYW0geyp9ICRmYWxsYmFjayAtIEFuIG9wdGlvbmFsIGZhbGxiYWNrIHZhbHVlIGZvciBvbGRlciBicm93c2Vycy4gSWZcbi8vLyAgICAgcHJvdmlkZWQsIGEgc2Vjb25kIHByb3BlcnR5L3ZhbHVlIGRlY2xhcmF0aW9uIHdpbGwgYmUgYWRkZWQgYmVmb3JlIHRoZVxuLy8vICAgICBtYWluIHByb3BlcnR5L3ZhbHVlIGRlY2xhcmF0aW9uLlxuLy8vIEBwYXJhbSB7TWFwfSAkZ3NzIC0gQW4gb3B0aW9uYWwgTWFwIG9mIEdTUyBhbm5vdGF0aW9ucyB0byBhZGQuXG4vLy8gQHBhcmFtIHtCb29sfSAkaW1wb3J0YW50IC0gSWYgdHJ1ZSwgYWRkIGAhaW1wb3J0YW50YCB0byB0aGUgZGVjbGFyYXRpb24uXG5AbWl4aW4gZGVjbGFyYXRpb24oXG4gICRwcm9wZXJ0eSxcbiAgJHZhbHVlLFxuICAkZmFsbGJhY2stdmFsdWU6IG51bGwsXG4gICRnc3M6ICgpLFxuICAkaW1wb3J0YW50OiBmYWxzZVxuKSB7XG4gIC8vIE5vcm1hbGx5IHNldHRpbmcgYSBudWxsIHZhbHVlIHRvIGEgcHJvcGVydHkgd2lsbCBub3QgZW1pdCBDU1MsIHNvIG1peGluc1xuICAvLyB3b3VsZG4ndCBuZWVkIHRvIGNoZWNrIHRoaXMuIEhvd2V2ZXIsIFNhc3Mgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGVcbiAgLy8gaW50ZXJwb2xhdGVkIHByb3BlcnR5IGlzIGEgY3VzdG9tIHByb3BlcnR5LlxuICBAaWYgJHZhbHVlICE9IG51bGwge1xuICAgICRpbXBvcnRhbnQtcnVsZTogaWYoJGltcG9ydGFudCwgJyAhaW1wb3J0YW50JywgJycpO1xuXG4gICAgQGlmICRmYWxsYmFjay12YWx1ZSBhbmQgJGVuYWJsZS1mYWxsYmFjay1kZWNsYXJhdGlvbnMge1xuICAgICAgQGluY2x1ZGUgZ3NzLmFubm90YXRlKCRnc3MpO1xuICAgICAgI3skcHJvcGVydHl9OiAjeyRmYWxsYmFjay12YWx1ZX0gI3skaW1wb3J0YW50LXJ1bGV9O1xuXG4gICAgICAvLyBBZGQgQGFsdGVybmF0ZSB0byBhbm5vdGF0aW9ucy5cbiAgICAgICRnc3M6IG1hcC5tZXJnZShcbiAgICAgICAgJGdzcyxcbiAgICAgICAgKFxuICAgICAgICAgIGFsdGVybmF0ZTogdHJ1ZSxcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBnc3MuYW5ub3RhdGUoJGdzcyk7XG4gICAgI3skcHJvcGVydHl9OiAjeyR2YWx1ZX0jeyRpbXBvcnRhbnQtcnVsZX07XG4gIH1cbn1cblxuLy8vIFVucGFja3Mgc2hvcnRoYW5kIHZhbHVlcyBmb3IgQ1NTIHByb3BlcnRpZXMgKGkuZS4gbGlzdHMgb2YgMS0zIHZhbHVlcykuXG4vLy8gSWYgYSBsaXN0IG9mIDQgdmFsdWVzIGlzIGdpdmVuLCBpdCBpcyByZXR1cm5lZCBhcy1pcy5cbi8vL1xuLy8vIEV4YW1wbGVzOlxuLy8vXG4vLy8gdW5wYWNrLXZhbHVlKDRweCkgPT4gNHB4IDRweCA0cHggNHB4XG4vLy8gdW5wYWNrLXZhbHVlKDRweCAycHgpID0+IDRweCAycHggNHB4IDJweFxuLy8vIHVucGFjay12YWx1ZSg0cHggMnB4IDJweCkgPT4gNHB4IDJweCAycHggMnB4XG4vLy8gdW5wYWNrLXZhbHVlKDRweCAycHggMCAycHgpID0+IDRweCAycHggMCAycHhcbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyIHwgTWFwIHwgTGlzdH0gJHZhbHVlIC0gTGlzdCBvZiAxIHRvIDQgdmFsdWUgbnVtYmVycy5cbi8vLyBAcmV0dXJuIHtMaXN0fSBhIExpc3Qgb2YgNCB2YWx1ZSBudW1iZXJzLlxuQGZ1bmN0aW9uIHVucGFjay12YWx1ZSgkdmFsdWUpIHtcbiAgQGlmIG1ldGEudHlwZS1vZigkdmFsdWUpID09ICdtYXAnIG9yIGxpc3QubGVuZ3RoKCR2YWx1ZSkgPT0gMSB7XG4gICAgQHJldHVybiAkdmFsdWUgJHZhbHVlICR2YWx1ZSAkdmFsdWU7XG4gIH0gQGVsc2UgaWYgbGlzdC5sZW5ndGgoJHZhbHVlKSA9PSA0IHtcbiAgICBAcmV0dXJuICR2YWx1ZTtcbiAgfSBAZWxzZSBpZiBsaXN0Lmxlbmd0aCgkdmFsdWUpID09IDMge1xuICAgIEByZXR1cm4gbGlzdC5udGgoJHZhbHVlLCAxKSBsaXN0Lm50aCgkdmFsdWUsIDIpIGxpc3QubnRoKCR2YWx1ZSwgMylcbiAgICAgIGxpc3QubnRoKCR2YWx1ZSwgMik7XG4gIH0gQGVsc2UgaWYgbGlzdC5sZW5ndGgoJHZhbHVlKSA9PSAyIHtcbiAgICBAcmV0dXJuIGxpc3QubnRoKCR2YWx1ZSwgMSkgbGlzdC5udGgoJHZhbHVlLCAyKSBsaXN0Lm50aCgkdmFsdWUsIDEpXG4gICAgICBsaXN0Lm50aCgkdmFsdWUsIDIpO1xuICB9XG5cbiAgQGVycm9yIFwiSW52YWxpZCBDU1MgcHJvcGVydHkgdmFsdWU6ICcjeyR2YWx1ZX0nIGlzIG1vcmUgdGhhbiA0IHZhbHVlc1wiO1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdzYXNzOm1hcCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuXG4vLy8gQWRkcyBvcHRpb25hbCBHU1MgYW5ub3RhdGlvbiBjb21tZW50cy4gVXNlZnVsIGZvciB0aGVtZSBtaXhpbnMgd2hlcmUgb25lIG9yXG4vLy8gbW9yZSBwcm9wZXJ0aWVzIGFyZSBzZXQgaW5kaXJlY3RseS5cbi8vL1xuLy8vIEFubm90YXRpb25zIG1heSBiZSBwcm92aWRlZCBhcyBhIE1hcCBvZiBhbm5vdGF0aW9ucyBvciBhcyBuYW1lZCBhcmd1bWVudHMuXG4vLy9cbi8vLyBAZXhhbXBsZSAtIHNjc3Ncbi8vLyAgIEBpbmNsdWRlIGFubm90YXRlKChub2ZsaXA6IHRydWUpKTtcbi8vLyAgIGxlZnQ6IDA7XG4vLy9cbi8vLyBAZXhhbXBsZSAtIHNjc3Ncbi8vLyAgIEBpbmNsdWRlIGFubm90YXRlKCRub2ZsaXA6IHRydWUpO1xuLy8vICAgbGVmdDogMDtcbi8vL1xuLy8vIEBleGFtcGxlIC0gY3NzXG4vLy8gICAvKiBAbm9mbGlwICovIC8qcnRsOmlnbm9yZSovXG4vLy8gICBsZWZ0OiAwO1xuLy8vXG4vLy8gQHBhcmFtIHtNYXB9ICRhbm5vdGF0aW9ucyAtIE1hcCBvZiBhbm5vdGF0aW9ucy4gVmFsdWVzIG11c3QgYmUgc2V0IHRvIGB0cnVlYFxuLy8vICAgICBmb3IgYW4gYW5ub3RhdGlvbiB0byBiZSBhZGRlZC5cbkBtaXhpbiBhbm5vdGF0ZSgkYW5ub3RhdGlvbnMuLi4pIHtcbiAgJGtleXdvcmRzOiBtZXRhLmtleXdvcmRzKCRhbm5vdGF0aW9ucyk7XG4gIEBpZiBsaXN0Lmxlbmd0aCgkYW5ub3RhdGlvbnMpID4gMCB7XG4gICAgJGFubm90YXRpb25zOiBsaXN0Lm50aCgkYW5ub3RhdGlvbnMsIDEpO1xuICB9IEBlbHNlIHtcbiAgICAkYW5ub3RhdGlvbnM6ICRrZXl3b3JkcztcbiAgfVxuXG4gIEBpZiAobWFwLmdldCgkYW5ub3RhdGlvbnMsIGFsdGVybmF0ZSkgPT0gdHJ1ZSkge1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgfVxuXG4gIC8vIG5vZmxpcCBtdXN0IGJlIHRoZSBsYXN0IHRhZyByaWdodCBiZWZvcmUgdGhlIHByb3BlcnR5XG4gIEBpZiAobWFwLmdldCgkYW5ub3RhdGlvbnMsIG5vZmxpcCkgPT0gdHJ1ZSkge1xuICAgIC8qIEBub2ZsaXAgKi8gLypydGw6aWdub3JlKi9cbiAgfVxufVxuIiwiQHVzZSAnLi4vY29tbW9uLnNjc3MnO1xuXG5ib2R5IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGU6IDFmciAxZnIgMjAwcHggLyAyZnIgMmZyO1xuICAgIGdhcDogMnJlbTtcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwO1xufVxuXG5oZWFkZXIge1xuICAgIGdyaWQtY29sdW1uOiAxLy0xO1xufVxuXG5vcmFuZ2UtY29udGFpbmVyLFxucGluay1jb250YWluZXIge1xuICAgIHdpZHRoOiA1MDBweDtcbiAgICBoZWlnaHQ6IDUwMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBtYXJnaW4tdG9wOiBjYWxjKDY0cHggKyAycmVtKTtcbn1cblxubXdjLWJ1dHRvbiB7XG4gICAgZ3JpZC1jb2x1bW46IDEvLTE7XG4gICAgbWFyZ2luOiAwIGF1dG87XG59IiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL2Jhc2UvbWl4aW5zJyBhcyBiYXNlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lLWNvbG9yJztcbkB1c2UgJy4vZWxldmF0aW9uLXRoZW1lJztcblxuQG1peGluIGNvcmUtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAZm9yICR6LXZhbHVlIGZyb20gMCB0aHJvdWdoIDI0IHtcbiAgICAubWRjLWVsZXZhdGlvbi0teiN7JHotdmFsdWV9IHtcbiAgICAgIEBpbmNsdWRlIGVsZXZhdGlvbi10aGVtZS5lbGV2YXRpb24oJHotdmFsdWUsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAubWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgdHJhbnNpdGlvbjogZWxldmF0aW9uLXRoZW1lLnRyYW5zaXRpb24tdmFsdWUoKTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgd2lsbC1jaGFuZ2U6IGVsZXZhdGlvbi10aGVtZS4kcHJvcGVydHk7XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIENhbGxlZCBvbmNlIHBlciBhcHBsaWNhdGlvbiB0byBzZXQgdXAgdGhlIGdsb2JhbCBkZWZhdWx0IGVsZXZhdGlvbiBzdHlsZXMuXG4vLy9cbkBtaXhpbiBvdmVybGF5LWNvbW1vbigkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1lbGV2YXRpb24tb3ZlcmxheSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIGJhc2UtbWl4aW5zLmVtaXQtb25jZSgnbWRjLWVsZXZhdGlvbi9jb21tb24vc3RydWN0dXJlJykge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG4gICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KFxuICAgICAgICAgIG9wYWNpdHksXG4gICAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKC0tbWRjLWVsZXZhdGlvbi1vdmVybGF5LW9wYWNpdHksIDApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICAgIEBpbmNsdWRlIGJhc2UtbWl4aW5zLmVtaXQtb25jZSgnbWRjLWVsZXZhdGlvbi9jb21tb24vYW5pbWF0aW9uJykge1xuICAgICAgICB0cmFuc2l0aW9uOiBlbGV2YXRpb24tdGhlbWUub3ZlcmxheS10cmFuc2l0aW9uLXZhbHVlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgYmFzZS1taXhpbnMuZW1pdC1vbmNlKCdtZGMtZWxldmF0aW9uL2NvbW1vbi9jb2xvcicpIHtcbiAgICAgICRmaWxsLWNvbG9yOiBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoXG4gICAgICAgIC0tbWRjLWVsZXZhdGlvbi1vdmVybGF5LWNvbG9yLFxuICAgICAgICBlbGV2YXRpb24tdGhlbWUuJG92ZXJsYXktY29sb3JcbiAgICAgICk7XG4gICAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUub3ZlcmxheS1maWxsLWNvbG9yKCRmaWxsLWNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVybiAtLVxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG5cbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXMnIGFzIGFuaW1hdGlvbi12YXJpYWJsZXM7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL2Jhc2UvbWl4aW5zJyBhcyBiYXNlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL3J0bCc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3NzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuXG4kYmFzZWxpbmUtY29sb3I6IGJsYWNrICFkZWZhdWx0O1xuJHVtYnJhLW9wYWNpdHk6IDAuMiAhZGVmYXVsdDtcbiRwZW51bWJyYS1vcGFjaXR5OiAwLjE0ICFkZWZhdWx0O1xuJGFtYmllbnQtb3BhY2l0eTogMC4xMiAhZGVmYXVsdDtcblxuJHVtYnJhLW1hcDogKFxuICAwOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgMTogJzBweCAycHggMXB4IC0xcHgnLFxuICAyOiAnMHB4IDNweCAxcHggLTJweCcsXG4gIDM6ICcwcHggM3B4IDNweCAtMnB4JyxcbiAgNDogJzBweCAycHggNHB4IC0xcHgnLFxuICA1OiAnMHB4IDNweCA1cHggLTFweCcsXG4gIDY6ICcwcHggM3B4IDVweCAtMXB4JyxcbiAgNzogJzBweCA0cHggNXB4IC0ycHgnLFxuICA4OiAnMHB4IDVweCA1cHggLTNweCcsXG4gIDk6ICcwcHggNXB4IDZweCAtM3B4JyxcbiAgMTA6ICcwcHggNnB4IDZweCAtM3B4JyxcbiAgMTE6ICcwcHggNnB4IDdweCAtNHB4JyxcbiAgMTI6ICcwcHggN3B4IDhweCAtNHB4JyxcbiAgMTM6ICcwcHggN3B4IDhweCAtNHB4JyxcbiAgMTQ6ICcwcHggN3B4IDlweCAtNHB4JyxcbiAgMTU6ICcwcHggOHB4IDlweCAtNXB4JyxcbiAgMTY6ICcwcHggOHB4IDEwcHggLTVweCcsXG4gIDE3OiAnMHB4IDhweCAxMXB4IC01cHgnLFxuICAxODogJzBweCA5cHggMTFweCAtNXB4JyxcbiAgMTk6ICcwcHggOXB4IDEycHggLTZweCcsXG4gIDIwOiAnMHB4IDEwcHggMTNweCAtNnB4JyxcbiAgMjE6ICcwcHggMTBweCAxM3B4IC02cHgnLFxuICAyMjogJzBweCAxMHB4IDE0cHggLTZweCcsXG4gIDIzOiAnMHB4IDExcHggMTRweCAtN3B4JyxcbiAgMjQ6ICcwcHggMTFweCAxNXB4IC03cHgnLFxuKSAhZGVmYXVsdDtcblxuJHBlbnVtYnJhLW1hcDogKFxuICAwOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgMTogJzBweCAxcHggMXB4IDBweCcsXG4gIDI6ICcwcHggMnB4IDJweCAwcHgnLFxuICAzOiAnMHB4IDNweCA0cHggMHB4JyxcbiAgNDogJzBweCA0cHggNXB4IDBweCcsXG4gIDU6ICcwcHggNXB4IDhweCAwcHgnLFxuICA2OiAnMHB4IDZweCAxMHB4IDBweCcsXG4gIDc6ICcwcHggN3B4IDEwcHggMXB4JyxcbiAgODogJzBweCA4cHggMTBweCAxcHgnLFxuICA5OiAnMHB4IDlweCAxMnB4IDFweCcsXG4gIDEwOiAnMHB4IDEwcHggMTRweCAxcHgnLFxuICAxMTogJzBweCAxMXB4IDE1cHggMXB4JyxcbiAgMTI6ICcwcHggMTJweCAxN3B4IDJweCcsXG4gIDEzOiAnMHB4IDEzcHggMTlweCAycHgnLFxuICAxNDogJzBweCAxNHB4IDIxcHggMnB4JyxcbiAgMTU6ICcwcHggMTVweCAyMnB4IDJweCcsXG4gIDE2OiAnMHB4IDE2cHggMjRweCAycHgnLFxuICAxNzogJzBweCAxN3B4IDI2cHggMnB4JyxcbiAgMTg6ICcwcHggMThweCAyOHB4IDJweCcsXG4gIDE5OiAnMHB4IDE5cHggMjlweCAycHgnLFxuICAyMDogJzBweCAyMHB4IDMxcHggM3B4JyxcbiAgMjE6ICcwcHggMjFweCAzM3B4IDNweCcsXG4gIDIyOiAnMHB4IDIycHggMzVweCAzcHgnLFxuICAyMzogJzBweCAyM3B4IDM2cHggM3B4JyxcbiAgMjQ6ICcwcHggMjRweCAzOHB4IDNweCcsXG4pICFkZWZhdWx0O1xuXG4kYW1iaWVudC1tYXA6IChcbiAgMDogJzBweCAwcHggMHB4IDBweCcsXG4gIDE6ICcwcHggMXB4IDNweCAwcHgnLFxuICAyOiAnMHB4IDFweCA1cHggMHB4JyxcbiAgMzogJzBweCAxcHggOHB4IDBweCcsXG4gIDQ6ICcwcHggMXB4IDEwcHggMHB4JyxcbiAgNTogJzBweCAxcHggMTRweCAwcHgnLFxuICA2OiAnMHB4IDFweCAxOHB4IDBweCcsXG4gIDc6ICcwcHggMnB4IDE2cHggMXB4JyxcbiAgODogJzBweCAzcHggMTRweCAycHgnLFxuICA5OiAnMHB4IDNweCAxNnB4IDJweCcsXG4gIDEwOiAnMHB4IDRweCAxOHB4IDNweCcsXG4gIDExOiAnMHB4IDRweCAyMHB4IDNweCcsXG4gIDEyOiAnMHB4IDVweCAyMnB4IDRweCcsXG4gIDEzOiAnMHB4IDVweCAyNHB4IDRweCcsXG4gIDE0OiAnMHB4IDVweCAyNnB4IDRweCcsXG4gIDE1OiAnMHB4IDZweCAyOHB4IDVweCcsXG4gIDE2OiAnMHB4IDZweCAzMHB4IDVweCcsXG4gIDE3OiAnMHB4IDZweCAzMnB4IDVweCcsXG4gIDE4OiAnMHB4IDdweCAzNHB4IDZweCcsXG4gIDE5OiAnMHB4IDdweCAzNnB4IDZweCcsXG4gIDIwOiAnMHB4IDhweCAzOHB4IDdweCcsXG4gIDIxOiAnMHB4IDhweCA0MHB4IDdweCcsXG4gIDIyOiAnMHB4IDhweCA0MnB4IDdweCcsXG4gIDIzOiAnMHB4IDlweCA0NHB4IDhweCcsXG4gIDI0OiAnMHB4IDlweCA0NnB4IDhweCcsXG4pICFkZWZhdWx0O1xuXG4vLyBUaGUgY3NzIHByb3BlcnR5IHVzZWQgZm9yIGVsZXZhdGlvbi4gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBub3QgYmUgY2hhbmdlZC4gSXQgaXMgZXhwb3NlZFxuLy8gYXMgYSB2YXJpYWJsZSBmb3IgYWJzdHJhY3Rpb24gLyBlYXN5IHVzZSB3aGVuIG5lZWRpbmcgdG8gcmVmZXJlbmNlIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSwgZm9yXG4vLyBleGFtcGxlIGluIGEgYHdpbGwtY2hhbmdlYCBydWxlLlxuJHByb3BlcnR5OiBib3gtc2hhZG93ICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBjb2xvciBmb3IgdGhlIGVsZXZhdGlvbiBvdmVybGF5LlxuJG92ZXJsYXktY29sb3I6ICNmZmY7XG5cbi8vIFRoZSBjc3MgcHJvcGVydHkgdXNlZCBmb3IgZWxldmF0aW9uIG92ZXJsYXkgdHJhbnNpdGlvbnMuIEluIG1vc3QgY2FzZXMgdGhpcyBzaG91bGQgbm90IGJlIGNoYW5nZWQuIEl0IGlzIGV4cG9zZWRcbi8vIGFzIGEgdmFyaWFibGUgZm9yIGFic3RyYWN0aW9uIC8gZWFzeSB1c2Ugd2hlbiBuZWVkaW5nIHRvIHJlZmVyZW5jZSB0aGUgcHJvcGVydHkgZGlyZWN0bHksIGZvclxuLy8gZXhhbXBsZSBpbiBhIGB3aWxsLWNoYW5nZWAgcnVsZS5cbiRvdmVybGF5LXByb3BlcnR5OiBvcGFjaXR5ICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBkdXJhdGlvbiB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuJHRyYW5zaXRpb24tZHVyYXRpb246IDI4MG1zICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBlYXNpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBTZXRzIHRoZSBlbGV2YXRpb24gdHJhbnNpdGlvbiB2YWx1ZS5cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRlYXNpbmcgLSBUaGUgZWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgdHJhbnNpdGlvbi5cbi8vLyBAcmV0dXJuIHtTdHJpbmd9XG4vLy9cbkBmdW5jdGlvbiB0cmFuc2l0aW9uLXZhbHVlKFxuICAkZHVyYXRpb246ICR0cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAkZWFzaW5nOiAkdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cbikge1xuICBAcmV0dXJuICN7JHByb3BlcnR5fSAjeyRkdXJhdGlvbn0gI3skZWFzaW5nfTtcbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZWxldmF0aW9uIG92ZXJsYXkgdHJhbnNpdGlvbiB2YWx1ZS5cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRlYXNpbmcgLSBUaGUgZWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgdHJhbnNpdGlvbi5cbi8vLyBAcmV0dXJuIHtTdHJpbmd9XG4vLy9cbkBmdW5jdGlvbiBvdmVybGF5LXRyYW5zaXRpb24tdmFsdWUoXG4gICRkdXJhdGlvbjogJHRyYW5zaXRpb24tZHVyYXRpb24sXG4gICRlYXNpbmc6ICR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblxuKSB7XG4gIEByZXR1cm4gI3skb3ZlcmxheS1wcm9wZXJ0eX0gI3skZHVyYXRpb259ICN7JGVhc2luZ307XG59XG5cbi8vL1xuLy8vIENyZWF0ZXMgYSBib3gtc2hhZG93IGZyb20gdGhlIE1hdGVyaWFsIGVsZXZhdGlvbiBzeXN0ZW0uXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRsZXZlbCAtIHRoZSBsZXZlbCBvZiB0aGUgTWF0ZXJpYWwgZWxldmF0aW9uIHN5c3RlbS5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGNvbG9yIC0gdGhlIGNvbG9yIG9mIHRoZSBzaGFkb3cuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRvcGFjaXR5LWJvb3N0IFswXSAtIG9wdGlvbmFsIG9wYWNpdHkgYm9vc3QgZm9yIHRoZSBzaGFkb3cuXG4vLy8gQHJldHVybiB7TGlzdH0gdGhlIGNvbXBsZXRlIGJveCBzaGFkb3cuXG4vLy9cbkBmdW5jdGlvbiBfYm94LXNoYWRvdygkbGV2ZWwsICRjb2xvciwgJG9wYWNpdHktYm9vc3Q6IDApIHtcbiAgJGNvbG9yOiB0aGVtZS1jb2xvci5wcm9wLXZhbHVlKCRjb2xvcik7XG4gICR1bWJyYS16LXZhbHVlOiBtYXAuZ2V0KCR1bWJyYS1tYXAsICRsZXZlbCk7XG4gICRwZW51bWJyYS16LXZhbHVlOiBtYXAuZ2V0KCRwZW51bWJyYS1tYXAsICRsZXZlbCk7XG4gICRhbWJpZW50LXotdmFsdWU6IG1hcC5nZXQoJGFtYmllbnQtbWFwLCAkbGV2ZWwpO1xuXG4gICR1bWJyYS1jb2xvcjogcmdiYSgkY29sb3IsICR1bWJyYS1vcGFjaXR5ICsgJG9wYWNpdHktYm9vc3QpO1xuICAkcGVudW1icmEtY29sb3I6IHJnYmEoJGNvbG9yLCAkcGVudW1icmEtb3BhY2l0eSArICRvcGFjaXR5LWJvb3N0KTtcbiAgJGFtYmllbnQtY29sb3I6IHJnYmEoJGNvbG9yLCAkYW1iaWVudC1vcGFjaXR5ICsgJG9wYWNpdHktYm9vc3QpO1xuXG4gIEByZXR1cm4gKFxuICAgICN7JyN7JHVtYnJhLXotdmFsdWV9ICN7JHVtYnJhLWNvbG9yfSd9LFxuICAgICN7JyN7JHBlbnVtYnJhLXotdmFsdWV9ICN7JHBlbnVtYnJhLWNvbG9yfSd9LFxuICAgICN7JGFtYmllbnQtei12YWx1ZX0gJGFtYmllbnQtY29sb3JcbiAgKTtcbn1cblxuLy8gUmV0dXJucyB0aGUgY29ycmVjdCBib3gtc2hhZG93IHNwZWNpZmllZCBieSAkei12YWx1ZS5cbi8vIFRoZSAkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG4vLyBJZiAkY29sb3IgaGFzIGFuIGFscGhhIGNoYW5uZWwsIGl0IHdpbGwgYmUgaWdub3JlZCBhbmQgb3ZlcnJpZGRlbi4gVG8gaW5jcmVhc2UgdGhlIG9wYWNpdHkgb2YgdGhlIHNoYWRvdywgdXNlXG4vLyAkb3BhY2l0eS1ib29zdC5cbkBmdW5jdGlvbiBlbGV2YXRpb24tYm94LXNoYWRvdyhcbiAgJHotdmFsdWUsXG4gICRjb2xvcjogJGJhc2VsaW5lLWNvbG9yLFxuICAkb3BhY2l0eS1ib29zdDogMFxuKSB7XG4gIEBpZiBtZXRhLnR5cGUtb2YoJHotdmFsdWUpICE9IG51bWJlciBvciBub3QgbWF0aC5pcy11bml0bGVzcygkei12YWx1ZSkge1xuICAgIEBlcnJvciBcIiR6LXZhbHVlIG11c3QgYmUgYSB1bml0bGVzcyBudW1iZXIsIGJ1dCByZWNlaXZlZCAnI3skei12YWx1ZX0nXCI7XG4gIH1cblxuICBAaWYgJHotdmFsdWUgPCAwIG9yICR6LXZhbHVlID4gMjQge1xuICAgIEBlcnJvciBcIiR6LXZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNCwgYnV0IHJlY2VpdmVkICcjeyR6LXZhbHVlfSdcIjtcbiAgfVxuXG4gIEByZXR1cm4gX2JveC1zaGFkb3coJHotdmFsdWUsICRjb2xvciwgJG9wYWNpdHktYm9vc3QpO1xufVxuXG4vLy9cbi8vLyBSZXR1cm5zIGEgc2hhZG93IG9yIG51bGwgaWYgcGFyYW1zIGFyZSBpbnZhbGlkLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkbGV2ZWwgLSB0aGUgbGV2ZWwgb2YgdGhlIE1hdGVyaWFsIGVsZXZhdGlvbiBzeXN0ZW0uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRjb2xvciAtIHRoZSBjb2xvciBvZiB0aGUgc2hhZG93LlxuLy8vIEByZXR1cm4ge0xpc3R8bnVsbH0gdGhlIGNvbXBsZXRlIGJveCBzaGFkb3cgb3IgbnVsbC5cbi8vL1xuQGZ1bmN0aW9uIF9zaGFkb3coJGxldmVsLCAkY29sb3IpIHtcbiAgQGlmICRsZXZlbCA9PSBudWxsIGFuZCAkY29sb3IgPT0gbnVsbCB7XG4gICAgLy8gRG8gbm90IGVtaXQgYSB3YXJuaW5nIGlmIGJvdGggYXJlIG51bGwsIHdoaWNoIG1lYW5zIHRoZSB1c2VyIGRpZCBub3RcbiAgICAvLyBwcm92aWRlIHRva2Vucy5cbiAgICBAcmV0dXJuIG51bGw7XG4gIH1cblxuICBAaWYgJGxldmVsID09IG51bGwgb3IgJGNvbG9yID09IG51bGwge1xuICAgIC8vIElmIG9uZSBvZiB0aGUgdG9rZW5zIGlzIG51bGwsIGVtaXQgYSB3YXJuaW5nOiB0aGUgdXNlciBtYXkgbm90IHJlYWxpemVcbiAgICAvLyB0aGF0IGJvdGggYXJlIHJlcXVpcmVkLlxuICAgIEB3YXJuIFwiYm90aCAkbGV2ZWwgYW5kICRjb2xvciBhcmUgcmVxdWlyZWQ7IHJlY2VpdmVkICRsZXZlbDogJyN7JGxldmVsfScsICRjb2xvcjogJyN7JGNvbG9yfSdcIjtcbiAgICBAcmV0dXJuIG51bGw7XG4gIH1cblxuICBAaWYgJGxldmVsIDwgMCBvciAkbGV2ZWwgPiAyNCB7XG4gICAgQHdhcm4gXCIkbGV2ZWwgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDI0OyByZWNlaXZlZCAnI3skbGV2ZWx9J1wiO1xuICAgIEByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIEByZXR1cm4gX2JveC1zaGFkb3coJGxldmVsLCAkY29sb3IpO1xufVxuXG5AZnVuY3Rpb24gZ2V0LWVsZXZhdGlvbigkbGV2ZWwpIHtcbiAgQHJldHVybiAoYm94LXNoYWRvdzogZWxldmF0aW9uLWJveC1zaGFkb3coJGxldmVsKSk7XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIHNoYWRvdyBvZiB0aGUgZWxlbWVudC5cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkYm94LXNoYWRvdyAtIFRoZSBzaGFkb3cgdG8gYXBwbHkgdG8gdGhlIGVsZW1lbnQuXG4vLy9cbkBtaXhpbiBfYm94LXNoYWRvdygkc2hhZG93LCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShib3gtc2hhZG93LCAkc2hhZG93KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBzaGFkb3cgb2YgdGhlIGVsZW1lbnQuXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGJveC1zaGFkb3cgLSBUaGUgc2hhZG93IHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50LlxuLy8vXG5AbWl4aW4gc2hhZG93KCRib3gtc2hhZG93LCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICBAaWYgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJGJveC1zaGFkb3cpIHtcbiAgICAgIC8vIFRPRE8oYi8xODUxODg0NTgpOiBVc2UgdGhlbWUucHJvcGVydHkoKSBvbmNlIHJlc29sdmVkLlxuICAgICAgJGZhbGxiYWNrOiBjdXN0b20tcHJvcGVydGllcy5nZXQtZmFsbGJhY2soJGJveC1zaGFkb3cpO1xuXG4gICAgICAvLyB2YXIoLS08Ym94LXNoYWRvdy1wcm9wPiwgdmFyKC0tbS1lbGV2YXRpb24tYm94LXNoYWRvdy1mb3ItZ3NzKSlcbiAgICAgICRnc3MtY3VzdG9tLXByb3A6IGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZShcbiAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuZ2V0LXZhcm5hbWUoJGJveC1zaGFkb3cpLFxuICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoZWxldmF0aW9uLWJveC1zaGFkb3ctZm9yLWdzcylcbiAgICAgICk7XG5cbiAgICAgICR2YWx1ZTogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlLXZhcigkZ3NzLWN1c3RvbS1wcm9wKTtcbiAgICAgIEBpZiAkdmFsdWUgPT0gbnVsbCB7XG4gICAgICAgIC8vIEN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBkaXNhYmxlZCwgc2luY2UgJGdzcy1jdXN0b20tcHJvcFxuICAgICAgICAvLyBkb2VzIG5vdCBoYXZlIGEgZmFsbGJhY2suIEF2b2lkIGVtaXR0aW5nIHR3byBub24tY3VzdG9tXG4gICAgICAgIC8vIHByb3AgZGVjbGFyYXRpb25zIGJ5IHNldHRpbmcgJGZhbGxiYWNrIHRvIG51bGwuXG4gICAgICAgICR2YWx1ZTogJGZhbGxiYWNrO1xuICAgICAgICAkZmFsbGJhY2s6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIEBpbmNsdWRlIGN1c3RvbS1wcm9wZXJ0aWVzLmRlY2xhcmF0aW9uKFxuICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoZWxldmF0aW9uLWJveC1zaGFkb3ctZm9yLWdzcywgJGZhbGxiYWNrKVxuICAgICAgKTtcbiAgICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihib3gtc2hhZG93LCAkdmFsdWUsICRmYWxsYmFjay12YWx1ZTogJGZhbGxiYWNrKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICAgIGJveC1zaGFkb3c6ICRib3gtc2hhZG93O1xuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBlbGV2YXRpb24gb3ZlcmxheSBzdXJmYWNlIHJlcXVpcmVkIHBvc2l0aW9uaW5nLlxuLy8vXG5AbWl4aW4gb3ZlcmxheS1zdXJmYWNlLXBvc2l0aW9uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZWxldmF0aW9uIG92ZXJsYXksIGluY2x1ZGluZyBwb3NpdGlvbmluZyBhbmQgc2l6aW5nLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgZWxldmF0aW9uIG92ZXJsYXlcbi8vLyBAcGFyYW0ge051bWJlcn0gWyRoZWlnaHRdIC0gVGhlIGhlaWdodCBvZiB0aGUgZWxldmF0aW9uIG92ZXJsYXlcbi8vLyBAcGFyYW0ge0Jvb2xlYW59IFskaGFzLWNvbnRlbnQtc2l6aW5nXSAtIFNldCB0byBmYWxzZSBpZiB0aGUgY29udGFpbmVyIGhhcyBubyBjb250ZW50IHNpemluZ1xuLy8vXG5AbWl4aW4gb3ZlcmxheS1kaW1lbnNpb25zKFxuICAkd2lkdGgsXG4gICRoZWlnaHQ6ICR3aWR0aCxcbiAgJGhhcy1jb250ZW50LXNpemluZzogdHJ1ZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1lbGV2YXRpb24tb3ZlcmxheSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KHdpZHRoLCAkd2lkdGgpO1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoaGVpZ2h0LCAkaGVpZ2h0KTtcblxuICAgICAgQGlmICRoYXMtY29udGVudC1zaXppbmcge1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGVsZXZhdGlvbiBvdmVybGF5IGZpbGwgY29sb3IuXG4vLy8gRXhwZWN0ZWQgdG8gYmUgY2FsbGVkIGRpcmVjdGx5IG9uIHRoZSBlbGV2YXRpb24gb3ZlcmxheSBlbGVtZW50LlxuLy8vXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGNvbG9yIG9mIHRoZSBlbGV2YXRpb24gb3ZlcmxheS5cbi8vL1xuQG1peGluIG92ZXJsYXktZmlsbC1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJhY2tncm91bmQtY29sb3IsICRjb2xvcik7XG4gIH1cbn1cblxuLy8vXG4vLy8gQXBwbGllcyB0aGUgZ2l2ZW4gY29sb3IgdG8gdGhlIGNvbnRhaW5lciBvZiB0aGUgb3ZlcmxheS5cbi8vLyBAcGFyYW0ge2NvbG9yfSAkY29sb3IgLSB0aGUgY29sb3Igb2YgdGhlIG92ZXJsYXkgY29udGFpbmVyXG4vLy9cbkBtaXhpbiBvdmVybGF5LWNvbnRhaW5lci1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgLm1kYy1lbGV2YXRpb24tb3ZlcmxheSB7XG4gICAgQGluY2x1ZGUgb3ZlcmxheS1maWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGVsZXZhdGlvbiBvdmVybGF5IG9wYWNpdHkuXG4vLy8gRXhwZWN0ZWQgdG8gYmUgY2FsbGVkIGZyb20gYSBwYXJlbnQgZWxlbWVudC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkb3BhY2l0eSAtIFRoZSBvcGFjaXR5IG9mIHRoZSBlbGV2YXRpb24gb3ZlcmxheS5cbi8vL1xuQG1peGluIG92ZXJsYXktb3BhY2l0eSgkb3BhY2l0eSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAubWRjLWVsZXZhdGlvbi1vdmVybGF5IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShvcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgfVxuICB9XG59XG5cbi8vIEFwcGxpZXMgdGhlIGNvcnJlY3QgQ1NTIHJ1bGVzIHRvIGFuIGVsZW1lbnQgdG8gZ2l2ZSBpdCB0aGUgZWxldmF0aW9uIHNwZWNpZmllZCBieSAkei12YWx1ZS5cbi8vIFRoZSAkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG4vLyBJZiAkY29sb3IgaGFzIGFuIGFscGhhIGNoYW5uZWwsIGl0IHdpbGwgYmUgaWdub3JlZCBhbmQgb3ZlcnJpZGRlbi4gVG8gaW5jcmVhc2UgdGhlIG9wYWNpdHkgb2YgdGhlIHNoYWRvdywgdXNlXG4vLyAkb3BhY2l0eS1ib29zdC5cbkBtaXhpbiBlbGV2YXRpb24oXG4gICR6LXZhbHVlLFxuICAkY29sb3I6ICRiYXNlbGluZS1jb2xvcixcbiAgJG9wYWNpdHktYm9vc3Q6IDAsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkYm94LXNoYWRvdzogZWxldmF0aW9uLWJveC1zaGFkb3coXG4gICAgJHotdmFsdWUsXG4gICAgJGNvbG9yOiAkY29sb3IsXG4gICAgJG9wYWNpdHktYm9vc3Q6ICRvcGFjaXR5LWJvb3N0XG4gICk7XG5cbiAgQGluY2x1ZGUgc2hhZG93KCRib3gtc2hhZG93LCAkcXVlcnk6ICRxdWVyeSk7XG59XG5cbi8vL1xuLy8vIFJlcHJlc2VudHMgdGhlIGNvbmZpZ3VyYWJsZSB2YWx1ZXMgb2YgdGhlIGVsZXZhdGlvbiB0aGVtZS5cbi8vL1xuJF90aGVtZS12YWx1ZXM6IChcbiAgc2hhZG93OiBudWxsLFxuICBvdmVybGF5LW9wYWNpdHk6IG51bGwsXG4gIG92ZXJsYXktY29sb3I6IG51bGwsXG4pO1xuXG4vLy9cbi8vLyBBcHBsaWVzIHRoZSBzaGFkb3cgdGhlbWUgd2l0aCB0aGUgZ2l2ZW4gJHJlc29sdmVyIGZ1bmN0aW9uLlxuLy8vIEBwYXJhbSB7RnVuY3Rpb259ICRyZXNvbHZlciAtIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdmFsaWQgdGhlbWUgY29uZmlnLlxuLy8vICAgQHNlZSByZXNvbHZlciBmb3IgYW4gZXhhbXBsZSBhbmQgZXhwZWN0ZWQgYXJndW1lbnRzIGFuZCByZXR1cm4gdmFsdWUuXG4vLy8gQWNjZXB0cyB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIGtleXdvcmQgYXJnczpcbi8vLyBAcGFyYW0ge051bWJlcn0gJGVsZXZhdGlvbiAtIHRoZSBsZXZlbCBpbiB0aGUgZWxldmF0aW9uIHN5c3RlbS5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNoYWRvdy1jb2xvciAtIHRoZSBjb2xvciB1c2VkIGZvciB0aGUgc2hhZG93LlxuLy8vXG5AbWl4aW4gd2l0aC1yZXNvbHZlcigkcmVzb2x2ZXIsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksICRhcmdzLi4uKSB7XG4gIEBpZiAkcmVzb2x2ZXIge1xuICAgIEBpbmNsdWRlIF90aGVtZShtZXRhLmNhbGwoJHJlc29sdmVyLCAkYXJncy4uLiksICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBBcHBsaWVzIHRoZSBnaXZlbiB0aGVtZSB3aXRoIHZhbGlkYXRpb24uXG4vLy8gQHBhcmFtIHtNYXB9ICR0aGVtZSAtIEBzZWUgJF90aGVtZS12YWx1ZXMgZm9yIGFjY2VwdGVkIHRoZW1lIHByb3BlcnRpZXMuXG4vLy9cbkBtaXhpbiB0aGVtZSgkdGhlbWU6ICgpLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHRoZW1lLnZhbGlkYXRlLXRoZW1lKCRfdGhlbWUtdmFsdWVzLCAkdGhlbWUpO1xuICBAaW5jbHVkZSBfdGhlbWUoJHRoZW1lLCAkcXVlcnk6ICRxdWVyeSk7XG59XG5cbi8vL1xuLy8vIEFwcGxpZXMgdGhlIGdpdmVuIHRoZW1lLlxuLy8vIEBwYXJhbSB7TWFwfSAkdGhlbWUgLSBAc2VlICRfdGhlbWUtdmFsdWVzIGZvciBhY2NlcHRlZCB0aGVtZSBwcm9wZXJ0aWVzLlxuLy8vXG5AbWl4aW4gX3RoZW1lKCR0aGVtZTogKCksICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgc2hhZG93KG1hcC5nZXQoJHRoZW1lLCBzaGFkb3cpLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIG92ZXJsYXktb3BhY2l0eShtYXAuZ2V0KCR0aGVtZSwgb3ZlcmxheS1vcGFjaXR5KSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBvdmVybGF5LWNvbnRhaW5lci1jb2xvcihcbiAgICBtYXAuZ2V0KCR0aGVtZSwgb3ZlcmxheS1jb2xvciksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8vXG4vLy8gVHJhbnNmb3JtcyB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIHBhcmFtZXRlcnMgaW50byBhIHRoZW1lIGNvbmZpZy5cbi8vLyBAcGFyYW0ge051bWJlcn0gJGVsZXZhdGlvbiAtIHRoZSBsZXZlbCBvZiB0aGUgZWxldmF0aW9uIHN5c3RlbSBpbiBNYXRlcmlhbC5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNoYWRvdy1jb2xvciAtIHRoZSBjb2xvciB0byBiZSB1c2VkIGJ5IHRoZSBzaGFkb3cuXG4vLy8gQHJldHVybiB7TWFwfSBAc2VlICRfdGhlbWUtdmFsdWVzIGZvciBhY2NlcHRlZCB0aGVtZSBwcm9wZXJ0aWVzLlxuLy8vXG5AZnVuY3Rpb24gcmVzb2x2ZXIoJGFyZ3MuLi4pIHtcbiAgJG9wdHM6IG1ldGEua2V5d29yZHMoJGFyZ3MpO1xuICAkZWxldmF0aW9uOiBtYXAuZ2V0KCRvcHRzLCBlbGV2YXRpb24pO1xuICAkc2hhZG93LWNvbG9yOiBtYXAuZ2V0KCRvcHRzLCBzaGFkb3ctY29sb3IpO1xuICBAaWYgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJGVsZXZhdGlvbikge1xuICAgIEByZXR1cm4gX3Jlc29sdmUtY3VzdG9tLXByb3BzKCRlbGV2YXRpb24sICRzaGFkb3ctY29sb3IpO1xuICB9XG5cbiAgQHJldHVybiAoc2hhZG93OiBfc2hhZG93KCRlbGV2YXRpb24sICRzaGFkb3ctY29sb3IpKTtcbn1cblxuQGZ1bmN0aW9uIF9yZXNvbHZlLWN1c3RvbS1wcm9wcygkZWxldmF0aW9uLCAkc2hhZG93LWNvbG9yKSB7XG4gICRmYWxsYmFjay1kcDogY3VzdG9tLXByb3BlcnRpZXMuZ2V0LWZhbGxiYWNrKCRlbGV2YXRpb24pO1xuICAkZmFsbGJhY2stc2hhZG93LWNvbG9yOiBjdXN0b20tcHJvcGVydGllcy5nZXQtZmFsbGJhY2soJHNoYWRvdy1jb2xvcik7XG4gICRzaGFkb3c6IGN1c3RvbS1wcm9wZXJ0aWVzLnNldC1mYWxsYmFjayhcbiAgICAkZWxldmF0aW9uLFxuICAgIF9zaGFkb3coJGZhbGxiYWNrLWRwLCAkZmFsbGJhY2stc2hhZG93LWNvbG9yKVxuICApO1xuICBAcmV0dXJuIChzaGFkb3c6ICRzaGFkb3cpO1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdAbWF0ZXJpYWwvZWxldmF0aW9uL21peGlucycgYXMgZWxldmF0aW9uLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzJyBhcyBhbmltYXRpb24tdmFyaWFibGVzO1xuQHVzZSAnQG1hdGVyaWFsL3J0bC9ydGwnO1xuQHVzZSAnQG1hdGVyaWFsL3R5cG9ncmFwaHkvdHlwb2dyYXBoeSc7XG5AdXNlICcuL21peGlucyc7XG5AdXNlICcuL3ZhcmlhYmxlcyc7XG5cbi8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIHRvcC1hcHAtYmFyXG4ubWRjLXRvcC1hcHAtYmFyIHtcbiAgQGluY2x1ZGUgbWl4aW5zLmZpbGwtY29sb3ItYWNjZXNzaWJsZShwcmltYXJ5KTtcbiAgQGluY2x1ZGUgbWl4aW5zLmljb24taW5rLWNvbG9yKG9uLXByaW1hcnkpO1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogMTAwJTtcbiAgei1pbmRleDogNDtcblxuICAmX19yb3cge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiB2YXJpYWJsZXMuJHJvdy1oZWlnaHQ7XG4gIH1cblxuICAmX19zZWN0aW9uIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBmbGV4OiAxIDEgYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBwYWRkaW5nOiB2YXJpYWJsZXMuJHNlY3Rpb24tdmVydGljYWwtcGFkZGluZ1xuICAgICAgdmFyaWFibGVzLiRzZWN0aW9uLWhvcml6b250YWwtcGFkZGluZztcbiAgICB6LWluZGV4OiAxO1xuXG4gICAgJi0tYWxpZ24tc3RhcnQge1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgb3JkZXI6IC0xO1xuICAgIH1cblxuICAgICYtLWFsaWduLWVuZCB7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgb3JkZXI6IDE7XG4gICAgfVxuICB9XG5cbiAgJl9fdGl0bGUge1xuICAgIEBpbmNsdWRlIHR5cG9ncmFwaHkudHlwb2dyYXBoeShoZWFkbGluZTYpO1xuICAgIEBpbmNsdWRlIHJ0bC5yZWZsZXhpdmUtYm94KHBhZGRpbmcsIGxlZnQsIHZhcmlhYmxlcy4kdGl0bGUtbGVmdC1wYWRkaW5nKTtcblxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB6LWluZGV4OiAxO1xuICB9XG59XG5cbkBhdC1yb290IHtcbiAgQGluY2x1ZGUgbWl4aW5zLnNob3J0LXNoYXBlLXJhZGl1cygyNHB4KTtcbn1cblxuLm1kYy10b3AtYXBwLWJhci0tc2hvcnQge1xuICB0b3A6IDA7XG4gIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gIHJpZ2h0OiBhdXRvO1xuICBAaW5jbHVkZSBydGwuaWdub3JlLW5leHQtbGluZSgpO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgdHJhbnNpdGlvbjogd2lkdGggMjUwbXMgYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xuXG4gIEBpbmNsdWRlIHJ0bC5ydGwge1xuICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgcmlnaHQ6IDA7XG4gICAgQGluY2x1ZGUgcnRsLmlnbm9yZS1uZXh0LWxpbmUoKTtcbiAgICBsZWZ0OiBhdXRvO1xuICB9XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fcm93IHtcbiAgICBoZWlnaHQ6IHZhcmlhYmxlcy4kbW9iaWxlLXJvdy1oZWlnaHQ7XG4gIH1cblxuICAubWRjLXRvcC1hcHAtYmFyX19zZWN0aW9uIHtcbiAgICBwYWRkaW5nOiB2YXJpYWJsZXMuJG1vYmlsZS1zZWN0aW9uLXBhZGRpbmc7XG4gIH1cblxuICAubWRjLXRvcC1hcHAtYmFyX190aXRsZSB7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAyMDBtc1xuICAgICAgYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuLm1kYy10b3AtYXBwLWJhci0tc2hvcnQtY29sbGFwc2VkIHtcbiAgQGluY2x1ZGUgZWxldmF0aW9uLW1peGlucy5lbGV2YXRpb24oNCk7XG5cbiAgd2lkdGg6IHZhcmlhYmxlcy4kc2hvcnQtY29sbGFwc2VkLXdpZHRoO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAzMDBtcyBhbmltYXRpb24tdmFyaWFibGVzLiRzdGFuZGFyZC1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fdGl0bGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICAubWRjLXRvcC1hcHAtYmFyX19hY3Rpb24taXRlbSB7XG4gICAgdHJhbnNpdGlvbjogcGFkZGluZyAxNTBtc1xuICAgICAgYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xuICB9XG59XG5cbi5tZGMtdG9wLWFwcC1iYXItLXNob3J0LWNvbGxhcHNlZC5tZGMtdG9wLWFwcC1iYXItLXNob3J0LWhhcy1hY3Rpb24taXRlbSB7XG4gIHdpZHRoOiB2YXJpYWJsZXMuJHNob3J0LWNvbGxhcHNlZC13aWR0aCAqIDI7XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fc2VjdGlvbi0tYWxpZ24tZW5kIHtcbiAgICBAaW5jbHVkZSBydGwucmVmbGV4aXZlLWJveChwYWRkaW5nLCByaWdodCwgMTJweCk7XG4gIH1cbn1cblxuLm1kYy10b3AtYXBwLWJhci0tZGVuc2Uge1xuICAubWRjLXRvcC1hcHAtYmFyX19yb3cge1xuICAgIGhlaWdodDogdmFyaWFibGVzLiRkZW5zZS1yb3ctaGVpZ2h0O1xuICB9XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fc2VjdGlvbiB7XG4gICAgcGFkZGluZzogMCB2YXJpYWJsZXMuJGRlbnNlLXNlY3Rpb24taG9yaXpvbnRhbC1wYWRkaW5nO1xuICB9XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fdGl0bGUge1xuICAgIEBpbmNsdWRlIHJ0bC5yZWZsZXhpdmUtYm94KFxuICAgICAgcGFkZGluZyxcbiAgICAgIGxlZnQsXG4gICAgICB2YXJpYWJsZXMuJGRlbnNlLXRpdGxlLWxlZnQtcGFkZGluZ1xuICAgICk7XG4gIH1cbn1cblxuLm1kYy10b3AtYXBwLWJhci0tcHJvbWluZW50IHtcbiAgLm1kYy10b3AtYXBwLWJhcl9fcm93IHtcbiAgICBoZWlnaHQ6IHZhcmlhYmxlcy4kcHJvbWluZW50LXJvdy1oZWlnaHQ7XG4gIH1cblxuICAubWRjLXRvcC1hcHAtYmFyX190aXRsZSB7XG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gICAgcGFkZGluZy1ib3R0b206IHZhcmlhYmxlcy4kcHJvbWluZW50LXRpdGxlLWJvdHRvbS1wYWRkaW5nO1xuICB9XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fYWN0aW9uLWl0ZW0sXG4gIC5tZGMtdG9wLWFwcC1iYXJfX25hdmlnYXRpb24taWNvbiB7XG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgfVxufVxuXG4ubWRjLXRvcC1hcHAtYmFyLS1maXhlZCB7XG4gIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjAwbXMgbGluZWFyO1xufVxuXG4ubWRjLXRvcC1hcHAtYmFyLS1maXhlZC1zY3JvbGxlZCB7XG4gIEBpbmNsdWRlIGVsZXZhdGlvbi1taXhpbnMuZWxldmF0aW9uKDQpO1xuXG4gIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjAwbXMgbGluZWFyO1xufVxuXG4vLyBTcGVjaWZpYyBzdHlsZXMgZm9yIGRlbnNlIGFuZCBwcm9taW5lbnQgc3R5bGVkIHRvcCBhcHAgYmFyXG4ubWRjLXRvcC1hcHAtYmFyLS1kZW5zZS5tZGMtdG9wLWFwcC1iYXItLXByb21pbmVudCB7XG4gIC5tZGMtdG9wLWFwcC1iYXJfX3JvdyB7XG4gICAgaGVpZ2h0OiB2YXJpYWJsZXMuJGRlbnNlLXJvdy1oZWlnaHQgKiAyO1xuICB9XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fc2VjdGlvbiB7XG4gICAgcGFkZGluZzogMCB2YXJpYWJsZXMuJHNlY3Rpb24taG9yaXpvbnRhbC1wYWRkaW5nO1xuICB9XG5cbiAgLm1kYy10b3AtYXBwLWJhcl9fdGl0bGUge1xuICAgIEBpbmNsdWRlIHJ0bC5yZWZsZXhpdmUtYm94KHBhZGRpbmcsIGxlZnQsIHZhcmlhYmxlcy4kdGl0bGUtbGVmdC1wYWRkaW5nKTtcblxuICAgIHBhZGRpbmctYm90dG9tOiB2YXJpYWJsZXMuJGRlbnNlLXByb21pbmVudC10aXRsZS1ib3R0b20tcGFkZGluZztcbiAgfVxufVxuXG4ubWRjLXRvcC1hcHAtYmFyLS1maXhlZC1hZGp1c3Qge1xuICBwYWRkaW5nLXRvcDogdmFyaWFibGVzLiRyb3ctaGVpZ2h0O1xufVxuXG4ubWRjLXRvcC1hcHAtYmFyLS1kZW5zZS1maXhlZC1hZGp1c3Qge1xuICBwYWRkaW5nLXRvcDogdmFyaWFibGVzLiRkZW5zZS1yb3ctaGVpZ2h0O1xufVxuXG4ubWRjLXRvcC1hcHAtYmFyLS1zaG9ydC1maXhlZC1hZGp1c3Qge1xuICBwYWRkaW5nLXRvcDogdmFyaWFibGVzLiRtb2JpbGUtcm93LWhlaWdodDtcbn1cblxuLm1kYy10b3AtYXBwLWJhci0tcHJvbWluZW50LWZpeGVkLWFkanVzdCB7XG4gIHBhZGRpbmctdG9wOiB2YXJpYWJsZXMuJHByb21pbmVudC1yb3ctaGVpZ2h0O1xufVxuXG4ubWRjLXRvcC1hcHAtYmFyLS1kZW5zZS1wcm9taW5lbnQtZml4ZWQtYWRqdXN0IHtcbiAgcGFkZGluZy10b3A6IHZhcmlhYmxlcy4kZGVuc2Utcm93LWhlaWdodCAqIDI7XG59XG5cbi8vIE1vYmlsZSBTdHlsZXNcbkBpbmNsdWRlIG1peGlucy5tb2JpbGUtYnJlYWtwb2ludF87XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVybiAtLVxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG5cbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXMnIGFzIGFuaW1hdGlvbi12YXJpYWJsZXM7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZS10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9zaGFwZS9taXhpbnMnIGFzIHNoYXBlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9zaGFwZS9mdW5jdGlvbnMnO1xuQHVzZSAnLi92YXJpYWJsZXMnO1xuQHVzZSAnQG1hdGVyaWFsL3J0bC9ydGwnO1xuXG4vL1xuLy8gUHVibGljXG4vL1xuXG5AbWl4aW4gaW5rLWNvbG9yKCRjb2xvcikge1xuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgJGNvbG9yKTtcbn1cblxuQG1peGluIGZpbGwtY29sb3IoJGNvbG9yKSB7XG4gIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJhY2tncm91bmQtY29sb3IsICRjb2xvcik7XG59XG5cbkBtaXhpbiBmaWxsLWNvbG9yLWFjY2Vzc2libGUoJGNvbG9yKSB7XG4gIEBpbmNsdWRlIGZpbGwtY29sb3IoJGNvbG9yKTtcbiAgQGluY2x1ZGUgaW5rLWNvbG9yKHRoZW1lLWNvbG9yLmFjY2Vzc2libGUtaW5rLWNvbG9yKCRjb2xvcikpO1xufVxuXG5AbWl4aW4gaWNvbi1pbmstY29sb3IoJGNvbG9yKSB7XG4gIC5tZGMtdG9wLWFwcC1iYXJfX2FjdGlvbi1pdGVtLFxuICAubWRjLXRvcC1hcHAtYmFyX19uYXZpZ2F0aW9uLWljb24ge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGNvbG9yLCAkY29sb3IpO1xuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMoJGNvbG9yKTtcbiAgfVxufVxuXG5AbWl4aW4gc2hvcnQtc2hhcGUtcmFkaXVzKCRyYWRpdXMsICRydGwtcmVmbGV4aXZlOiB0cnVlKSB7XG4gIEBpZiBtZXRhLnR5cGUtb2YoJHJhZGl1cykgPT0gJ2xpc3QnIGFuZCBsaXN0Lmxlbmd0aCgkcmFkaXVzKSA+IDEge1xuICAgIEBlcnJvciBcIkludmFsaWQgcmFkaXVzOiAnI3skcmFkaXVzfScgY29tcG9uZW50IGRvZXNuJ3QgYWxsb3cgY3VzdG9taXppbmcgYWxsIGNvcm5lcnNcIjtcbiAgfVxuXG4gICRyYWRpdXM6IDAgMCAkcmFkaXVzIDA7XG5cbiAgJHNlbGVjdG9yOiBpZihcbiAgICAmLFxuICAgICcmLm1kYy10b3AtYXBwLWJhci0tc2hvcnQtY29sbGFwc2VkJyxcbiAgICAnLm1kYy10b3AtYXBwLWJhci0tc2hvcnQtY29sbGFwc2VkJ1xuICApO1xuXG4gICN7JHNlbGVjdG9yfSB7XG4gICAgQGluY2x1ZGUgc2hhcGUtbWl4aW5zLnJhZGl1cyhcbiAgICAgICRyYWRpdXMsXG4gICAgICAkcnRsLXJlZmxleGl2ZSxcbiAgICAgICRjb21wb25lbnQtaGVpZ2h0OiB2YXJpYWJsZXMuJGRlbnNlLXJvdy1oZWlnaHRcbiAgICApO1xuICB9XG59XG5cbi8vXG4vLyBQcml2YXRlXG4vL1xuXG5AbWl4aW4gbW9iaWxlLWJyZWFrcG9pbnRfKCRtb2JpbGUtYnJlYWtwb2ludDogdmFyaWFibGVzLiRtb2JpbGUtYnJlYWtwb2ludCkge1xuICBAbWVkaWEgKG1heC13aWR0aDogJG1vYmlsZS1icmVha3BvaW50KSB7XG4gICAgLm1kYy10b3AtYXBwLWJhcl9fcm93IHtcbiAgICAgIGhlaWdodDogdmFyaWFibGVzLiRtb2JpbGUtcm93LWhlaWdodDtcbiAgICB9XG5cbiAgICAubWRjLXRvcC1hcHAtYmFyX19zZWN0aW9uIHtcbiAgICAgIHBhZGRpbmc6IHZhcmlhYmxlcy4kbW9iaWxlLXNlY3Rpb24tcGFkZGluZztcbiAgICB9XG5cbiAgICAubWRjLXRvcC1hcHAtYmFyLS1zaG9ydCB7XG4gICAgICB0cmFuc2l0aW9uOiB3aWR0aCAyMDBtc1xuICAgICAgICBhbmltYXRpb24tdmFyaWFibGVzLiRzdGFuZGFyZC1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG4gICAgfVxuXG4gICAgLm1kYy10b3AtYXBwLWJhci0tc2hvcnQtY29sbGFwc2VkIHtcbiAgICAgIHRyYW5zaXRpb246IHdpZHRoIDI1MG1zXG4gICAgICAgIGFuaW1hdGlvbi12YXJpYWJsZXMuJHN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcblxuICAgICAgLm1kYy10b3AtYXBwLWJhcl9fc2VjdGlvbi0tYWxpZ24tZW5kIHtcbiAgICAgICAgQGluY2x1ZGUgcnRsLnJlZmxleGl2ZS1ib3goXG4gICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICByaWdodCxcbiAgICAgICAgICB2YXJpYWJsZXMuJHNob3J0LWNvbGxhcHNlZC1yaWdodC1pY29uLXBhZGRpbmdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWRjLXRvcC1hcHAtYmFyLS1wcm9taW5lbnQge1xuICAgICAgLm1kYy10b3AtYXBwLWJhcl9fdGl0bGUge1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogdmFyaWFibGVzLiRwcm9taW5lbnQtbW9iaWxlLXRpdGxlLWJvdHRvbS1wYWRkaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tZGMtdG9wLWFwcC1iYXItLWZpeGVkLWFkanVzdCB7XG4gICAgICBwYWRkaW5nLXRvcDogdmFyaWFibGVzLiRtb2JpbGUtcm93LWhlaWdodDtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnc2Fzczpjb2xvcic7XG5AdXNlICdzYXNzOm1hcCc7XG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL2Z1bmN0aW9ucycgYXMgZnVuY3Rpb25zMjtcbkB1c2UgJ0BtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzJyBhcyB2YXJpYWJsZXMyO1xuQHVzZSAnQG1hdGVyaWFsL2Jhc2UvbWl4aW5zJyBhcyBiYXNlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3NzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jdXN0b20tcHJvcGVydGllcyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL2tleXMnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3NoYWRvdy1kb20nO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lLWNvbG9yJztcblxuJGN1c3RvbS1wcm9wZXJ0eS1wcmVmaXg6ICdyaXBwbGUnO1xuXG4kZmFkZS1pbi1kdXJhdGlvbjogNzVtcyAhZGVmYXVsdDtcbiRmYWRlLW91dC1kdXJhdGlvbjogMTUwbXMgIWRlZmF1bHQ7XG4kdHJhbnNsYXRlLWR1cmF0aW9uOiAyMjVtcyAhZGVmYXVsdDtcbiRzdGF0ZXMtd2FzaC1kdXJhdGlvbjogMTVtcyAhZGVmYXVsdDtcblxuLy8gTm90ZXMgb24gc3RhdGVzOlxuLy8gKiBmb2N1cyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgaG92ZXIgKGkuZS4gaWYgYW4gZWxlbWVudCBpcyBib3RoIGZvY3VzZWQgYW5kIGhvdmVyZWQsIG9ubHkgZm9jdXMgdmFsdWUgYXBwbGllcylcbi8vICogcHJlc3Mgc3RhdGUgYXBwbGllcyB0byBhIHNlcGFyYXRlIHBzZXVkby1lbGVtZW50LCBzbyBpdCBoYXMgYW4gYWRkaXRpdmUgZWZmZWN0IG9uIHRvcCBvZiBvdGhlciBzdGF0ZXNcbi8vICogc2VsZWN0ZWQvYWN0aXZhdGVkIGFyZSBhcHBsaWVkIGFkZGl0aXZlbHkgdG8gaG92ZXIvZm9jdXMgdmlhIGNhbGN1bGF0aW9ucyBhdCBwcmVwcm9jZXNzaW5nIHRpbWVcblxuJGRhcmstaW5rLW9wYWNpdGllczogKFxuICBob3ZlcjogMC4wNCxcbiAgZm9jdXM6IDAuMTIsXG4gIHByZXNzOiAwLjEyLFxuICBzZWxlY3RlZDogMC4wOCxcbiAgYWN0aXZhdGVkOiAwLjEyLFxuKSAhZGVmYXVsdDtcblxuJGxpZ2h0LWluay1vcGFjaXRpZXM6IChcbiAgaG92ZXI6IDAuMDgsXG4gIGZvY3VzOiAwLjI0LFxuICBwcmVzczogMC4yNCxcbiAgc2VsZWN0ZWQ6IDAuMTYsXG4gIGFjdGl2YXRlZDogMC4yNCxcbikgIWRlZmF1bHQ7XG5cbi8vIExlZ2FjeVxuXG4kcHJlc3NlZC1kYXJrLWluay1vcGFjaXR5OiAwLjE2ICFkZWZhdWx0O1xuJHByZXNzZWQtbGlnaHQtaW5rLW9wYWNpdHk6IDAuMzIgIWRlZmF1bHQ7XG5cbi8vIFN0YXRlIHNlbGVjdG9yIHZhcmlhYmxlcyB1c2VkIGZvciBzdGF0ZSBzZWxlY3RvciBtaXhpbnMgYmVsb3cuXG4kX2hvdmVyLXNlbGVjdG9yOiAnJjpob3Zlcic7XG4kX2ZvY3VzLXNlbGVjdG9yOiAnJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQsICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1cyc7XG4kX2FjdGl2ZS1zZWxlY3RvcjogJyY6bm90KDpkaXNhYmxlZCk6YWN0aXZlJztcblxuJGxpZ2h0LXRoZW1lOiAoXG4gIGZvY3VzLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kb24tc3VyZmFjZSxcbiAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogbWFwLmdldCgkZGFyay1pbmstb3BhY2l0aWVzLCBmb2N1cyksXG4gIGhvdmVyLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kb24tc3VyZmFjZSxcbiAgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eTogbWFwLmdldCgkZGFyay1pbmstb3BhY2l0aWVzLCBob3ZlciksXG4gIHByZXNzZWQtc3RhdGUtbGF5ZXItY29sb3I6IHRoZW1lLWNvbG9yLiRvbi1zdXJmYWNlLFxuICBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHk6IG1hcC5nZXQoJGRhcmstaW5rLW9wYWNpdGllcywgcHJlc3MpLFxuKTtcblxuQG1peGluIHRoZW1lKCR0aGVtZSkge1xuICBAaW5jbHVkZSBrZXlzLmRlY2xhcmUtY3VzdG9tLXByb3BlcnRpZXMoXG4gICAgJHRoZW1lLFxuICAgICRwcmVmaXg6ICRjdXN0b20tcHJvcGVydHktcHJlZml4XG4gICk7XG5cbiAgQGlmIHNoYWRvdy1kb20uJGNzcy1zZWxlY3Rvci1mYWxsYmFjay1kZWNsYXJhdGlvbnMge1xuICAgIC5tZGMtcmlwcGxlLXN1cmZhY2Uge1xuICAgICAgQGluY2x1ZGUgdGhlbWUtc3R5bGVzKCR0aGVtZSk7XG4gICAgfVxuICB9XG59XG5cbiRfcmlwcGxlLXRoZW1lOiAoXG4gIGhvdmVyLXN0YXRlLWxheWVyLWNvbG9yOiBudWxsLFxuICBmb2N1cy1zdGF0ZS1sYXllci1jb2xvcjogbnVsbCxcbiAgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvcjogbnVsbCxcbiAgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgcHJlc3NlZC1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuKTtcblxuQG1peGluIHRoZW1lLXN0eWxlcygkdGhlbWUsICRyaXBwbGUtdGFyZ2V0OiAnJicpIHtcbiAgJHRoZW1lOiBrZXlzLmNyZWF0ZS10aGVtZS1wcm9wZXJ0aWVzKFxuICAgICR0aGVtZSxcbiAgICAkcHJlZml4OiAkY3VzdG9tLXByb3BlcnR5LXByZWZpeFxuICApO1xuXG4gIC8vIFRPRE8oYi8xOTEyOTg3OTYpOiBTdXBwb3J0IHN0YXRlcyBsYXllciBjb2xvciBmb3IgZXZlcnkgaW50ZXJhY3RpdmUgc3RhdGVzLlxuICAvLyBVc2Ugb25seSBob3ZlciBzdGF0ZSBsYXllciBjb2xvciwgaWdub3JpbmcgZm9jdXMgYW5kIHByZXNzZWQgY29sb3IuXG4gIEBpbmNsdWRlIGludGVybmFsLXRoZW1lLXN0eWxlcygkdGhlbWUsICRyaXBwbGUtdGFyZ2V0KTtcbn1cblxuQG1peGluIGludGVybmFsLXRoZW1lLXN0eWxlcygkdGhlbWUsICRyaXBwbGUtdGFyZ2V0OiAnJicpIHtcbiAgQGluY2x1ZGUgdGhlbWUudmFsaWRhdGUtdGhlbWUta2V5cygkX3JpcHBsZS10aGVtZSwgJHRoZW1lKTtcblxuICBAaW5jbHVkZSBzdGF0ZXMtYmFzZS1jb2xvcihcbiAgICBtYXAuZ2V0KCR0aGVtZSwgaG92ZXItc3RhdGUtbGF5ZXItY29sb3IpLFxuICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldFxuICApO1xuICBAaW5jbHVkZSBzdGF0ZXMtaG92ZXItb3BhY2l0eShcbiAgICBtYXAuZ2V0KCR0aGVtZSwgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eSksXG4gICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICk7XG4gIEBpbmNsdWRlIHN0YXRlcy1mb2N1cy1vcGFjaXR5KFxuICAgIG1hcC5nZXQoJHRoZW1lLCBmb2N1cy1zdGF0ZS1sYXllci1vcGFjaXR5KSxcbiAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgKTtcbiAgQGluY2x1ZGUgc3RhdGVzLXByZXNzLW9wYWNpdHkoXG4gICAgbWFwLmdldCgkdGhlbWUsIHByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eSksXG4gICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICk7XG59XG5cbkBtaXhpbiBzdGF0ZXMtYmFzZS1jb2xvcihcbiAgJGNvbG9yLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGlmICRjb2xvciB7XG4gICAgQGlmIG5vdCBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcCgkY29sb3IpIHtcbiAgICAgICRjb2xvcjogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKFxuICAgICAgICByaXBwbGUtY29sb3IsXG4gICAgICAgIHRoZW1lLWNvbG9yLmdldC1jdXN0b20tcHJvcGVydHkoJGNvbG9yKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJhY2tncm91bmQtY29sb3IsICRjb2xvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgcmlwcGxlIG9wYWNpdGllcyBpbiBgaG92ZXJgLCBgZm9jdXNgLCBvciBgcHJlc3NgIHN0YXRlc1xuLy8vIEBwYXJhbSB7bWFwfSAkb3BhY2l0eS1tYXAgLSBtYXAgc3BlY2lmeWluZyBjdXN0b20gb3BhY2l0eSBvZiB6ZXJvIG9yIG1vcmUgc3RhdGVzXG4vLy8gQHBhcmFtIHtib29sfSAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCAtIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBjb250YWlucyBhIGZvY3VzYWJsZSBlbGVtZW50IGluIHRoZSByb290XG4vLy8gQHBhcmFtIHtzdHJpbmd9ICRyaXBwbGUtdGFyZ2V0IC0gdGhlIG9wdGlvbmFsIHNlbGVjdG9yIGZvciB0aGUgcmlwcGxlIGVsZW1lbnRcbi8vL1xuQG1peGluIHN0YXRlcy1vcGFjaXRpZXMoXG4gICRvcGFjaXR5LW1hcDogKCksXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJyxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIC8vIEVuc3VyZSBzdWZmaWNpZW50IHNwZWNpZmljaXR5IHRvIG92ZXJyaWRlIGJhc2Ugc3RhdGUgb3BhY2l0aWVzXG4gIEBpZiBtYXAuZ2V0KCRvcGFjaXR5LW1hcCwgaG92ZXIpIHtcbiAgICBAaW5jbHVkZSBzdGF0ZXMtaG92ZXItb3BhY2l0eShcbiAgICAgIG1hcC5nZXQoJG9wYWNpdHktbWFwLCBob3ZlciksXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXQsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cblxuICBAaWYgbWFwLmdldCgkb3BhY2l0eS1tYXAsIGZvY3VzKSB7XG4gICAgQGluY2x1ZGUgc3RhdGVzLWZvY3VzLW9wYWNpdHkoXG4gICAgICBtYXAuZ2V0KCRvcGFjaXR5LW1hcCwgZm9jdXMpLFxuICAgICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0LFxuICAgICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG5cbiAgQGlmIG1hcC5nZXQoJG9wYWNpdHktbWFwLCBwcmVzcykge1xuICAgIEBpbmNsdWRlIHN0YXRlcy1wcmVzcy1vcGFjaXR5KFxuICAgICAgbWFwLmdldCgkb3BhY2l0eS1tYXAsIHByZXNzKSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gc3RhdGVzLWhvdmVyLW9wYWNpdHkoXG4gICRvcGFjaXR5LFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGlmICRvcGFjaXR5IGFuZCBub3QgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJG9wYWNpdHkpIHtcbiAgICAkb3BhY2l0eTogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKHJpcHBsZS1ob3Zlci1vcGFjaXR5LCAkb3BhY2l0eSk7XG4gIH1cblxuICAvLyBCYWNrZ3JvdW5kIHdhc2ggc3R5bGVzLCBmb3IgYm90aCBDU1Mtb25seSBhbmQgdXBncmFkZWQgc3RhdGVmdWwgc3VyZmFjZXNcbiAgJjpob3ZlcixcbiAgJi5tZGMtcmlwcGxlLXN1cmZhY2UtLWhvdmVyIHtcbiAgICBAaW5jbHVkZSBzdGF0ZXMtYmFja2dyb3VuZC1zZWxlY3RvcigkcmlwcGxlLXRhcmdldCkge1xuICAgICAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShvcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBzdGF0ZXMtZm9jdXMtb3BhY2l0eShcbiAgJG9wYWNpdHksXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xuKSB7XG4gIC8vIEZvY3VzIG92ZXJyaWRlcyBob3ZlciBieSByZXVzaW5nIHRoZSA6OmJlZm9yZSBwc2V1ZG8tZWxlbWVudC5cbiAgLy8gOmZvY3VzLXdpdGhpbiBnZW5lcmFsbHkgd29ya3Mgb24gbm9uLU1TIGJyb3dzZXJzIGFuZCBtYXRjaGVzIHdoZW4gYSAqY2hpbGQqIG9mIHRoZSBlbGVtZW50IGhhcyBmb2N1cy5cbiAgLy8gSXQgaXMgdXNlZnVsIGZvciBjYXNlcyB3aGVyZSBhIGNvbXBvbmVudCBoYXMgYSBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gdGhlIHJvb3Qgbm9kZSwgZS5nLiB0ZXh0IGZpZWxkLFxuICAvLyBidXQgdW5kZXNpcmFibGUgaW4gZ2VuZXJhbCBpbiBjYXNlIG9mIG5lc3RlZCBzdGF0ZWZ1bCBjb21wb25lbnRzLlxuICAvLyBXZSB1c2UgYSBtb2RpZmllciBjbGFzcyBmb3IgSlMtZW5hYmxlZCBzdXJmYWNlcyB0byBzdXBwb3J0IGFsbCB1c2UgY2FzZXMgaW4gYWxsIGJyb3dzZXJzLlxuICBAaWYgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQge1xuICAgIC8vIEpTLWVuYWJsZWQgc2VsZWN0b3JzLlxuICAgICYubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkLFxuICAgICYubWRjLXJpcHBsZS11cGdyYWRlZDpmb2N1cy13aXRoaW4sXG4gICAgLy8gQ1NTLW9ubHkgc2VsZWN0b3JzLlxuICAgICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1cyxcbiAgICAmOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXMtd2l0aGluIHtcbiAgICAgIEBpbmNsdWRlIHN0YXRlcy1iYWNrZ3JvdW5kLXNlbGVjdG9yKCRyaXBwbGUtdGFyZ2V0KSB7XG4gICAgICAgIEBpbmNsdWRlIHN0YXRlcy1mb2N1cy1vcGFjaXR5LXByb3BlcnRpZXNfKFxuICAgICAgICAgICRvcGFjaXR5OiAkb3BhY2l0eSxcbiAgICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgLy8gSlMtZW5hYmxlZCBzZWxlY3RvcnMuXG4gICAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQsXG4gICAgLy8gQ1NTLW9ubHkgc2VsZWN0b3JzLlxuICAgICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1cyB7XG4gICAgICBAaW5jbHVkZSBzdGF0ZXMtYmFja2dyb3VuZC1zZWxlY3RvcigkcmlwcGxlLXRhcmdldCkge1xuICAgICAgICBAaW5jbHVkZSBzdGF0ZXMtZm9jdXMtb3BhY2l0eS1wcm9wZXJ0aWVzXyhcbiAgICAgICAgICAkb3BhY2l0eTogJG9wYWNpdHksXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHN0YXRlcy1mb2N1cy1vcGFjaXR5LXByb3BlcnRpZXNfKCRvcGFjaXR5LCAkcXVlcnkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaWYgJG9wYWNpdHkge1xuICAgIEBpZiBub3QgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJG9wYWNpdHkpIHtcbiAgICAgICRvcGFjaXR5OiBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUocmlwcGxlLWZvY3VzLW9wYWNpdHksICRvcGFjaXR5KTtcbiAgICB9XG5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBkdXJhdGlvbiBpcyBvbmx5IGVmZmVjdGl2ZSBvbiBmb2N1cywgbm90IGJsdXJcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogNzVtcztcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShvcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBzdGF0ZXMtcHJlc3Mtb3BhY2l0eShcbiAgJG9wYWNpdHksXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcbikge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAvLyBTdHlsZXMgZm9yIG5vbi11cGdyYWRlZCAoQ1NTLW9ubHkpIHN0YXRlZnVsIHN1cmZhY2VzXG5cbiAgQGlmICRvcGFjaXR5IHtcbiAgICBAaWYgbm90IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRvcGFjaXR5KSB7XG4gICAgICAkb3BhY2l0eTogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKHJpcHBsZS1wcmVzcy1vcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgfVxuXG4gICAgJjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpIHtcbiAgICAgIC8vIEFwcGx5IHByZXNzIGFkZGl0aXZlbHkgYnkgdXNpbmcgdGhlIDo6YWZ0ZXIgcHNldWRvLWVsZW1lbnRcbiAgICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAkZmFkZS1vdXQtZHVyYXRpb24gbGluZWFyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogJGZhZGUtaW4tZHVyYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxuICAgICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KG9wYWNpdHksICRvcGFjaXR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1kYy1yaXBwbGUtdXBncmFkZWQge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgICAvLyBVcGdyYWRlZCByaXBwbGUgc2hvdWxkIGFsd2F5cyBlbWl0IGN1c3RvbSBwcm9wZXJ0eSwgcmVnYXJkbGVzcyBvZlxuICAgICAgICAvLyBjb25maWd1cmF0aW9uLCBzaW5jZSByaXBwbGUgaXRzZWxmIGZlYXR1cmUgZGV0ZWN0cyBjdXN0b20gcHJvcGVydHlcbiAgICAgICAgLy8gc3VwcG9ydCBhdCBydW50aW1lLlxuICAgICAgICBAaW5jbHVkZSBjdXN0b20tcHJvcGVydGllcy5jb25maWd1cmUoJGVtaXQtY3VzdG9tLXByb3BlcnRpZXM6IHRydWUpIHtcbiAgICAgICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAgICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZShyaXBwbGUtZmctb3BhY2l0eSwgJG9wYWNpdHkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBTaW1wbGUgbWl4aW4gZm9yIGJhc2Ugc3RhdGVzIHdoaWNoIGF1dG9tYXRpY2FsbHkgc2VsZWN0cyBvcGFjaXR5IHZhbHVlcyBiYXNlZCBvbiB3aGV0aGVyIHRoZSBpbmsgY29sb3IgaXNcbi8vIGxpZ2h0IG9yIGRhcmsuXG5AbWl4aW4gc3RhdGVzKFxuICAkY29sb3I6IHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJyxcbiAgJG9wYWNpdHktbWFwOiBudWxsXG4pIHtcbiAgQGluY2x1ZGUgc3RhdGVzLWludGVyYWN0aW9uc18oXG4gICAgJGNvbG9yOiAkY29sb3IsXG4gICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcbiAgICAkb3BhY2l0eS1tYXA6ICRvcGFjaXR5LW1hcFxuICApO1xufVxuXG4vLyBTaW1wbGUgbWl4aW4gZm9yIGFjdGl2YXRlZCBzdGF0ZXMgd2hpY2ggYXV0b21hdGljYWxseSBzZWxlY3RzIG9wYWNpdHkgdmFsdWVzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGluayBjb2xvciBpc1xuLy8gbGlnaHQgb3IgZGFyay5cbkBtaXhpbiBzdGF0ZXMtYWN0aXZhdGVkKFxuICAkY29sb3IsXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xuKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuICAkYWN0aXZhdGVkLW9wYWNpdHk6IHN0YXRlcy1vcGFjaXR5KCRjb2xvciwgYWN0aXZhdGVkKTtcblxuICAmLS1hY3RpdmF0ZWQge1xuICAgIC8vIFN0eWxlbGludCBzZWVtcyB0byB0aGluayB0aGF0ICcmJyBxdWFsaWZpZXMgYXMgYSB0eXBlIHNlbGVjdG9yIGhlcmU/XG4gICAgQGluY2x1ZGUgc3RhdGVzLWJhY2tncm91bmQtc2VsZWN0b3IoJHJpcHBsZS10YXJnZXQpIHtcbiAgICAgIC8vIE9wYWNpdHkgZmFsbHMgdW5kZXIgY29sb3IgYmVjYXVzZSB0aGUgY2hvc2VuIG9wYWNpdHkgaXMgY29sb3ItZGVwZW5kZW50LlxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAgICAgICBvcGFjaXR5LFxuICAgICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZShcbiAgICAgICAgICAgIC0tbWRjLXJpcHBsZS1hY3RpdmF0ZWQtb3BhY2l0eSxcbiAgICAgICAgICAgICRhY3RpdmF0ZWQtb3BhY2l0eVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSBzdGF0ZXMtaW50ZXJhY3Rpb25zXyhcbiAgICAgICRjb2xvcjogJGNvbG9yLFxuICAgICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICAgJG9wYWNpdHktbW9kaWZpZXI6ICRhY3RpdmF0ZWQtb3BhY2l0eSxcbiAgICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgfVxufVxuXG4vLyBTaW1wbGUgbWl4aW4gZm9yIHNlbGVjdGVkIHN0YXRlcyB3aGljaCBhdXRvbWF0aWNhbGx5IHNlbGVjdHMgb3BhY2l0eSB2YWx1ZXMgYmFzZWQgb24gd2hldGhlciB0aGUgaW5rIGNvbG9yIGlzXG4vLyBsaWdodCBvciBkYXJrLlxuQG1peGluIHN0YXRlcy1zZWxlY3RlZChcbiAgJGNvbG9yLFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogZmFsc2UsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcbikge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcbiAgJHNlbGVjdGVkLW9wYWNpdHk6IHN0YXRlcy1vcGFjaXR5KCRjb2xvciwgc2VsZWN0ZWQpO1xuXG4gICYtLXNlbGVjdGVkIHtcbiAgICBAaW5jbHVkZSBzdGF0ZXMtYmFja2dyb3VuZC1zZWxlY3RvcigkcmlwcGxlLXRhcmdldCkge1xuICAgICAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQuXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KFxuICAgICAgICAgIG9wYWNpdHksXG4gICAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKFxuICAgICAgICAgICAgLS1tZGMtcmlwcGxlLXNlbGVjdGVkLW9wYWNpdHksXG4gICAgICAgICAgICAkc2VsZWN0ZWQtb3BhY2l0eVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSBzdGF0ZXMtaW50ZXJhY3Rpb25zXyhcbiAgICAgICRjb2xvcjogJGNvbG9yLFxuICAgICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICAgJG9wYWNpdHktbW9kaWZpZXI6ICRzZWxlY3RlZC1vcGFjaXR5LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgICApO1xuICB9XG59XG5cbkBtaXhpbiBzdGF0ZXMtaW50ZXJhY3Rpb25zXyhcbiAgJGNvbG9yLFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCxcbiAgJG9wYWNpdHktbW9kaWZpZXI6IDAsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksXG4gICRyaXBwbGUtdGFyZ2V0OiAnJicsXG4gICRvcGFjaXR5LW1hcDogbnVsbFxuKSB7XG4gIEBpbmNsdWRlIHRhcmdldC1zZWxlY3RvcigkcmlwcGxlLXRhcmdldCkge1xuICAgIEBpbmNsdWRlIHN0YXRlcy1iYXNlLWNvbG9yKCRjb2xvciwgJHF1ZXJ5KTtcbiAgfVxuXG4gIEBpZiAkb3BhY2l0eS1tYXAgPT0gbnVsbCB7XG4gICAgJG9wYWNpdHktbWFwOiAoXG4gICAgICBob3Zlcjogc3RhdGVzLW9wYWNpdHkoJGNvbG9yLCBob3ZlcikgKyAkb3BhY2l0eS1tb2RpZmllcixcbiAgICAgIGZvY3VzOiBzdGF0ZXMtb3BhY2l0eSgkY29sb3IsIGZvY3VzKSArICRvcGFjaXR5LW1vZGlmaWVyLFxuICAgICAgcHJlc3M6IHN0YXRlcy1vcGFjaXR5KCRjb2xvciwgcHJlc3MpICsgJG9wYWNpdHktbW9kaWZpZXIsXG4gICAgKTtcbiAgfVxuXG4gIEBpbmNsdWRlIHN0YXRlcy1vcGFjaXRpZXMoXG4gICAgJG9wYWNpdHktbWFwLFxuICAgICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCxcbiAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXQsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8gV3JhcHMgY29udGVudCBpbiB0aGUgYHJpcHBsZS10YXJnZXRgIHNlbGVjdG9yIGlmIGl0IGV4aXN0cy5cbkBtaXhpbiB0YXJnZXQtc2VsZWN0b3IoJHJpcHBsZS10YXJnZXQ6ICcmJykge1xuICBAaWYgJHJpcHBsZS10YXJnZXQgPT0gJyYnIHtcbiAgICBAY29udGVudDtcbiAgfSBAZWxzZSB7XG4gICAgI3skcmlwcGxlLXRhcmdldH0ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbi8vLyBTZWxlY3RvciBmb3IgaG92ZXIsIGFjdGl2ZSBhbmQgZm9jdXMgc3RhdGVzLlxuQG1peGluIHN0YXRlcy1zZWxlY3RvcigpIHtcbiAgI3skX2hvdmVyLXNlbGVjdG9yfSxcbiAgI3skX2ZvY3VzLXNlbGVjdG9yfSxcbiAgI3skX2FjdGl2ZS1zZWxlY3Rvcn0ge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBob3ZlcigpIHtcbiAgI3skX2hvdmVyLXNlbGVjdG9yfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gU2VsZWN0b3IgZm9yIGZvY3VzIHN0YXRlLiBVc2luZyAnOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCknIHRvIGNvbnRpbnVlXG4vLyBhcHBseWluZyBmb2N1cyBzdHlsZXMgb24gSlMtZGlzYWJsZWQgY29tcG9uZW50cywgYW5kIGNvbnRyb2wgZm9jdXNcbi8vIG9uIEpTLWVuYWJsZWQgY29tcG9uZW50cyB3aXRoICcubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkJy5cbkBtaXhpbiBmb2N1cygpIHtcbiAgI3skX2ZvY3VzLXNlbGVjdG9yfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8gU2VsZWN0b3IgZm9yIGFjdGl2ZSBzdGF0ZS4gVXNpbmcgYDphY3RpdmU6YWN0aXZlYCB0byBvdmVycmlkZSBmb2N1cyBzdHlsZXMuXG5AbWl4aW4gcHJlc3NlZCgpIHtcbiAgI3skX2FjdGl2ZS1zZWxlY3Rvcn0ge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIEBkZXByZWNhdGVkIFVzZSBgcHJlc3NlZCgpYCBtaXhpbiAtIHJlbmFtZWQgZm9yIGNvbnNpc3RlbmN5LlxuQG1peGluIGFjdGl2ZSgpIHtcbiAgQGluY2x1ZGUgcHJlc3NlZCgpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLy8gS2VlcCB0aGUgcmlwcGxlIChTdGF0ZSBvdmVybGF5KSBiZWhpbmQgdGhlIGNvbnRlbnQuXG5AbWl4aW4gYmVoaW5kLWNvbnRlbnQoXG4gICRyaXBwbGUtdGFyZ2V0LFxuICAkY29udGVudC1yb290LXNlbGVjdG9yOiAnJicsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAvLyBOZWVkZWQgZm9yIElFMTEuIFdpdGhvdXQgdGhpcywgSUUxMSByZW5kZXJzIHRoZSBzdGF0ZSBsYXllciBjb21wbGV0ZWx5XG4gIC8vIHVuZGVybmVhdGggdGhlIGNvbnRhaW5lciwgbWFraW5nIGl0IGludmlzaWJsZS5cbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAjeyRjb250ZW50LXJvb3Qtc2VsZWN0b3J9IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgei1pbmRleDogMDtcbiAgICB9XG4gIH1cblxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAgICAgei1pbmRleCxcbiAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKC0tbWRjLXJpcHBsZS16LWluZGV4LCAtMSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbkBmdW5jdGlvbiBzdGF0ZXMtb3BhY2l0eSgkY29sb3IsICRzdGF0ZSkge1xuICAkY29sb3ItdmFsdWU6IHRoZW1lLWNvbG9yLnByb3AtdmFsdWUoJGNvbG9yKTtcbiAgJG9wYWNpdHktbWFwOiBpZihcbiAgICB0aGVtZS1jb2xvci50b25lKCRjb2xvci12YWx1ZSkgPT0gJ2xpZ2h0JyxcbiAgICAkbGlnaHQtaW5rLW9wYWNpdGllcyxcbiAgICAkZGFyay1pbmstb3BhY2l0aWVzXG4gICk7XG5cbiAgQGlmIG5vdCBtYXAuaGFzLWtleSgkb3BhY2l0eS1tYXAsICRzdGF0ZSkge1xuICAgIEBlcnJvciBcIkludmFsaWQgc3RhdGU6ICcjeyRzdGF0ZX0nLiBDaG9vc2Ugb25lIG9mOiAje21hcC5rZXlzKCRvcGFjaXR5LW1hcCl9XCI7XG4gIH1cblxuICBAcmV0dXJuIG1hcC5nZXQoJG9wYWNpdHktbWFwLCAkc3RhdGUpO1xufVxuXG5AbWl4aW4gc3RhdGVzLWJhY2tncm91bmQtc2VsZWN0b3IoJHJpcHBsZS10YXJnZXQpIHtcbiAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBEZWZhdWx0IHN0eWxlc1xuJHJvdy1oZWlnaHQ6IDY0cHggIWRlZmF1bHQ7XG4kdGl0bGUtbGVmdC1wYWRkaW5nOiAyMHB4ICFkZWZhdWx0O1xuJHNlY3Rpb24tdmVydGljYWwtcGFkZGluZzogOHB4ICFkZWZhdWx0O1xuJHNlY3Rpb24taG9yaXpvbnRhbC1wYWRkaW5nOiAxMnB4ICFkZWZhdWx0O1xuXG4kbW9iaWxlLWJyZWFrcG9pbnQ6IDU5OXB4ICFkZWZhdWx0O1xuXG4vLyBEZWZhdWx0IG1vYmlsZSBzdHlsZXNcbiRtb2JpbGUtcm93LWhlaWdodDogNTZweCAhZGVmYXVsdDtcbiRtb2JpbGUtc2VjdGlvbi1wYWRkaW5nOiA0cHggIWRlZmF1bHQ7XG5cbi8vIFNob3J0IHRvcCBhcHAgYmFyXG4kc2hvcnQtY29sbGFwc2VkLWJvcmRlci1yYWRpdXM6IDRweCAhZGVmYXVsdDtcbiRzaG9ydC1jb2xsYXBzZWQtd2lkdGg6IDU2cHggIWRlZmF1bHQ7XG4kc2hvcnQtY29sbGFwc2VkLXJpZ2h0LWljb24tcGFkZGluZzogMTJweCAhZGVmYXVsdDtcblxuLy8gUHJvbWluZW50IHN0eWxlc1xuJHByb21pbmVudC1yb3ctaGVpZ2h0OiAxMjhweCAhZGVmYXVsdDtcbiRwcm9taW5lbnQtdGl0bGUtYm90dG9tLXBhZGRpbmc6IDJweCAhZGVmYXVsdDtcblxuLy8gUHJvbWluZW50IG1vYmlsZSBzdHlsZXNcbiRwcm9taW5lbnQtbW9iaWxlLXRpdGxlLWJvdHRvbS1wYWRkaW5nOiA2cHggIWRlZmF1bHQ7XG5cbi8vIERlbnNlIHN0eWxlc1xuJGRlbnNlLXJvdy1oZWlnaHQ6IDQ4cHggIWRlZmF1bHQ7XG4kZGVuc2Utc2VjdGlvbi1ob3Jpem9udGFsLXBhZGRpbmc6IDRweCAhZGVmYXVsdDtcbiRkZW5zZS10aXRsZS1sZWZ0LXBhZGRpbmc6IDEycHggIWRlZmF1bHQ7XG5cbi8vIERlbnNlICYgUHJvbWluZW50IHN0eWxlc1xuJGRlbnNlLXByb21pbmVudC10aXRsZS1ib3R0b20tcGFkZGluZzogOXB4ICFkZWZhdWx0O1xuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnc2FzczpzZWxlY3Rvcic7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvZ3NzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9zZWxlY3Rvci1leHQnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcblxuJGluY2x1ZGU6IHRydWUgIWRlZmF1bHQ7XG5cbi8vLyBDcmVhdGVzIGEgcnVsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB3aGVuIGEgY29tcG9uZW50IGlzIHdpdGhpbiB0aGUgY29udGV4dFxuLy8vIG9mIGFuIFJUTCBsYXlvdXQuXG4vLy9cbi8vLyBAZXhhbXBsZSAtIHNjc3Ncbi8vLyAubWRjLWZvbyB7XG4vLy8gICBwYWRkaW5nLWxlZnQ6IDRweDtcbi8vL1xuLy8vICAgQGluY2x1ZGUgcnRsIHtcbi8vLyAgICAgcGFkZGluZy1sZWZ0OiBhdXRvO1xuLy8vICAgICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG4vLy8gICB9XG4vLy8gfVxuLy8vXG4vLy8gQGV4YW1wbGUgLSBjc3Ncbi8vLyAgIC5tZGMtZm9vIHtcbi8vLyAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XG4vLy8gICB9XG4vLy9cbi8vLyAgIFtkaXI9XCJydGxcIl0gLm1kYy1mb28sXG4vLy8gICAubWRjLWZvb1tkaXI9XCJydGxcIl0ge1xuLy8vICAgICBwYWRkaW5nLWxlZnQ6IGF1dG87XG4vLy8gICAgIHBhZGRpbmctcmlnaHQ6IDRweDtcbi8vLyAgIH1cbi8vL1xuLy8vIE5vdGUgdGhhdCB0aGlzIG1peGluIHdvcmtzIGJ5IGNoZWNraW5nIGZvciBhbiBhbmNlc3RvciBlbGVtZW50IHdpdGhcbi8vLyBgW2Rpcj1cInJ0bFwiXWAuIEFzIGEgcmVzdWx0LCBuZXN0ZWQgYGRpcmAgdmFsdWVzIGFyZSBub3Qgc3VwcG9ydGVkOlxuLy8vXG4vLy8gQGV4YW1wbGUgLSBodG1sXG4vLy8gPGh0bWwgZGlyPVwicnRsXCI+XG4vLy8gICA8IS0tIC4uLiAtLT5cbi8vLyAgIDxkaXYgZGlyPVwibHRyXCI+XG4vLy8gICAgIDxkaXYgY2xhc3M9XCJtZGMtZm9vXCI+U3R5bGVkIGluY29ycmVjdGx5IGFzIFJUTCE8L2Rpdj5cbi8vLyAgIDwvZGl2PlxuLy8vIDwvaHRtbD5cbi8vL1xuLy8vIEluIHRoZSBmdXR1cmUsIHNlbGVjdG9ycyBzdWNoIGFzIHRoZSBgOmRpcmAgcHNldWRvLWNsYXNzXG4vLy8gKGh0dHA6Ly9tZG4uaW8vY3NzLzpkaXIpIHdpbGwgaGVscCB1cyBtaXRpZ2F0ZSB0aGlzLlxuLy8vXG4vLy8gQGNvbnRlbnQgQ29udGVudCB0byBiZSBzdHlsZWQgaW4gYW4gUlRMIGNvbnRleHQuXG5AbWl4aW4gcnRsKCkge1xuICBAaWYgKCRpbmNsdWRlKSB7XG4gICAgJGRpci1ydGw6ICdbZGlyPXJ0bF0nO1xuXG4gICAgJHJ0bC1zZWxlY3RvcnM6IGxpc3Quam9pbihcbiAgICAgIHNlbGVjdG9yLm5lc3QoJGRpci1ydGwsICYpLFxuICAgICAgc2VsZWN0b3ItZXh0LmFwcGVuZC1zdHJpY3QoJiwgJGRpci1ydGwpXG4gICAgKTtcblxuICAgIEBhdC1yb290IHtcbiAgICAgICN7JHJ0bC1zZWxlY3RvcnN9IHtcbiAgICAgICAgLypydGw6YmVnaW46aWdub3JlKi9cbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIC8qcnRsOmVuZDppZ25vcmUqL1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBUYWtlcyBhIGJhc2UgYm94LW1vZGVsIHByb3BlcnR5IG5hbWUgKGBtYXJnaW5gLCBgYm9yZGVyYCwgYHBhZGRpbmdgLCBldGMuKSBhbG9uZyB3aXRoIGFcbi8vIGRlZmF1bHQgZGlyZWN0aW9uIChgbGVmdGAgb3IgYHJpZ2h0YCkgYW5kIHZhbHVlLCBhbmQgZW1pdHMgcnVsZXMgd2hpY2ggYXBwbHkgdGhlIGdpdmVuIHZhbHVlIHRvIHRoZVxuLy8gc3BlY2lmaWVkIGRpcmVjdGlvbiBieSBkZWZhdWx0IGFuZCB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uIGluIFJUTC5cbi8vXG4vLyBGb3IgZXhhbXBsZTpcbi8vXG4vLyBgYGBzY3NzXG4vLyAubWRjLWZvbyB7XG4vLyAgIEBpbmNsdWRlIHJ0bC1yZWZsZXhpdmUtYm94KG1hcmdpbiwgbGVmdCwgOHB4KTtcbi8vIH1cbi8vIGBgYFxuLy9cbi8vIGlzIGVxdWl2YWxlbnQgdG86XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBtYXJnaW4tbGVmdDogOHB4O1xuLy8gICBtYXJnaW4tcmlnaHQ6IDA7XG4vL1xuLy8gICBAaW5jbHVkZSBydGwge1xuLy8gICAgIG1hcmdpbi1sZWZ0OiAwO1xuLy8gICAgIG1hcmdpbi1yaWdodDogOHB4O1xuLy8gICB9XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyB3aGVyZWFzOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCByaWdodCwgOHB4KTtcbi8vIH1cbi8vIGBgYFxuLy9cbi8vIGlzIGVxdWl2YWxlbnQgdG86XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBtYXJnaW4tbGVmdDogMDtcbi8vICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4vL1xuLy8gICBAaW5jbHVkZSBydGwge1xuLy8gICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4vLyAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuLy8gICB9XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBZb3UgY2FuIGFsc28gcGFzcyBhbiBvcHRpb25hbCA0dGggYCRyb290LXNlbGVjdG9yYCBhcmd1bWVudCB3aGljaCB3aWxsIGJlIGZvcndhcmRlZCB0byBgbWRjLXJ0bGAsXG4vLyBlLmcuIGBAaW5jbHVkZSBydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIDhweCwgJy5tZGMtY29tcG9uZW50JylgLlxuLy9cbi8vIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIHplcm8gb3V0IHRoZSBvcmlnaW5hbCB2YWx1ZSBpbiBhbiBSVEwgY29udGV4dC5cbi8vIElmIHlvdSdyZSB0cnlpbmcgdG8gZmxpcCB0aGUgdmFsdWVzLCB1c2UgYG1kYy1ydGwtcmVmbGV4aXZlLXByb3BlcnR5KClgIGluc3RlYWQuXG5AbWl4aW4gcmVmbGV4aXZlLWJveChcbiAgJGJhc2UtcHJvcGVydHksXG4gICRkZWZhdWx0LWRpcmVjdGlvbixcbiAgJHZhbHVlLFxuICAkcmVwbGFjZTogbnVsbFxuKSB7XG4gIEBpZiAobGlzdC5pbmRleCgocmlnaHQsIGxlZnQpLCAkZGVmYXVsdC1kaXJlY3Rpb24pID09IG51bGwpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIGRlZmF1bHQgZGlyZWN0aW9uOiAnI3skZGVmYXVsdC1kaXJlY3Rpb259Jy4gUGxlYXNlIHNwZWNpZml5IGVpdGhlciAncmlnaHQnIG9yICdsZWZ0Jy5cIjtcbiAgfVxuXG4gICRsZWZ0LXZhbHVlOiAkdmFsdWU7XG4gICRyaWdodC12YWx1ZTogMDtcblxuICBAaWYgKCRkZWZhdWx0LWRpcmVjdGlvbiA9PSByaWdodCkge1xuICAgICRsZWZ0LXZhbHVlOiAwO1xuICAgICRyaWdodC12YWx1ZTogJHZhbHVlO1xuICB9XG5cbiAgQGluY2x1ZGUgcmVmbGV4aXZlLXByb3BlcnR5KFxuICAgICRiYXNlLXByb3BlcnR5LFxuICAgICRsZWZ0LXZhbHVlLFxuICAgICRyaWdodC12YWx1ZSxcbiAgICAkcmVwbGFjZTogJHJlcGxhY2VcbiAgKTtcbn1cblxuLy8gVGFrZXMgYSBiYXNlIHByb3BlcnR5IGFuZCBlbWl0cyBydWxlcyB0aGF0IGFzc2lnbiA8YmFzZS1wcm9wZXJ0eT4tbGVmdCB0byA8bGVmdC12YWx1ZT4gYW5kXG4vLyA8YmFzZS1wcm9wZXJ0eT4tcmlnaHQgdG8gPHJpZ2h0LXZhbHVlPiBpbiBhIExUUiBjb250ZXh0LCBhbmQgdmljZSB2ZXJzYSBpbiBhIFJUTCBjb250ZXh0LlxuLy8gRm9yIGV4YW1wbGU6XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBAaW5jbHVkZSBydGwtcmVmbGV4aXZlLXByb3BlcnR5KG1hcmdpbiwgYXV0bywgMTJweCk7XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4vLyAgIG1hcmdpbi1yaWdodDogMTJweDtcbi8vXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XG4vLyAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4vLyAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuLy8gICB9XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBBbiBvcHRpb25hbCA0dGggYCRyb290LXNlbGVjdG9yYCBhcmd1bWVudCBjYW4gYmUgZ2l2ZW4sIHdoaWNoIHdpbGwgYmUgcGFzc2VkIHRvIGBtZGMtcnRsYC5cbkBtaXhpbiByZWZsZXhpdmUtcHJvcGVydHkoXG4gICRiYXNlLXByb3BlcnR5LFxuICAkbGVmdC12YWx1ZSxcbiAgJHJpZ2h0LXZhbHVlLFxuICAkcmVwbGFjZTogbnVsbFxuKSB7XG4gICRwcm9wLWxlZnQ6ICN7JGJhc2UtcHJvcGVydHl9LWxlZnQ7XG4gICRwcm9wLXJpZ2h0OiAjeyRiYXNlLXByb3BlcnR5fS1yaWdodDtcblxuICBAaW5jbHVkZSByZWZsZXhpdmUoXG4gICAgJHByb3AtbGVmdCxcbiAgICAkbGVmdC12YWx1ZSxcbiAgICAkcHJvcC1yaWdodCxcbiAgICAkcmlnaHQtdmFsdWUsXG4gICAgJHJlcGxhY2U6ICRyZXBsYWNlXG4gICk7XG59XG5cbi8vIFRha2VzIGFuIGFyZ3VtZW50IHNwZWNpZnlpbmcgYSBob3Jpem9udGFsIHBvc2l0aW9uIHByb3BlcnR5IChlaXRoZXIgJ2xlZnQnIG9yICdyaWdodCcpIGFzIHdlbGxcbi8vIGFzIGEgdmFsdWUsIGFuZCBhcHBsaWVzIHRoYXQgdmFsdWUgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiBhIExUUiBjb250ZXh0LCBhbmQgZmxpcHMgaXQgaW4gYVxuLy8gUlRMIGNvbnRleHQuIEZvciBleGFtcGxlOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1wb3NpdGlvbihsZWZ0LCAwKTtcbi8vIH1cbi8vIGBgYFxuLy9cbi8vIGlzIGVxdWl2YWxlbnQgdG86XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBsZWZ0OiAwO1xuLy8gICByaWdodDogaW5pdGlhbDtcbi8vXG4vLyAgIEBpbmNsdWRlIHJ0bCB7XG4vLyAgICAgbGVmdDogaW5pdGlhbDtcbi8vICAgICByaWdodDogMDtcbi8vICAgfVxuLy8gfVxuLy8gYGBgXG4vL1xuLy8gQW4gb3B0aW9uYWwgdGhpcmQgJHJvb3Qtc2VsZWN0b3IgYXJndW1lbnQgbWF5IGFsc28gYmUgZ2l2ZW4sIHdoaWNoIGlzIHBhc3NlZCB0byBgbWRjLXJ0bGAuXG5AbWl4aW4gcmVmbGV4aXZlLXBvc2l0aW9uKCRwb3NpdGlvbi1wcm9wZXJ0eSwgJHZhbHVlLCAkcmVwbGFjZTogbnVsbCkge1xuICBAaWYgKGxpc3QuaW5kZXgoKHJpZ2h0LCBsZWZ0KSwgJHBvc2l0aW9uLXByb3BlcnR5KSA9PSBudWxsKSB7XG4gICAgQGVycm9yIFwiSW52YWxpZCBwb3NpdGlvbiAje3Bvc2l0aW9uLXByb3BlcnR5fS4gUGxlYXNlIHNwZWNpZml5IGVpdGhlciByaWdodCBvciBsZWZ0XCI7XG4gIH1cblxuICAvLyBUT0RPOiAnaW5pdGlhbCcgaXMgbm90IHN1cHBvcnRlZCBpbiBJRSAxMS4gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtaW5pdGlhbC12YWx1ZVxuICAkbGVmdC12YWx1ZTogJHZhbHVlO1xuICAkcmlnaHQtdmFsdWU6IGluaXRpYWw7XG5cbiAgQGlmICgkcG9zaXRpb24tcHJvcGVydHkgPT0gcmlnaHQpIHtcbiAgICAkcmlnaHQtdmFsdWU6ICR2YWx1ZTtcbiAgICAkbGVmdC12YWx1ZTogaW5pdGlhbDtcbiAgfVxuXG4gIEBpbmNsdWRlIHJlZmxleGl2ZShcbiAgICBsZWZ0LFxuICAgICRsZWZ0LXZhbHVlLFxuICAgIHJpZ2h0LFxuICAgICRyaWdodC12YWx1ZSxcbiAgICAkcmVwbGFjZTogJHJlcGxhY2VcbiAgKTtcbn1cblxuLy8gVGFrZXMgcGFpciBvZiBwcm9wZXJ0aWVzIHdpdGggdmFsdWVzIGFzIGFyZ3VtZW50cyBhbmQgZmxpcHMgaXQgaW4gUlRMIGNvbnRleHQuXG4vLyBGb3IgZXhhbXBsZTpcbi8vXG4vLyBgYGBzY3NzXG4vLyAubWRjLWZvbyB7XG4vLyAgIEBpbmNsdWRlIHJ0bC1yZWZsZXhpdmUobGVmdCwgMnB4LCByaWdodCwgNXB4KTtcbi8vIH1cbi8vIGBgYFxuLy9cbi8vIGlzIGVxdWl2YWxlbnQgdG86XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBsZWZ0OiAycHg7XG4vLyAgIHJpZ2h0OiA1cHg7XG4vL1xuLy8gICBAaW5jbHVkZSBydGwge1xuLy8gICAgIHJpZ2h0OiAycHg7XG4vLyAgICAgbGVmdDogNXB4O1xuLy8gICB9XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBBbiBvcHRpb25hbCBmaWZ0aCBgJHJvb3Qtc2VsZWN0b3JgIGFyZ3VtZW50IG1heSBhbHNvIGJlIGdpdmVuLCB3aGljaCBpcyBwYXNzZWQgdG8gYG1kYy1ydGxgLlxuQG1peGluIHJlZmxleGl2ZShcbiAgJGxlZnQtcHJvcGVydHksXG4gICRsZWZ0LXZhbHVlLFxuICAkcmlnaHQtcHJvcGVydHksXG4gICRyaWdodC12YWx1ZSxcbiAgJHJlcGxhY2U6IG51bGxcbikge1xuICAkbGVmdC1yZXBsYWNlOiBudWxsO1xuICAkcmlnaHQtcmVwbGFjZTogbnVsbDtcbiAgQGlmICRyZXBsYWNlIHtcbiAgICBAaWYgbWV0YS50eXBlLW9mKCRsZWZ0LXZhbHVlKSA9PSAnc3RyaW5nJyB7XG4gICAgICAkbGVmdC1yZXBsYWNlOiAkcmVwbGFjZTtcbiAgICB9XG5cbiAgICBAaWYgbWV0YS50eXBlLW9mKCRyaWdodC12YWx1ZSkgPT0gJ3N0cmluZycge1xuICAgICAgJHJpZ2h0LXJlcGxhY2U6ICRyZXBsYWNlO1xuICAgIH1cblxuICAgIEBpZiAkbGVmdC1yZXBsYWNlID09IG51bGwgYW5kICRyaWdodC1yZXBsYWNlID09IG51bGwge1xuICAgICAgQGVycm9yICdtZGMtcnRsOiAkcmVwbGFjZSBtYXkgb25seSBiZSB1c2VkIHdpdGggc3RyaW5ncyBidXQgbmVpdGhlciBsZWZ0IG5vciByaWdodCB2YWx1ZXMgYXJlIHN0cmluZ3MuJztcbiAgICB9XG5cbiAgICAvLyBJZiBhbnkgcmVwbGFjZW1lbnRzIGFyZSBudWxsLCB0cmVhdCB0aGUgZW50aXJlIHZhbHVlIGFzIG51bGwgKGRvIG5vdFxuICAgIC8vIGVtaXQgYW55dGhpbmcpLlxuICAgIEBlYWNoICRuYW1lLCAkcmVwbGFjZW1lbnQgaW4gJHJlcGxhY2Uge1xuICAgICAgQGlmICRyZXBsYWNlbWVudCA9PSBudWxsIHtcbiAgICAgICAgJGxlZnQtdmFsdWU6IG51bGw7XG4gICAgICAgICRyaWdodC12YWx1ZTogbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBEbyBub3QgZW1pdCBpZiBlaXRoZXIgdmFsdWUgYXJlIG51bGxcbiAgQGlmICRsZWZ0LXZhbHVlIGFuZCAkcmlnaHQtdmFsdWUge1xuICAgIEBpbmNsdWRlIF9wcm9wZXJ0eSgkbGVmdC1wcm9wZXJ0eSwgJGxlZnQtdmFsdWUsICRyZXBsYWNlOiAkbGVmdC1yZXBsYWNlKTtcbiAgICBAaW5jbHVkZSBfcHJvcGVydHkoJHJpZ2h0LXByb3BlcnR5LCAkcmlnaHQtdmFsdWUsICRyZXBsYWNlOiAkcmlnaHQtcmVwbGFjZSk7XG5cbiAgICBAaW5jbHVkZSBydGwge1xuICAgICAgQGluY2x1ZGUgX3Byb3BlcnR5KFxuICAgICAgICAkbGVmdC1wcm9wZXJ0eSxcbiAgICAgICAgJHJpZ2h0LXZhbHVlLFxuICAgICAgICAkcmVwbGFjZTogJHJpZ2h0LXJlcGxhY2VcbiAgICAgICk7XG4gICAgICBAaW5jbHVkZSBfcHJvcGVydHkoJHJpZ2h0LXByb3BlcnR5LCAkbGVmdC12YWx1ZSwgJHJlcGxhY2U6ICRsZWZ0LXJlcGxhY2UpO1xuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBBZGRzIFJUTCBpZ25vcmUgYW5ub3RhdGlvbiB3aGVuIGAkbWRjLXJ0bC1pbmNsdWRlYCBpcyB0cnVlLlxuLy8vXG5AbWl4aW4gaWdub3JlLW5leHQtbGluZSgpIHtcbiAgQGluY2x1ZGUgZ3NzLmFubm90YXRlKFxuICAgIChcbiAgICAgIG5vZmxpcDogJGluY2x1ZGUsXG4gICAgKVxuICApO1xufVxuXG4vLy9cbi8vLyBBZGRzIGBAbm9mbGlwYCBhbm5vdGF0aW9uIHdoZW4gYCRtZGMtcnRsLWluY2x1ZGVgIGlzIHRydWUuXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHByb3BlcnR5XG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR2YWx1ZVxuLy8vIEBwYXJhbSB7TWFwfSAkcmVwbGFjZVxuLy8vXG5AbWl4aW4gX3Byb3BlcnR5KCRwcm9wZXJ0eSwgJHZhbHVlLCAkcmVwbGFjZTogbnVsbCkge1xuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAkcHJvcGVydHksXG4gICAgJHZhbHVlLFxuICAgICRyZXBsYWNlOiAkcmVwbGFjZSxcbiAgICAkZ3NzOiAobm9mbGlwOiAkaW5jbHVkZSlcbiAgKTtcbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMSBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlJztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlLXRoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90b3VjaC10YXJnZXQvbWl4aW5zJyBhcyB0b3VjaC10YXJnZXQtbWl4aW5zO1xuQHVzZSAnLi9pY29uLWJ1dHRvbi10aGVtZSc7XG5cbkBtaXhpbiBjb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHdpdGhvdXQtcmlwcGxlKCRxdWVyeSk7XG4gIEBpbmNsdWRlIHJpcHBsZSgkcXVlcnkpO1xufVxuXG5AbWl4aW4gc3RhdGljLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBkZWZpbmUgaWNvbi1idXR0b25cbiAgLm1kYy1pY29uLWJ1dHRvbiB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBmaWxsOiBjdXJyZW50Q29sb3I7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgei1pbmRleDogMDsgLy8gQWRkZWQgdG8gcmVuZGVyIGFib3ZlIHRoZSBjb250YWluZXIgaW4gSUUxMSB0ZXN0cy5cbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlOyAvLyBBZGRlZCB0byBmaXggSUUxMSB0b3VjaCB0YXJnZXQgdGVzdHMuXG4gICAgfVxuXG4gICAgLm1kYy1pY29uLWJ1dHRvbl9fdG91Y2gge1xuICAgICAgQGluY2x1ZGUgdG91Y2gtdGFyZ2V0LW1peGlucy50b3VjaC10YXJnZXQoXG4gICAgICAgICRzZXQtd2lkdGg6IHRydWUsXG4gICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICApO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGlmLWRpc2FibGVkXyB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZGMtaWNvbi1idXR0b24tLWRpc3BsYXktZmxleCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtaWNvbi1idXR0b25fX2ljb24ge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuXG4gICAgJi5tZGMtaWNvbi1idXR0b25fX2ljb24tLW9uIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1kYy1pY29uLWJ1dHRvbi0tb24ge1xuICAgIC5tZGMtaWNvbi1idXR0b25fX2ljb24ge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgJi5tZGMtaWNvbi1idXR0b25fX2ljb24tLW9uIHtcbiAgICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBlbmRcblxuICAubWRjLWljb24tYnV0dG9uX19saW5rIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgbGVmdDogMDtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHdpdGhvdXQtcmlwcGxlKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLWljb24tYnV0dG9uIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgZm9udC1zaXplOiBpY29uLWJ1dHRvbi10aGVtZS4kaWNvbi1zaXplO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGljb24tYnV0dG9uLXRoZW1lLmRlbnNpdHkoMCwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gICAgQGluY2x1ZGUgaWNvbi1idXR0b24tdGhlbWUuZGlzYWJsZWQtaW5rLWNvbG9yKFxuICAgICAgdGV4dC1kaXNhYmxlZC1vbi1saWdodCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcblxuICAgIHN2ZyxcbiAgICBpbWcge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgd2lkdGg6IGljb24tYnV0dG9uLXRoZW1lLiRpY29uLXNpemU7XG4gICAgICAgIGhlaWdodDogaWNvbi1idXR0b24tdGhlbWUuJGljb24tc2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaW5jbHVkZSBzdGF0aWMtc3R5bGVzKCRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuQG1peGluIHJpcHBsZSgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHJpcHBsZS5jb21tb24oJHF1ZXJ5KTsgLy8gQ09QWUJBUkFfQ09NTUVOVF9USElTX0xJTkVcblxuICAubWRjLWljb24tYnV0dG9uIHtcbiAgICBAaW5jbHVkZSByaXBwbGUuc3VyZmFjZShcbiAgICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICAgJHJpcHBsZS10YXJnZXQ6IGljb24tYnV0dG9uLXRoZW1lLiRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgICBAaW5jbHVkZSByaXBwbGUucmFkaXVzLXVuYm91bmRlZChcbiAgICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICAgJHJpcHBsZS10YXJnZXQ6IGljb24tYnV0dG9uLXRoZW1lLiRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKFxuICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAkcmlwcGxlLXRhcmdldDogaWNvbi1idXR0b24tdGhlbWUuJHJpcHBsZS10YXJnZXRcbiAgICApO1xuXG4gICAgLm1kYy1pY29uLWJ1dHRvbl9fcmlwcGxlIHtcbiAgICAgICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGxlZnQ6IDBweDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwcHg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB6LWluZGV4OiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gSGVscHMgc3R5bGUgdGhlIGljb24gYnV0dG9uIGluIGl0cyBkaXNhYmxlZCBzdGF0ZS5cbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vL1xuQG1peGluIGlmLWRpc2FibGVkXyB7XG4gICY6ZGlzYWJsZWQge1xuICAgIEBjb250ZW50O1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVybiAtLVxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG5cbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOm1hcCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnQG1hdGVyaWFsL2RlbnNpdHkvZnVuY3Rpb25zJyBhcyBkZW5zaXR5LWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC9kZW5zaXR5L3ZhcmlhYmxlcycgYXMgZGVuc2l0eS12YXJpYWJsZXM7XG5AdXNlICdAbWF0ZXJpYWwvZWxldmF0aW9uL2VsZXZhdGlvbi10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvZmVhdHVyZS10YXJnZXRpbmcnO1xuQHVzZSAnQG1hdGVyaWFsL2ZvY3VzLXJpbmcvZm9jdXMtcmluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZS10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL3J0bCc7XG5AdXNlICdAbWF0ZXJpYWwvZG9tL2RvbSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUva2V5cyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvc3RhdGUnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZS1jb2xvcic7XG5AdXNlICdAbWF0ZXJpYWwvdG91Y2gtdGFyZ2V0L21peGlucycgYXMgdG91Y2gtdGFyZ2V0LW1peGlucztcblxuJHJpcHBsZS10YXJnZXQ6ICcubWRjLWljb24tYnV0dG9uX19yaXBwbGUnO1xuXG4kaWNvbi1zaXplOiAyNHB4ICFkZWZhdWx0O1xuJHNpemU6IDQ4cHggIWRlZmF1bHQ7XG4kbWluaW11bS1oZWlnaHQ6IDI4cHggIWRlZmF1bHQ7XG4kbWF4aW11bS1oZWlnaHQ6ICRzaXplICFkZWZhdWx0O1xuJGNvbnRhaW5lci1zaGFwZTogNTAlO1xuJGRlbnNpdHktc2NhbGU6IGRlbnNpdHktdmFyaWFibGVzLiRkZWZhdWx0LXNjYWxlICFkZWZhdWx0O1xuJGRlbnNpdHktY29uZmlnOiAoXG4gIHNpemU6IChcbiAgICBkZWZhdWx0OiAkc2l6ZSxcbiAgICBtYXhpbXVtOiAkbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1pbmltdW0taGVpZ2h0LFxuICApLFxuKSAhZGVmYXVsdDtcblxuJF9jdXN0b20tcHJvcGVydHktcHJlZml4OiAnaWNvbi1idXR0b24nO1xuXG4kbGlnaHQtdGhlbWU6IChcbiAgZGlzYWJsZWQtaWNvbi1jb2xvcjogdGhlbWUtY29sb3IuJG9uLXN1cmZhY2UsXG4gIGRpc2FibGVkLWljb24tb3BhY2l0eTogMC4zOCxcbiAgaWNvbi1jb2xvcjogdGhlbWUtY29sb3IuJHByaW1hcnksXG4gIGljb24tc2l6ZTogJGljb24tc2l6ZSxcbiAgZm9jdXMtaWNvbi1jb2xvcjogdGhlbWUtY29sb3IuJHByaW1hcnksXG4gIGZvY3VzLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kcHJpbWFyeSxcbiAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogMC4xMixcbiAgaG92ZXItaWNvbi1jb2xvcjogdGhlbWUtY29sb3IuJHByaW1hcnksXG4gIGhvdmVyLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kcHJpbWFyeSxcbiAgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eTogMC4wOCxcbiAgcHJlc3NlZC1pY29uLWNvbG9yOiB0aGVtZS1jb2xvci4kcHJpbWFyeSxcbiAgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvcjogdGhlbWUtY29sb3IuJHByaW1hcnksXG4gIHByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eTogMC4xMixcbiAgc3RhdGUtbGF5ZXItc2l6ZTogJHNpemUsXG4pO1xuXG5AbWl4aW4gdGhlbWUoJHRoZW1lKSB7XG4gIEBpbmNsdWRlIHRoZW1lLnZhbGlkYXRlLXRoZW1lKCRsaWdodC10aGVtZSwgJHRoZW1lKTtcblxuICBAaW5jbHVkZSBrZXlzLmRlY2xhcmUtY3VzdG9tLXByb3BlcnRpZXMoXG4gICAgJHRoZW1lLFxuICAgICRwcmVmaXg6ICRfY3VzdG9tLXByb3BlcnR5LXByZWZpeFxuICApO1xufVxuXG5AbWl4aW4gdGhlbWUtc3R5bGVzKCR0aGVtZSkge1xuICBAaW5jbHVkZSB0aGVtZS52YWxpZGF0ZS10aGVtZSgkbGlnaHQtdGhlbWUsICR0aGVtZSk7XG5cbiAgJHRoZW1lOiBrZXlzLmNyZWF0ZS10aGVtZS1wcm9wZXJ0aWVzKFxuICAgICR0aGVtZSxcbiAgICAkcHJlZml4OiAkX2N1c3RvbS1wcm9wZXJ0eS1wcmVmaXhcbiAgKTtcblxuICBAaW5jbHVkZSBfc3RhdGUtbGF5ZXItc2l6ZSgkc2l6ZTogbWFwLmdldCgkdGhlbWUsIHN0YXRlLWxheWVyLXNpemUpKTtcbiAgQGluY2x1ZGUgX2ljb24tc2l6ZShtYXAuZ2V0KCR0aGVtZSwgaWNvbi1zaXplKSk7XG4gIEBpbmNsdWRlIF9kaXNhYmxlZC1pY29uLW9wYWNpdHkobWFwLmdldCgkdGhlbWUsIGRpc2FibGVkLWljb24tb3BhY2l0eSkpO1xuICBAaW5jbHVkZSBfaWNvbi1jb2xvci13aXRoLW1hcChcbiAgICAoXG4gICAgICBkZWZhdWx0OiBtYXAuZ2V0KCR0aGVtZSwgaWNvbi1jb2xvciksXG4gICAgICBkaXNhYmxlZDogbWFwLmdldCgkdGhlbWUsIGRpc2FibGVkLWljb24tY29sb3IpLFxuICAgICAgZm9jdXM6IG1hcC5nZXQoJHRoZW1lLCBmb2N1cy1pY29uLWNvbG9yKSxcbiAgICAgIGhvdmVyOiBtYXAuZ2V0KCR0aGVtZSwgaG92ZXItaWNvbi1jb2xvciksXG4gICAgICBwcmVzc2VkOiBtYXAuZ2V0KCR0aGVtZSwgcHJlc3NlZC1pY29uLWNvbG9yKSxcbiAgICApXG4gICk7XG5cbiAgLy8gU3RhdGVzIHN0eWxlc1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUudGhlbWUtc3R5bGVzKFxuICAgIChcbiAgICAgIGZvY3VzLXN0YXRlLWxheWVyLWNvbG9yOiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtc3RhdGUtbGF5ZXItY29sb3IpLFxuICAgICAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogbWFwLmdldCgkdGhlbWUsIGZvY3VzLXN0YXRlLWxheWVyLW9wYWNpdHkpLFxuICAgICAgaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IG1hcC5nZXQoJHRoZW1lLCBob3Zlci1zdGF0ZS1sYXllci1jb2xvciksXG4gICAgICBob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBtYXAuZ2V0KCR0aGVtZSwgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eSksXG4gICAgICBwcmVzc2VkLXN0YXRlLWxheWVyLWNvbG9yOiBtYXAuZ2V0KCR0aGVtZSwgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvciksXG4gICAgICBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHk6IG1hcC5nZXQoJHRoZW1lLCBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHkpLFxuICAgICksXG4gICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICk7XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGRlbnNpdHkgc2NhbGUgZm9yIGljb24gYnV0dG9uLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXIgfCBTdHJpbmd9ICRkZW5zaXR5LXNjYWxlIC0gRGVuc2l0eSBzY2FsZSB2YWx1ZSBmb3IgY29tcG9uZW50LlxuLy8vICAgICBTdXBwb3J0ZWQgZGVuc2l0eSBzY2FsZSB2YWx1ZXMgcmFuZ2UgZnJvbSBgLTVgIHRvIGAwYCwgd2l0aCBgMGAgYmVpbmcgdGhlIGRlZmF1bHQuXG4vLy9cbkBtaXhpbiBkZW5zaXR5KCRkZW5zaXR5LXNjYWxlLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRzaXplOiBkZW5zaXR5LWZ1bmN0aW9ucy5wcm9wLXZhbHVlKFxuICAgICRkZW5zaXR5LWNvbmZpZzogJGRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgICAkcHJvcGVydHktbmFtZTogc2l6ZSxcbiAgKTtcblxuICBAaW5jbHVkZSBzaXplKCRzaXplLCAkcXVlcnk6ICRxdWVyeSk7XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIHNpemUgb2YgdGhlIGljb24tYnV0dG9uLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRzaXplIC0gU2l6ZSB2YWx1ZSBmb3IgaWNvbi1idXR0b24uXG4vLy8gICAgIFNpemUgd2lsbCBzZXQgdGhlIHdpZHRoLCBoZWlnaHQsIGFuZCBwYWRkaW5nIGZvciB0aGUgb3ZlcmFsbCBjb21wb25lbnQuXG4vLy9cbkBtaXhpbiBzaXplKCRzaXplLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICB3aWR0aDogJHNpemU7XG4gICAgaGVpZ2h0OiAkc2l6ZTtcbiAgICBwYWRkaW5nOiBtYXRoLmRpdigkc2l6ZSAtICRpY29uLXNpemUsIDIpO1xuICB9XG5cbiAgLm1kYy1pY29uLWJ1dHRvbl9fZm9jdXMtcmluZyB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLmZvY3VzIHtcbiAgICAubWRjLWljb24tYnV0dG9uX19mb2N1cy1yaW5nIHtcbiAgICAgIEBpbmNsdWRlIGRvbS5mb3JjZWQtY29sb3JzLW1vZGUoJGV4Y2x1ZGUtaWUxMTogdHJ1ZSkge1xuICAgICAgICBAaW5jbHVkZSBmb2N1cy1yaW5nLmZvY3VzLXJpbmcoXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAgICAgJGNvbnRhaW5lci1vdXRlci1wYWRkaW5nLXZlcnRpY2FsOiAwLFxuICAgICAgICAgICRjb250YWluZXItb3V0ZXItcGFkZGluZy1ob3Jpem9udGFsOiAwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBtYXgtaGVpZ2h0OiAkc2l6ZTtcbiAgICAgICAgbWF4LXdpZHRoOiAkc2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmLm1kYy1pY29uLWJ1dHRvbi0tcmVkdWNlZC1zaXplIHtcbiAgICAkY29tcG9uZW50LXNpemU6ICRzaXplO1xuICAgIC8vIEljb24gYnV0dG9uIHJpcHBsZSBzaXplIGlzIGNhcHBlZCBhdCA0MHB4IGZvciBpY29uIGJ1dHRvbnMgd2l0aFxuICAgIC8vIGRlbnNpdGllcyAtMSBhbmQgMCAoaWNvbiBidXR0b25zIHdpdGggc2l6ZXMgNDR4NDQgYW5kIDQ4eDQ4cHgpLlxuICAgIC8vIFNlZSBodHRwOi8vYi8xOTIzNTM5NjggZm9yIG1vcmUgaW5mby5cbiAgICBAaWYgJHNpemUgPj0gNDBweCBhbmQgJHNpemUgPD0gNDhweCB7XG4gICAgICAkY29tcG9uZW50LXNpemU6IDQwcHg7XG4gICAgfVxuXG4gICAgLm1kYy1pY29uLWJ1dHRvbl9fcmlwcGxlIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIHdpZHRoOiAkY29tcG9uZW50LXNpemU7XG4gICAgICAgIGhlaWdodDogJGNvbXBvbmVudC1zaXplO1xuICAgICAgfVxuXG4gICAgICBAaW5jbHVkZSB0b3VjaC10YXJnZXQtbWl4aW5zLm1hcmdpbihcbiAgICAgICAgJGNvbXBvbmVudC1oZWlnaHQ6ICRjb21wb25lbnQtc2l6ZSxcbiAgICAgICAgJGNvbXBvbmVudC13aWR0aDogJGNvbXBvbmVudC1zaXplLFxuICAgICAgICAkdG91Y2gtdGFyZ2V0LWhlaWdodDogJHNpemUsXG4gICAgICAgICR0b3VjaC10YXJnZXQtd2lkdGg6ICRzaXplLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuZm9jdXMge1xuICAgICAgLm1kYy1pY29uLWJ1dHRvbl9fZm9jdXMtcmluZyB7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgICAgbWF4LWhlaWdodDogJGNvbXBvbmVudC1zaXplO1xuICAgICAgICAgIG1heC13aWR0aDogJGNvbXBvbmVudC1zaXplO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1kYy1pY29uLWJ1dHRvbl9fdG91Y2gge1xuICAgIEBpbmNsdWRlIHRvdWNoLXRhcmdldC1taXhpbnMudG91Y2gtdGFyZ2V0KFxuICAgICAgJHNldC13aWR0aDogdHJ1ZSxcbiAgICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICAgJGhlaWdodDogJHNpemUsXG4gICAgICAkd2lkdGg6ICRzaXplXG4gICAgKTtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSB3aWR0aCwgaGVpZ2h0IGFuZCBwYWRkaW5nIG9mIGljb24gYnV0dG9uLiBBbHNvIGNoYW5nZXMgdGhlIHNpemUgb2Zcbi8vLyB0aGUgaWNvbiBpdHNlbGYgYmFzZWQgb24gYnV0dG9uIHNpemUuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHdpZHRoIC0gV2lkdGggdmFsdWUgZm9yIGljb24tYnV0dG9uLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkaGVpZ2h0IC0gSGVpZ2h0IHZhbHVlIGZvciBpY29uLWJ1dHRvbi4gKGRlZmF1bHQ6ICR3aWR0aClcbi8vLyBAcGFyYW0ge051bWJlcn0gJHBhZGRpbmcgLSBQYWRkaW5nIHZhbHVlIGZvciBpY29uLWJ1dHRvbi4gKGRlZmF1bHQ6IG1heCgkd2lkdGgsICRoZWlnaHQpIC8gMilcbi8vLyBAZGVwcmVjYXRlZFxuLy8vICAgICBUaGlzIG1peGluIHByb3ZpZGVzIHRvbyBtdWNoIG9mIGxvdyBsZXZlbCBjdXN0b21pemF0aW9uLlxuLy8vICAgICBQbGVhc2UgdXNlIG1kYy1pY29uLWJ1dHRvbi1zaXplIGluc3RlYWQuXG4vLy9cbkBtaXhpbiBpY29uLXNpemUoXG4gICR3aWR0aCxcbiAgJGhlaWdodDogJHdpZHRoLFxuICAkcGFkZGluZzogbWF0aC5kaXYobWF0aC5tYXgoJHdpZHRoLCAkaGVpZ2h0KSwgMiksXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICRjb21wb25lbnQtd2lkdGg6ICR3aWR0aCArICRwYWRkaW5nICogMjtcbiAgJGNvbXBvbmVudC1oZWlnaHQ6ICRoZWlnaHQgKyAkcGFkZGluZyAqIDI7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICB3aWR0aDogJGNvbXBvbmVudC13aWR0aDtcbiAgICBoZWlnaHQ6ICRjb21wb25lbnQtaGVpZ2h0O1xuICAgIHBhZGRpbmc6ICRwYWRkaW5nO1xuICAgIGZvbnQtc2l6ZTogbWF0aC5tYXgoJHdpZHRoLCAkaGVpZ2h0KTtcbiAgfVxuXG4gIHN2ZyxcbiAgaW1nIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgd2lkdGg6ICR3aWR0aDtcbiAgICAgIGhlaWdodDogJGhlaWdodDtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZm9udCBjb2xvciBhbmQgdGhlIHJpcHBsZSBjb2xvciB0byB0aGUgcHJvdmlkZWQgY29sb3IgdmFsdWUuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgZm9udCBhbmQgcmlwcGxlIGNvbG9yLlxuLy8vXG5AbWl4aW4gaW5rLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpbmstY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKFxuICAgICRjb2xvcixcbiAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgKTtcbn1cblxuLy8vXG4vLy8gRmxpcHMgaWNvbiBvbmx5IGluIFJUTCBjb250ZXh0LlxuLy8vXG5AbWl4aW4gZmxpcC1pY29uLWluLXJ0bCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1idXR0b25fX2ljb24ge1xuICAgIEBpbmNsdWRlIHJ0bC5ydGwge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgQGluY2x1ZGUgcnRsLmlnbm9yZS1uZXh0LWxpbmUoKTtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZm9udCBjb2xvciB0byB0aGUgcHJvdmlkZWQgY29sb3IgdmFsdWUgZm9yIGEgZGlzYWJsZWQgaWNvbiBidXR0b24uXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgZm9udCBjb2xvci5cbi8vL1xuQG1peGluIGRpc2FibGVkLWluay1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaWYtZGlzYWJsZWRfIHtcbiAgICBAaW5jbHVkZSBpbmstY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEluY2x1ZGVzIGFkLWhvYyBoaWdoIGNvbnRyYXN0IG1vZGUgc3VwcG9ydC5cbi8vL1xuQG1peGluIGhpZ2gtY29udHJhc3QtbW9kZS1zaGltKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8vIFRPRE8oYi8xNzU4MDY4NzQpOiBVc2UgdGhlIERPTSBib3JkZXIgbWl4aW4gYWZ0ZXIgdGhlIHJpcHBsZSBpcyBtb3ZlZFxuICAgIC8vIGF3YXkgZnJvbSA6YmVmb3JlIHRvIGEgZGVkaWNhdGVkIGVsZW1lbnQuXG4gICAgb3V0bGluZTogc29saWQgM3B4IHRyYW5zcGFyZW50O1xuXG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiBkb3VibGUgNXB4IHRyYW5zcGFyZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBmb250IGNvbG9yIHRvIHRoZSBwcm92aWRlZCBjb2xvciB2YWx1ZS4gVGhpcyBjYW4gYmUgd3JhcHBlZCBpblxuLy8vIGEgc3RhdGUgcXVhbGlmaWVyIHN1Y2ggYXMgYG1kYy1pY29uLWJ1dHRvbi1pZi1kaXNhYmxlZF9gLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gaW5rLWNvbG9yXygkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGNvbG9yLCAkY29sb3IpO1xuICB9XG59XG5cbkBtaXhpbiBfc3RhdGUtbGF5ZXItc2l6ZSgkc2l6ZSkge1xuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShoZWlnaHQsICRzaXplKTtcbiAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkod2lkdGgsICRzaXplKTtcbn1cblxuQG1peGluIF9pY29uLXNpemUoJHNpemUpIHtcbiAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoZm9udC1zaXplLCAkc2l6ZSk7XG5cbiAgc3ZnLFxuICBpbWcge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KHdpZHRoLCAkc2l6ZSk7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoaGVpZ2h0LCAkc2l6ZSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgaWNvbiBvcGFjaXR5IHRvIHRoZSBnaXZlbiBvcGFjaXR5LlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gX2Rpc2FibGVkLWljb24tb3BhY2l0eSgkb3BhY2l0eSkge1xuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShvcGFjaXR5LCAkb3BhY2l0eSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgaWNvbiBjb2xvciB0byB0aGUgZ2l2ZW4gY29sb3IuXG4vLy8gQHBhcmFtIHttYXB9ICRjb2xvci1tYXAgLSBUaGUgZGVzaXJlZCBpY29uIGNvbG9yLCBzcGVjaWZpZWQgYXMgYSBtYXAgb2Zcbi8vLyAgICAgY29sb3JzIHdpdGggc3RhdGVzIHtkZWZhdWx0LCBkaXNhYmxlZCwgZm9jdXMsIGhvdmVyLCBwcmVzc2VkfSBhcyBrZXlzLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gX2ljb24tY29sb3Itd2l0aC1tYXAoJGNvbG9yLW1hcCkge1xuICBAaW5jbHVkZSBpbmstY29sb3JfKHN0YXRlLmdldC1kZWZhdWx0LXN0YXRlKCRjb2xvci1tYXApKTtcblxuICAkZGlzYWJsZWQ6IHN0YXRlLmdldC1kaXNhYmxlZC1zdGF0ZSgkY29sb3ItbWFwKTtcbiAgQGlmICRkaXNhYmxlZCB7XG4gICAgJjpkaXNhYmxlZCB7XG4gICAgICBAaW5jbHVkZSBpbmstY29sb3JfKCRkaXNhYmxlZCk7XG4gICAgfVxuICB9XG5cbiAgJGZvY3VzOiBzdGF0ZS5nZXQtZm9jdXMtc3RhdGUoJGNvbG9yLW1hcCk7XG4gIEBpZiAkZm9jdXMge1xuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5mb2N1cyB7XG4gICAgICBAaW5jbHVkZSBpbmstY29sb3JfKCRmb2N1cyk7XG4gICAgfVxuICB9XG5cbiAgJGhvdmVyOiBzdGF0ZS5nZXQtaG92ZXItc3RhdGUoJGNvbG9yLW1hcCk7XG4gIEBpZiAkaG92ZXIge1xuICAgICY6aG92ZXIge1xuICAgICAgQGluY2x1ZGUgaW5rLWNvbG9yXygkaG92ZXIpO1xuICAgIH1cbiAgfVxuXG4gICRwcmVzc2VkOiBzdGF0ZS5nZXQtcHJlc3NlZC1zdGF0ZSgkY29sb3ItbWFwKTtcbiAgQGlmICRwcmVzc2VkIHtcbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuYWN0aXZlIHtcbiAgICAgIEBpbmNsdWRlIGluay1jb2xvcl8oJHByZXNzZWQpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX3N0YXRlcy1jb2xvcnMoJGNvbG9yLW1hcCkge1xuICAvLyBUT0RPKGIvMTkxMjk4Nzk2KTogc3VwcG9ydCBmb2N1c2VkICYgcHJlc3NlZCBrZXkgY29sb3JzLlxuXG4gICRob3ZlcjogbWFwLmdldCgkY29sb3ItbWFwLCBob3Zlcik7XG4gIEBpZiAkaG92ZXIge1xuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMtYmFzZS1jb2xvcihcbiAgICAgICRjb2xvcjogJGhvdmVyLFxuICAgICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgfVxufVxuXG4vLy9cbi8vLyBIZWxwcyBzdHlsZSB0aGUgaWNvbiBidXR0b24gaW4gaXRzIGRpc2FibGVkIHN0YXRlLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gaWYtZGlzYWJsZWRfIHtcbiAgJjpkaXNhYmxlZCB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cbiIsIi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbi8vL1xuLy8vIEVtaXRzIG5lY2Vzc2FyeSBsYXlvdXQgc3R5bGVzIHRvIHNldCBhIHRyYW5zcGFyZW50IGJvcmRlciBhcm91bmQgYW4gZWxlbWVudFxuLy8vIHdpdGhvdXQgaW50ZXJmZXJpbmcgd2l0aCB0aGUgcmVzdCBvZiBpdHMgY29tcG9uZW50IGxheW91dC4gVGhlIGJvcmRlciBpc1xuLy8vIG9ubHkgdmlzaWJsZSBpbiBoaWdoLWNvbnRyYXN0IG1vZGUuIFRoZSB0YXJnZXQgZWxlbWVudCBzaG91bGQgYmUgYSBjaGlsZCBvZlxuLy8vIGEgcmVsYXRpdmVseSBwb3NpdGlvbmVkIHRvcC1sZXZlbCBlbGVtZW50IChpLmUuIGEgOjpiZWZvcmUgcHNldWRvLWVsZW1lbnQpLlxuLy8vXG4vLy8gQHBhcmFtIHtudW1iZXJ9ICRib3JkZXItd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHRyYW5zcGFyZW50IGJvcmRlci5cbi8vLyBAcGFyYW0ge3N0cmluZ30gJGJvcmRlci1zdHlsZSAtIFRoZSBzdHlsZSBvZiB0aGUgdHJhbnNwYXJlbnQgYm9yZGVyLlxuLy8vXG5AbWl4aW4gdHJhbnNwYXJlbnQtYm9yZGVyKFxuICAkYm9yZGVyLXdpZHRoOiAxcHgsXG4gICRib3JkZXItc3R5bGU6IHNvbGlkLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBib3JkZXI6ICRib3JkZXItd2lkdGggJGJvcmRlci1zdHlsZSB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG5cbiAgLy8gVXNlZCB0byBzYXRpc2Z5IEZpcmVmb3ggdjk0IHdoaWNoIGRvZXMgbm90IHJlbmRlciB0cmFuc3BhcmVudCBib3JkZXJzIGluIEhDTSAoYi8yMDY0NDA4MzgpLlxuICBAaW5jbHVkZSBmb3JjZWQtY29sb3JzLW1vZGUoJGV4Y2x1ZGUtaWUxMTogdHJ1ZSkge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBib3JkZXItY29sb3I6IENhbnZhc1RleHQ7XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIFZpc3VhbGx5IGhpZGVzIHRleHQgY29udGVudCBmb3IgYWNjZXNzaWJpbGl0eS4gVGhpcyB0ZXh0IHNob3VsZCBvbmx5IGJlXG4vLy8gdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuLy8vIFNlZSBodHRwczovL2ExMXlwcm9qZWN0LmNvbS9wb3N0cy9ob3ctdG8taGlkZS1jb250ZW50L1xuLy8vXG5AbWl4aW4gdmlzdWFsbHktaGlkZGVuKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyAvKiBhZGRlZCBsaW5lICovXG4gICAgd2lkdGg6IDFweDtcbiAgfVxufVxuXG4vLy8gU2VsZWN0cyBmb3IgSUUxMSBzdXBwb3J0LlxuLy8vXG4vLy8gQGNvbnRlbnQgc3R5bGVzIHRvIGVtaXQgZm9yIElFMTEgc3VwcG9ydFxuQG1peGluIGllMTEtc3VwcG9ydCB7XG4gIEBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDogbm9uZSksICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8vIFNlbGVjdHMgZm9yIGBmb3JjZWQtY29sb3JzYCBoaWdoIGNvbnRyYXN0IG1vZGUuXG4vLy9cbi8vLyBXaGlsZSBpbiBgZm9yY2VkLWNvbG9yc2AgbW9kZSwgb25seSBzeXN0ZW0gY29sb3JzIHNob3VsZCBiZSB1c2VkLlxuLy8vXG4vLy8gQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlI3N5c3RlbV9jb2xvcnNcbi8vLyBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQG1lZGlhL2ZvcmNlZC1jb2xvcnNcbi8vLyBAY29udGVudCBzdHlsZXMgdG8gZW1pdCBpbiBgZm9yY2VkLWNvbG9yc2AgbW9kZVxuQG1peGluIGZvcmNlZC1jb2xvcnMtbW9kZSgkZXhjbHVkZS1pZTExOiBmYWxzZSkge1xuICBAaWYgJGV4Y2x1ZGUtaWUxMSB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAoZm9yY2VkLWNvbG9yczogYWN0aXZlKSwgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIxIEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL3J0bCc7XG5AdXNlICdAbWF0ZXJpYWwvZG9tL2RvbSc7XG5cbiRyaW5nLXJhZGl1cy1kZWZhdWx0OiA4cHggIWRlZmF1bHQ7XG4kaW5uZXItcmluZy13aWR0aC1kZWZhdWx0OiAycHggIWRlZmF1bHQ7XG4kaW5uZXItcmluZy1jb2xvci1kZWZhdWx0OiB0cmFuc3BhcmVudCAhZGVmYXVsdDtcbiRvdXRlci1yaW5nLXdpZHRoLWRlZmF1bHQ6IDJweCAhZGVmYXVsdDtcbiRvdXRlci1yaW5nLWNvbG9yLWRlZmF1bHQ6IHRyYW5zcGFyZW50ICFkZWZhdWx0O1xuJGNvbnRhaW5lci1vdXRlci1wYWRkaW5nLWRlZmF1bHQ6IDJweCAhZGVmYXVsdDtcblxuLy8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQncyBpbm5lciBmb2N1cyByaW5nIGVsZW1lbnQuXG4vLy9cbi8vLyBAcGFyYW0gJHJpbmctcmFkaXVzIFskcmluZy1yYWRpdXMtZGVmYXVsdF0gLSBGb2N1cyByaW5nIHJhZGl1cy5cbi8vLyBAcGFyYW0gJGlubmVyLXJpbmctd2lkdGggWyRpbm5lci1yaW5nLXdpZHRoLWRlZmF1bHRdIC0gSW5uZXIgZm9jdXMgcmluZyB3aWR0aC5cbi8vLyBAcGFyYW0gJGlubmVyLXJpbmctY29sb3IgWyRpbm5lci1yaW5nLWNvbG9yLWRlZmF1bHRdIC0gSW5uZXIgZm9jdXMgcmluZyBjb2xvci5cbi8vLyBAcGFyYW0gJG91dGVyLXJpbmctd2lkdGggWyRvdXRlci1yaW5nLXdpZHRoLWRlZmF1bHRdIC0gT3V0ZXIgZm9jdXMgcmluZyB3aWR0aC5cbi8vLyBAcGFyYW0gJG91dGVyLXJpbmctY29sb3IgWyRvdXRlci1yaW5nLWNvbG9yLWRlZmF1bHRdIC0gT3V0ZXIgZm9jdXMgcmluZyBjb2xvci5cbi8vLyBAcGFyYW0gJGNvbnRhaW5lci1vdXRlci1wYWRkaW5nIFskY29udGFpbmVyLW91dGVyLXBhZGRpbmctZGVmYXVsdF0gLSBUaGVcbi8vLyAgICAgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZm9jdXMgcmluZyBhbmQgdGhlIGNvbnRhaW5lci5cbkBtaXhpbiBmb2N1cy1yaW5nKFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmluZy1yYWRpdXM6ICRyaW5nLXJhZGl1cy1kZWZhdWx0LFxuICAkaW5uZXItcmluZy13aWR0aDogJGlubmVyLXJpbmctd2lkdGgtZGVmYXVsdCxcbiAgJGlubmVyLXJpbmctY29sb3I6ICRpbm5lci1yaW5nLWNvbG9yLWRlZmF1bHQsXG4gICRvdXRlci1yaW5nLXdpZHRoOiAkb3V0ZXItcmluZy13aWR0aC1kZWZhdWx0LFxuICAkb3V0ZXItcmluZy1jb2xvcjogJG91dGVyLXJpbmctY29sb3ItZGVmYXVsdCxcbiAgJGNvbnRhaW5lci1vdXRlci1wYWRkaW5nLXZlcnRpY2FsOiAkY29udGFpbmVyLW91dGVyLXBhZGRpbmctZGVmYXVsdCxcbiAgJGNvbnRhaW5lci1vdXRlci1wYWRkaW5nLWhvcml6b250YWw6ICRjb250YWluZXItb3V0ZXItcGFkZGluZy1kZWZhdWx0XG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcbiAgJGNvbnRhaW5lci1zaXplLXZlcnRpY2FsOiAxMDAlO1xuICBAaWYgJGNvbnRhaW5lci1vdXRlci1wYWRkaW5nLXZlcnRpY2FsICE9IDAge1xuICAgICRjb250YWluZXItc2l6ZS12ZXJ0aWNhbDogY2FsYyhcbiAgICAgIDEwMCUgKyAjeyRjb250YWluZXItb3V0ZXItcGFkZGluZy12ZXJ0aWNhbCAqIDJ9XG4gICAgKTtcbiAgfVxuICAkY29udGFpbmVyLXNpemUtaG9yaXpvbnRhbDogMTAwJTtcbiAgQGlmICRjb250YWluZXItb3V0ZXItcGFkZGluZy1ob3Jpem9udGFsICE9IDAge1xuICAgICRjb250YWluZXItc2l6ZS1ob3Jpem9udGFsOiBjYWxjKFxuICAgICAgMTAwJSArICN7JGNvbnRhaW5lci1vdXRlci1wYWRkaW5nLWhvcml6b250YWwgKiAyfVxuICAgICk7XG4gIH1cbiAgJG91dGVyLXJpbmctc2l6ZTogMTAwJTtcbiAgQGlmICRvdXRlci1yaW5nLXdpZHRoID4gMCB7XG4gICAgJG91dGVyLXJpbmctc2l6ZTogY2FsYygxMDAlICsgI3skb3V0ZXItcmluZy13aWR0aCAqIDJ9KTtcbiAgfVxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGJvcmRlcjogJGlubmVyLXJpbmctd2lkdGggc29saWQgJGlubmVyLXJpbmctY29sb3I7XG4gICAgYm9yZGVyLXJhZGl1czogJHJpbmctcmFkaXVzIC0gJG91dGVyLXJpbmctd2lkdGg7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgbGVmdDogNTAlO1xuICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgaGVpZ2h0OiAkY29udGFpbmVyLXNpemUtdmVydGljYWw7XG4gICAgd2lkdGg6ICRjb250YWluZXItc2l6ZS1ob3Jpem9udGFsO1xuXG4gICAgQGluY2x1ZGUgZG9tLmZvcmNlZC1jb2xvcnMtbW9kZSgkZXhjbHVkZS1pZTExOiB0cnVlKSB7XG4gICAgICBib3JkZXItY29sb3I6IENhbnZhc1RleHQ7XG4gICAgfVxuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgY29udGVudDogJyc7XG4gICAgICBib3JkZXI6ICRvdXRlci1yaW5nLXdpZHRoIHNvbGlkICRvdXRlci1yaW5nLWNvbG9yO1xuICAgICAgYm9yZGVyLXJhZGl1czogJHJpbmctcmFkaXVzO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICBAaW5jbHVkZSBydGwuaWdub3JlLW5leHQtbGluZSgpO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgICBoZWlnaHQ6ICRvdXRlci1yaW5nLXNpemU7XG4gICAgICB3aWR0aDogJG91dGVyLXJpbmctc2l6ZTtcblxuICAgICAgQGluY2x1ZGUgZG9tLmZvcmNlZC1jb2xvcnMtbW9kZSgkZXhjbHVkZS1pZTExOiB0cnVlKSB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogQ2FudmFzVGV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8vLyBDdXN0b21pemVzIHRoZSBjb2xvciBvZiB0aGUgYnV0dG9uIGZvY3VzIHJpbmcuXG4vLy9cbi8vLyBAcGFyYW0gJGlubmVyLXJpbmctY29sb3IgWyRpbm5lci1yaW5nLWNvbG9yLWRlZmF1bHRdIC0gSW5uZXIgZm9jdXMgcmluZyBjb2xvci5cbi8vLyBAcGFyYW0gJG91dGVyLXJpbmctd2lkdGggWyRvdXRlci1yaW5nLXdpZHRoLWRlZmF1bHRdIC0gT3V0ZXIgZm9jdXMgcmluZyB3aWR0aC5cbkBtaXhpbiBmb2N1cy1yaW5nLWNvbG9yKFxuICAkaW5uZXItcmluZy1jb2xvcjogJGlubmVyLXJpbmctY29sb3ItZGVmYXVsdCxcbiAgJG91dGVyLXJpbmctY29sb3I6ICRvdXRlci1yaW5nLWNvbG9yLWRlZmF1bHRcbikge1xuICBib3JkZXItY29sb3I6ICRpbm5lci1yaW5nLWNvbG9yO1xuXG4gICY6OmFmdGVyIHtcbiAgICBib3JkZXItY29sb3I6ICRvdXRlci1yaW5nLWNvbG9yO1xuICB9XG59XG5cbi8vLyBDdXN0b21pemVzIHRoZSBib3JkZXIgcmFkaXVzIG9mIHRoZSBidXR0b24gZm9jdXMgcmluZy5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcmluZy1yYWRpdXMgLSBUaGUgYm9yZGVyIHJhZGl1cyBvZiB0aGUgZm9jdXMgcmluZy5cbi8vLyBAcGFyYW0ge051bWJlcn0gJG91dGVyLXJpbmctd2lkdGggWyRvdXRlci1yaW5nLXdpZHRoXSAtIFdpZHRoIG9mIHRoZSBvdXRlclxuLy8vICAgICByaW5nLCByZXF1aXJlZCB0byBjb21wdXRlIHRoZSByYWRpdXMgZm9yIHRoZSBpbm5lciByaW5nLlxuQG1peGluIGZvY3VzLXJpbmctcmFkaXVzKFxuICAkcmluZy1yYWRpdXMsXG4gICRvdXRlci1yaW5nLXdpZHRoOiAkb3V0ZXItcmluZy13aWR0aC1kZWZhdWx0LFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGJvcmRlci1yYWRpdXM6ICRyaW5nLXJhZGl1cyAtICRvdXRlci1yaW5nLXdpZHRoO1xuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgYm9yZGVyLXJhZGl1czogJHJpbmctcmFkaXVzO1xuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnQG1hdGVyaWFsL2Jhc2UvbWl4aW5zJyBhcyBiYXNlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL3J0bCc7XG5cbiRoZWlnaHQ6IDQ4cHggIWRlZmF1bHQ7XG4kd2lkdGg6ICRoZWlnaHQgIWRlZmF1bHQ7XG5cbi8vLyBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50J3MgdG91Y2ggdGFyZ2V0IHdyYXBwZXIgZWxlbWVudC5cbkBtaXhpbiB3cmFwcGVyKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLXRvdWNoLXRhcmdldC13cmFwcGVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgLy8gRW5zdXJlIHRoYXQgc3R5bGVzIGFyZSBvbmx5IGVtaXR0ZWQgb25jZSBhY3Jvc3MgYWxsIGNvbXBvbmVudHMgdGhhdFxuICAgICAgLy8gaGF2ZSBpbmNyZWFzZWQgdG91Y2ggdGFyZ2V0cy5cbiAgICAgIEBpbmNsdWRlIGJhc2UtbWl4aW5zLmVtaXQtb25jZSgnbWRjLXRvdWNoLXRhcmdldC93cmFwcGVyJykge1xuICAgICAgICAvLyBOT1RFOiBXaWxsIGNoYW5nZSB0byBgaW5saW5lLWJsb2NrYCBpbiB0aGUgZnV0dXJlLCBidXQga2VlcGluZyBhcyBpc1xuICAgICAgICAvLyB0ZW1wb3JhcmlseSBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuXG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQncyBpbm5lciB0b3VjaCB0YXJnZXQgZWxlbWVudC5cbi8vLyBCeSBkZWZhdWx0LCBvbmx5IHNldHMgdGhlIGlubmVyIGVsZW1lbnQgaGVpZ2h0IHRvIHRoZSBtaW5pbXVtIHRvdWNoIHRhcmdldFxuLy8vIGhlaWdodCAoJG1kYy10b3VjaC10YXJnZXQtaGVpZ2h0KS5cbi8vLyBAcGFyYW0ge0Jvb2xlYW59ICRzZXQtd2lkdGggW2ZhbHNlXSAtIFNldHMgdGhlIGlubmVyIGVsZW1lbnQgd2lkdGggdG8gdGhlXG4vLy8gICAgIG1pbmltdW0gdG91Y2ggdGFyZ2V0IHdpZHRoICgkbWRjLXRvdWNoLXRhcmdldC13aWR0aCkuXG4vLy8gQHBhcmFtICRoZWlnaHQgWyRtZGMtdG91Y2gtdGFyZ2V0LWhlaWdodF0gLSBUb3VjaCB0YXJnZXQgaGVpZ2h0LlxuLy8vIEBwYXJhbSAkd2lkdGggWyRtZGMtdG91Y2gtdGFyZ2V0LXdpZHRoXSAtIFRvdWNoIHRhcmdldCB3aWR0aC5cbkBtaXhpbiB0b3VjaC10YXJnZXQoXG4gICRzZXQtd2lkdGg6IGZhbHNlLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkaGVpZ2h0OiAkaGVpZ2h0LFxuICAkd2lkdGg6ICR3aWR0aFxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgaGVpZ2h0OiAkaGVpZ2h0O1xuICB9XG5cbiAgQGlmICRzZXQtd2lkdGgge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSBydGwuaWdub3JlLW5leHQtbGluZSgpO1xuICAgICAgbGVmdDogNTAlO1xuICAgICAgd2lkdGg6ICR3aWR0aDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8vIEFwcGxpZXMgbWFyZ2luIHRvIHRoZSBjb21wb25lbnQgd2l0aCB0aGUgaW5jcmVhc2VkIHRvdWNoIHRhcmdldCxcbi8vLyB0byBjb21wZW5zYXRlIGZvciB0aGUgdG91Y2ggdGFyZ2V0LlxuQG1peGluIG1hcmdpbihcbiAgJGNvbXBvbmVudC1oZWlnaHQsXG4gICRjb21wb25lbnQtd2lkdGg6IG51bGwsXG4gICR0b3VjaC10YXJnZXQtaGVpZ2h0OiAkaGVpZ2h0LFxuICAkdG91Y2gtdGFyZ2V0LXdpZHRoOiAkd2lkdGgsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICR2ZXJ0aWNhbC1tYXJnaW4tdmFsdWU6IG1hdGguZGl2KCR0b3VjaC10YXJnZXQtaGVpZ2h0IC0gJGNvbXBvbmVudC1oZWlnaHQsIDIpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgbWFyZ2luLXRvcDogJHZlcnRpY2FsLW1hcmdpbi12YWx1ZTtcbiAgICBtYXJnaW4tYm90dG9tOiAkdmVydGljYWwtbWFyZ2luLXZhbHVlO1xuICB9XG5cbiAgQGlmICRjb21wb25lbnQtd2lkdGgge1xuICAgICRob3Jpem9udGFsLW1hcmdpbi12YWx1ZTogbWF0aC5kaXYoXG4gICAgICAkdG91Y2gtdGFyZ2V0LXdpZHRoIC0gJGNvbXBvbmVudC13aWR0aCxcbiAgICAgIDJcbiAgICApO1xuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogJGhvcml6b250YWwtbWFyZ2luLXZhbHVlO1xuICAgICAgbWFyZ2luLWxlZnQ6ICRob3Jpem9udGFsLW1hcmdpbi12YWx1ZTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnc2FzczptYXRoJztcbkB1c2UgJ3Nhc3M6Y29sb3InO1xuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi9mdW5jdGlvbnMnIGFzIGZ1bmN0aW9uczI7XG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlcycgYXMgdmFyaWFibGVzMjtcbkB1c2UgJ0BtYXRlcmlhbC9iYXNlL21peGlucycgYXMgYmFzZS1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC9ydGwvcnRsJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICcuL3JpcHBsZS10aGVtZSc7XG5cbkBtaXhpbiBjb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIC5tZGMtcmlwcGxlLXN1cmZhY2Uge1xuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbkBtaXhpbiBzdGF0aWMtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLXJpcHBsZS1zdXJmYWNlIHtcbiAgICBAaW5jbHVkZSBzdXJmYWNlKCRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSByYWRpdXMtYm91bmRlZCgkcXVlcnk6ICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgc3VyZmFjZS1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1yaXBwbGUtc3VyZmFjZVtkYXRhLW1kYy1yaXBwbGUtaXMtdW5ib3VuZGVkXSxcbiAgLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZCB7XG4gICAgQGluY2x1ZGUgcmFkaXVzLXVuYm91bmRlZCgkcXVlcnk6ICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgdW5ib3VuZGVkLXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vIFNldHMgYWxsIHN0YXRlcyAoaW5jbHVkaW5nIGhvdmVyLCBmb2N1cywgcHJlc3MsIGFjdGl2YXRlZCBhbmQgc2VsZWN0ZWQpIHdpdGhcbi8vLyBnaXZlbiBjb2xvciBhcyBiYXNlIGNvbG9yLlxuLy8vXG4vLy8gVGhpcyBtaXhpbiBpcyBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuIFVzZSBgcmlwcGxlLXRoZW1lLnN0YXRlcygkY29sb3IpYCBtaXhpblxuLy8vIHRvIHNldCBpbnRlcmFjdGl2ZSBzdGF0ZXMgKGhvdmVyLCBmb2N1cyAmIHByZXNzKSBjb2xvci5cbi8vL1xuLy8vIEBwYXJhbSB7Q29sb3J8U3RyaW5nfSAkY29sb3IgLSBUYXJnZXQgYmFzZSBjb2xvci4gQ2FuIGJlIHZhbGlkIENTUyBjb2xvciBvclxuLy8vICAgICBhIGNvbG9yIHN0cmluZyBsaXRlcmFsIChpLmUuLCBgcHJpbWFyeWAsIGBzZWNvbmRhcnlgLCBldGMpLlxuQG1peGluIHN0YXRlcy1mb3ItY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMoJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMtYWN0aXZhdGVkKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzLXNlbGVjdGVkKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xufVxuXG5AbWl4aW4gc3VyZmFjZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgfVxufVxuXG5AbWl4aW4gdW5ib3VuZGVkLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIH1cbn1cblxuQG1peGluIGNvbW1vbigkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgc3R5bGVzIG5lZWRlZCBieSBhbnkgY29tcG9uZW50IHVzaW5nIE1EQyBSaXBwbGUgYXJlIGVtaXR0ZWQsIGJ1dCBvbmx5IG9uY2UuXG4gIC8vIChFdmVyeSBjb21wb25lbnQgdXNpbmcgTURDIFJpcHBsZSBpbXBvcnRzIHRoZXNlIG1peGlucywgYnV0IGRvZXNuJ3QgbmVjZXNzYXJpbHkgaW1wb3J0XG4gIC8vIG1kYy1yaXBwbGUuc2Nzcy4pXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgQGluY2x1ZGUgYmFzZS1taXhpbnMuZW1pdC1vbmNlKCdtZGMtcmlwcGxlL2NvbW1vbi9hbmltYXRpb24nKSB7XG4gICAgICBAaW5jbHVkZSBrZXlmcmFtZXNfO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gc3VyZmFjZShcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJyxcbiAgJGluY2x1ZGUtd2lsbC1jaGFuZ2U6IHRydWUgLy8gVE9ETyhiLzE1MTkzMTk2MSk6IFJlbW92ZSBvbmNlIHJlc29sdmVkXG4pIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC0tbWRjLXJpcHBsZS1mZy1zaXplOiAwO1xuICAgIC0tbWRjLXJpcHBsZS1sZWZ0OiAwO1xuICAgIC0tbWRjLXJpcHBsZS10b3A6IDA7XG4gICAgLS1tZGMtcmlwcGxlLWZnLXNjYWxlOiAxO1xuICAgIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kOiAwO1xuICAgIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQ6IDA7XG5cbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XG4gICAgLy8gVE9ETyhiLzE1MTkzMTk2MSk6IFJlbW92ZSB0aGUgZm9sbG93aW5nIGJsb2NrIG9uY2UgcmVzb2x2ZWRcbiAgICBAaWYgJGluY2x1ZGUtd2lsbC1jaGFuZ2Uge1xuICAgICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcbiAgICB9XG4gIH1cblxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICBjb250ZW50OiAnJztcbiAgICB9XG4gIH1cblxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgLy8gQWxzbyB0cmFuc2l0aW9uIGJhY2tncm91bmQtY29sb3IgdG8gYXZvaWQgdW5uYXR1cmFsIGNvbG9yIGZsYXNoZXMgd2hlbiB0b2dnbGluZyBhY3RpdmF0ZWQvc2VsZWN0ZWQgc3RhdGVcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgcmlwcGxlLXRoZW1lLiRzdGF0ZXMtd2FzaC1kdXJhdGlvbiBsaW5lYXIsXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgcmlwcGxlLXRoZW1lLiRzdGF0ZXMtd2FzaC1kdXJhdGlvbiBsaW5lYXI7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSByaXBwbGUgd2FzaCBmb3IgaG92ZXIvZm9jdXMgc3RhdGVzIGlzIGRpc3BsYXllZCBvbiB0b3Agb2YgcG9zaXRpb25lZCBjaGlsZCBlbGVtZW50c1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoXG4gICAgICAgIHotaW5kZXgsXG4gICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZSgtLW1kYy1yaXBwbGUtei1pbmRleCwgMSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoXG4gICAgICAgIHotaW5kZXgsXG4gICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZSgtLW1kYy1yaXBwbGUtei1pbmRleCwgMClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tbW9uIHN0eWxlcyBmb3IgdXBncmFkZWQgc3VyZmFjZXMgKHNvbWUgb2YgdGhlc2UgZGVwZW5kIG9uIGN1c3RvbSBwcm9wZXJ0aWVzIHNldCB2aWEgSlMgb3Igb3RoZXIgbWl4aW5zKVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZCB7XG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBAaW5jbHVkZSBydGwuaWdub3JlLW5leHQtbGluZSgpO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkIHtcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgdG9wOiB2YXIoLS1tZGMtcmlwcGxlLXRvcCwgMCk7XG4gICAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb24ge1xuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb246IG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIHJpcHBsZS10aGVtZS4kdHJhbnNsYXRlLWR1cmF0aW9uXG4gICAgICAgICAgICBmb3J3YXJkcyxcbiAgICAgICAgICBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4gcmlwcGxlLXRoZW1lLiRmYWRlLWluLWR1cmF0aW9uIGZvcndhcmRzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1kZWFjdGl2YXRpb24ge1xuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb246IG1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXQgcmlwcGxlLXRoZW1lLiRmYWRlLW91dC1kdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgLy8gUmV0YWluIHRyYW5zZm9ybSBmcm9tIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIGFjdGl2YXRpb25cbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSlcbiAgICAgICAgICBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiByYWRpdXMtYm91bmRlZChcbiAgJHJhZGl1czogMTAwJSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xuKSB7XG4gICRmZWF0LXN0cnV0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydXR1cmUpIHtcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAjeyRyYWRpdXN9KTtcbiAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICBsZWZ0OiBjYWxjKDUwJSAtICN7JHJhZGl1c30pO1xuICAgICAgd2lkdGg6ICRyYWRpdXMgKiAyO1xuICAgICAgaGVpZ2h0OiAkcmFkaXVzICogMjtcbiAgICB9XG4gIH1cblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQge1xuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnV0dXJlKSB7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiByYWRpdXMtdW5ib3VuZGVkKFxuICAkcmFkaXVzOiAxMDAlLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtc3RydXR1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUsXG4gICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xuICAgICAgdG9wOiBjYWxjKDUwJSAtICN7bWF0aC5kaXYoJHJhZGl1cywgMil9KTtcbiAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICBsZWZ0OiBjYWxjKDUwJSAtICN7bWF0aC5kaXYoJHJhZGl1cywgMil9KTtcbiAgICAgIHdpZHRoOiAkcmFkaXVzO1xuICAgICAgaGVpZ2h0OiAkcmFkaXVzO1xuICAgIH1cbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZCB7XG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSxcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xuICAgICAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCBjYWxjKDUwJSAtICN7bWF0aC5kaXYoJHJhZGl1cywgMil9KSk7XG4gICAgICAgIEBpbmNsdWRlIHJ0bC5pZ25vcmUtbmV4dC1saW5lKCk7XG4gICAgICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgY2FsYyg1MCUgLSAje21hdGguZGl2KCRyYWRpdXMsIDIpfSkpO1xuICAgICAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnV0dXJlKSB7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIENvbW1vbiBzdHlsZXMgZm9yIGEgcmlwcGxlIHRhcmdldCBlbGVtZW50LlxuLy8gVXNlZCBmb3IgY29tcG9uZW50cyB3aGljaCBoYXZlIGFuIGlubmVyIHJpcHBsZSB0YXJnZXQgZWxlbWVudC5cbkBtaXhpbiB0YXJnZXQtY29tbW9uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgLy8gTmVjZXNzYXJ5IGZvciBjbGlja3Mgb24gb3RoZXIgaW5uZXIgZWxlbWVudHMgKGUuZy4gY2xvc2UgaWNvbiBpbiBjaGlwKVxuICAgIC8vIHRvIGdvIHRocm91Z2guXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIH1cbn1cblxuQG1peGluIGtleWZyYW1lc18ge1xuICBAa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIHtcbiAgICBmcm9tIHtcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcmlhYmxlczIuJHN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbiAgICAgIC8vIE5PVEU6IEZvciB0aGVzZSBrZXlmcmFtZXMsIHdlIGRvIG5vdCBuZWVkIGN1c3RvbSBwcm9wZXJ0eSBmYWxsYmFja3MgYmVjYXVzZSB0aGV5IGFyZSBvbmx5XG4gICAgICAvLyB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYC5tZGMtcmlwcGxlLXVwZ3JhZGVkYC4gU2luY2UgTURDUmlwcGxlRm91bmRhdGlvbiBjaGVja3MgdG8gZW5zdXJlXG4gICAgICAvLyB0aGF0IGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQgd2l0aGluIHRoZSBicm93c2VyIGJlZm9yZSBhZGRpbmcgdGhpcyBjbGFzcywgd2UgY2FuXG4gICAgICAvLyBzYWZlbHkgdXNlIHRoZW0gd2l0aG91dCBhIGZhbGxiYWNrLlxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQsIDApKSBzY2FsZSgxKTtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKVxuICAgICAgICBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XG4gICAgfVxuICB9XG5cbiAgQGtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4ge1xuICAgIGZyb20ge1xuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICBvcGFjaXR5OiB2YXIoLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHksIDApO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dCB7XG4gICAgZnJvbSB7XG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XG4gICAgICBvcGFjaXR5OiB2YXIoLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHksIDApO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuJGRlY2VsZXJhdGlvbi1jdXJ2ZS10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpICFkZWZhdWx0O1xuJHN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSAhZGVmYXVsdDtcbiRhY2NlbGVyYXRpb24tY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKSAhZGVmYXVsdDtcbiRzaGFycC1jdXJ2ZS10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSkgIWRlZmF1bHQ7XG5cbkBmdW5jdGlvbiBlbnRlcigkbmFtZSwgJGR1cmF0aW9uLCAkZGVsYXk6IDBtcykge1xuICBAcmV0dXJuICRuYW1lICRkdXJhdGlvbiAkZGVsYXkgJGRlY2VsZXJhdGlvbi1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG59XG5cbkBmdW5jdGlvbiBleGl0LXBlcm1hbmVudCgkbmFtZSwgJGR1cmF0aW9uLCAkZGVsYXk6IDBtcykge1xuICBAcmV0dXJuICRuYW1lICRkdXJhdGlvbiAkZGVsYXkgJGFjY2VsZXJhdGlvbi1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG59XG5cbkBmdW5jdGlvbiBleGl0LXRlbXBvcmFyeSgkbmFtZSwgJGR1cmF0aW9uLCAkZGVsYXk6IDBtcykge1xuICBAcmV0dXJuICRuYW1lICRkdXJhdGlvbiAkZGVsYXkgJHNoYXJwLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbn1cblxuQGZ1bmN0aW9uIHN0YW5kYXJkKCRuYW1lLCAkZHVyYXRpb24sICRkZWxheTogMG1zKSB7XG4gIEByZXR1cm4gJG5hbWUgJGR1cmF0aW9uICRkZWxheSAkc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xufVxuXG5AZnVuY3Rpb24gbGluZWFyKCRuYW1lLCAkZHVyYXRpb24sICRkZWxheTogMG1zKSB7XG4gIEByZXR1cm4gJG5hbWUgJGR1cmF0aW9uICRkZWxheSBsaW5lYXI7XG59XG4iLCJAdXNlIFwiQG1hdGVyaWFsL3R5cG9ncmFwaHkvbWRjLXR5cG9ncmFwaHlcIjtcbkB1c2UgXCJAbWF0ZXJpYWwvZWxldmF0aW9uL21kYy1lbGV2YXRpb25cIjtcbkB1c2UgXCJAbWF0ZXJpYWwvdG9wLWFwcC1iYXIvbWRjLXRvcC1hcHAtYmFyXCI7XG5AdXNlIFwiQG1hdGVyaWFsL2ljb24tYnV0dG9uXCI7XG5cbkBpbXBvcnQgXCJAbWF0ZXJpYWwvaWNvbi1idXR0b24vbWRjLWljb24tYnV0dG9uXCI7XG5cbmJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */